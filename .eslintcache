[{"/Users/pleed0215/Documents/mystudy/nuber_eats/src/index.tsx":"1","/Users/pleed0215/Documents/mystudy/nuber_eats/src/reportWebVitals.ts":"2","/Users/pleed0215/Documents/mystudy/nuber_eats/src/apollo.ts":"3","/Users/pleed0215/Documents/mystudy/nuber_eats/src/App.tsx":"4","/Users/pleed0215/Documents/mystudy/nuber_eats/src/gloabl.constant.ts":"5","/Users/pleed0215/Documents/mystudy/nuber_eats/src/routers/logged-out-router.tsx":"6","/Users/pleed0215/Documents/mystudy/nuber_eats/src/routers/logged-in-router.tsx":"7","/Users/pleed0215/Documents/mystudy/nuber_eats/src/hooks/useMe.ts":"8","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/404.tsx":"9","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/create-account.tsx":"10","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/client/category.tsx":"11","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/client/restaurants.tsx":"12","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/client/search.tsx":"13","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/logint.tsx":"14","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/restaurant/create.restaurant.tsx":"15","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/restaurant/my.restaurants.tsx":"16","/Users/pleed0215/Documents/mystudy/nuber_eats/src/components/header.tsx":"17","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/user/verification.page.tsx":"18","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/user/password.page.tsx":"19","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/user/me.page.tsx":"20","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/restaurant/update.dish.tsx":"21","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/restaurant/update.restaurant.tsx":"22","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/restaurant/create.dish.tsx":"23","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/restaurant/my.restaurant.tsx":"24","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/client/restaurant.tsx":"25","/Users/pleed0215/Documents/mystudy/nuber_eats/src/codegen/globalTypes.ts":"26","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/user/logout.tsx":"27","/Users/pleed0215/Documents/mystudy/nuber_eats/src/utils.ts":"28","/Users/pleed0215/Documents/mystudy/nuber_eats/src/hooks/useQueryParam.ts":"29","/Users/pleed0215/Documents/mystudy/nuber_eats/src/components/helmet.onlytitle.tsx":"30","/Users/pleed0215/Documents/mystudy/nuber_eats/src/fragments.ts":"31","/Users/pleed0215/Documents/mystudy/nuber_eats/src/components/form-button-inactivable.tsx":"32","/Users/pleed0215/Documents/mystudy/nuber_eats/src/components/uberlogo.tsx":"33","/Users/pleed0215/Documents/mystudy/nuber_eats/src/components/restaurant.item.tsx":"34","/Users/pleed0215/Documents/mystudy/nuber_eats/src/components/dish.item.tsx":"35","/Users/pleed0215/Documents/mystudy/nuber_eats/src/components/restaurants.tsx":"36","/Users/pleed0215/Documents/mystudy/nuber_eats/src/components/categories.tsx":"37","/Users/pleed0215/Documents/mystudy/nuber_eats/src/components/category.tsx":"38","/Users/pleed0215/Documents/mystudy/nuber_eats/src/components/cart.icon.tsx":"39"},{"size":929,"mtime":1608276074484,"results":"40","hashOfConfig":"41"},{"size":425,"mtime":1608276074485,"results":"42","hashOfConfig":"41"},{"size":1112,"mtime":1608680711439,"results":"43","hashOfConfig":"41"},{"size":401,"mtime":1608344743262,"results":"44","hashOfConfig":"41"},{"size":41,"mtime":1608276074483,"results":"45","hashOfConfig":"41"},{"size":582,"mtime":1608276074482,"results":"46","hashOfConfig":"41"},{"size":3788,"mtime":1608790881487,"results":"47","hashOfConfig":"41"},{"size":283,"mtime":1608276074484,"results":"48","hashOfConfig":"41"},{"size":650,"mtime":1608276074484,"results":"49","hashOfConfig":"41"},{"size":4686,"mtime":1608276074484,"results":"50","hashOfConfig":"41"},{"size":1516,"mtime":1608346926256,"results":"51","hashOfConfig":"41"},{"size":3065,"mtime":1608346939214,"results":"52","hashOfConfig":"41"},{"size":1930,"mtime":1608346952186,"results":"53","hashOfConfig":"41"},{"size":4171,"mtime":1608444609213,"results":"54","hashOfConfig":"41"},{"size":5164,"mtime":1608511761495,"results":"55","hashOfConfig":"41"},{"size":3150,"mtime":1608785968062,"results":"56","hashOfConfig":"41"},{"size":1310,"mtime":1608276074483,"results":"57","hashOfConfig":"41"},{"size":2496,"mtime":1608276074485,"results":"58","hashOfConfig":"41"},{"size":3156,"mtime":1608276074485,"results":"59","hashOfConfig":"41"},{"size":3905,"mtime":1608450998531,"results":"60","hashOfConfig":"41"},{"size":8092,"mtime":1608958996714,"results":"61","hashOfConfig":"41"},{"size":4081,"mtime":1608958996714,"results":"62","hashOfConfig":"41"},{"size":14250,"mtime":1608958996713,"results":"63","hashOfConfig":"41"},{"size":6414,"mtime":1608958996713,"results":"64","hashOfConfig":"41"},{"size":17218,"mtime":1609065029268,"results":"65","hashOfConfig":"41"},{"size":1879,"mtime":1609059394284,"results":"66","hashOfConfig":"41"},{"size":1005,"mtime":1608958996715,"results":"67","hashOfConfig":"41"},{"size":181,"mtime":1608276074485,"results":"68","hashOfConfig":"41"},{"size":127,"mtime":1608276074484,"results":"69","hashOfConfig":"41"},{"size":264,"mtime":1608276074483,"results":"70","hashOfConfig":"41"},{"size":1044,"mtime":1608958996712,"results":"71","hashOfConfig":"41"},{"size":363,"mtime":1608276074483,"results":"72","hashOfConfig":"41"},{"size":167,"mtime":1608276074483,"results":"73","hashOfConfig":"41"},{"size":1120,"mtime":1608685769263,"results":"74","hashOfConfig":"41"},{"size":1052,"mtime":1608958996712,"results":"75","hashOfConfig":"41"},{"size":915,"mtime":1608276074483,"results":"76","hashOfConfig":"41"},{"size":681,"mtime":1608276074483,"results":"77","hashOfConfig":"41"},{"size":803,"mtime":1608276074483,"results":"78","hashOfConfig":"41"},{"size":645,"mtime":1609060637215,"results":"79","hashOfConfig":"41"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},"16nv2t4",{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"82"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"82"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"82"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"82"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"82"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"82"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"82"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"82"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/pleed0215/Documents/mystudy/nuber_eats/src/index.tsx",[],["167","168"],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/reportWebVitals.ts",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/apollo.ts",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/App.tsx",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/gloabl.constant.ts",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/routers/logged-out-router.tsx",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/routers/logged-in-router.tsx",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/hooks/useMe.ts",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/404.tsx",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/create-account.tsx",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/client/category.tsx",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/client/restaurants.tsx",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/client/search.tsx",["169"],"import { gql, useLazyQuery } from \"@apollo/client\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  QuerySearchByTerm,\n  QuerySearchByTermVariables,\n} from \"../../codegen/QuerySearchByTerm\";\nimport { HelmetOnlyTitle } from \"../../components/helmet.onlytitle\";\nimport { Restaurants } from \"../../components/restaurants\";\nimport { RESTAURANT_FRAGMENT } from \"../../fragments\";\nimport { useQueryParam } from \"../../hooks/useQueryParam\";\n\nconst GQL_SEARCH_BY_TERM = gql`\n  query QuerySearchByTerm($term: String!, $page: Int!) {\n    searchRestaurantByName(search: { query: $term, page: $page }) {\n      ok\n      error\n      totalPages\n      countTotalItems\n      restaurants {\n        ...RestaurantPart\n        category {\n          name\n          slug\n        }\n      }\n    }\n  }\n  ${RESTAURANT_FRAGMENT}\n`;\n\nexport const SearchPage: React.FC = () => {\n  const queryParam = useQueryParam();\n  const history = useHistory();\n  const [term, setTerm] = useState<string | null>(null);\n  const [queryReadyToStart, { loading, data }] = useLazyQuery<\n    QuerySearchByTerm,\n    QuerySearchByTermVariables\n  >(GQL_SEARCH_BY_TERM);\n\n  useEffect(() => {\n    const inputTerm = queryParam.get(\"term\");\n    if (!inputTerm) {\n      history.replace(\"/\");\n    } else {\n      queryReadyToStart({\n        variables: {\n          term: inputTerm,\n          page: 1,\n        },\n      });\n      setTerm(inputTerm);\n    }\n  }, [loading]);\n\n  return (\n    <div>\n      <HelmetOnlyTitle title={`Searching term: \"${term}\"`} />\n      <div className=\"w-full\">\n        {loading ? (\n          <h1>Loading...</h1>\n        ) : (\n          <Restaurants\n            restaurants={data?.searchRestaurantByName.restaurants}\n            categoryShow={true}\n            title={`Searching: \"${term}\" (Found: ${data?.searchRestaurantByName.countTotalItems})`}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/logint.tsx",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/restaurant/create.restaurant.tsx",["170","171"],"import { gql, useApolloClient, useMutation } from \"@apollo/client\";\nimport React, { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useHistory } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport {\n  MutationCreateRestaurant,\n  MutationCreateRestaurantVariables,\n} from \"../../codegen/MutationCreateRestaurant\";\nimport { FormButtonInactivable } from \"../../components/form-button-inactivable\";\nimport { HelmetOnlyTitle } from \"../../components/helmet.onlytitle\";\nimport { RESTAURANT_FRAGMENT } from \"../../fragments\";\nimport { GQL_MYRESTAURANTS } from \"./my.restaurants\";\n\nconst GQL_CREATE_RESTAURANT = gql`\n  mutation MutationCreateRestaurant($input: CreateRestaurantInput!) {\n    createRestaurant(input: $input) {\n      error\n      ok\n      restaurant {\n        ...RestaurantPart\n      }\n    }\n  }\n  ${RESTAURANT_FRAGMENT}\n`;\n\ninterface IForm {\n  name: string;\n  address: string;\n  category: string;\n  file: FileList;\n}\n\nexport const CreateRestaurant = () => {\n  const history = useHistory();\n  const client = useApolloClient();\n\n  const [createRestaurant, { loading, data }] = useMutation<\n    MutationCreateRestaurant,\n    MutationCreateRestaurantVariables\n  >(GQL_CREATE_RESTAURANT, {\n    onCompleted: (data: MutationCreateRestaurant) => {\n      const { ok, error, restaurant } = data.createRestaurant;\n\n      if (ok) {\n        // faking cache\n        const currentQuery = client.readQuery({ query: GQL_MYRESTAURANTS });\n        const fakeData = currentQuery\n          ? {\n              myRestaurants: {\n                ...currentQuery?.myRestaurants,\n                count: currentQuery?.myRestaurants.count + 1,\n                restaurants: [\n                  {\n                    ...restaurant,\n                    __typename: \"Restaurant\",\n                  },\n                  ...currentQuery?.myRestaurants.restaurants,\n                ],\n              },\n            }\n          : {\n              myRestaurants: {\n                __typename: \"MyRestaurantOutput\",\n                ok: true,\n                error: null,\n                count: 1,\n                restaurants: {\n                  ...restaurant,\n                  __typename: \"Restaurant\",\n                },\n              },\n            };\n\n        client.writeQuery({\n          query: GQL_MYRESTAURANTS,\n          data: fakeData,\n        });\n\n        toast.success(\"Your restaurant is successfully made.\");\n      } else {\n        toast.error(\n          `Something is wrong while creating restaurant(Error: ${error})`\n        );\n      }\n      history.push(\"/\");\n    },\n  });\n\n  const {\n    register,\n    handleSubmit,\n    getValues,\n    formState,\n    errors,\n  } = useForm<IForm>({\n    mode: \"onChange\",\n  });\n  const onSubmit = async () => {\n    try {\n      const { name, address, category: categoryName, file } = getValues();\n      const actualFile = file[0];\n      const formBody = new FormData();\n      formBody.append(\"file\", actualFile);\n      const { url: coverImage } = await (\n        await fetch(`http://lednas.synology.me:32789/upload/`, {\n          method: \"POST\",\n          body: formBody,\n        })\n      ).json();\n      createRestaurant({\n        variables: {\n          input: {\n            name,\n            address,\n            categoryName,\n            coverImage,\n          },\n        },\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <div className=\"layout__container\">\n      <HelmetOnlyTitle title=\"Creating restaurant\" />\n      <h1 className=\"text-2xl font-semibold my-8\">CreateRestaurant</h1>\n      <form\n        className=\"auth__form\"\n        onSubmit={handleSubmit(onSubmit)}\n        encType=\"multipart/form-data\"\n      >\n        <div className=\"auth__input_wrapper\">\n          <input\n            className=\"auth__form_input\"\n            type=\"text\"\n            placeholder=\"Name\"\n            name=\"name\"\n            ref={register({ required: \"Name is required\" })}\n          />\n        </div>\n        <div className=\"auth__input_wrapper\">\n          <input\n            className=\"auth__form_input\"\n            type=\"text\"\n            placeholder=\"Address\"\n            name=\"address\"\n            ref={register({ required: \"Address is required\" })}\n          />\n        </div>\n        <div className=\"auth__input_wrapper\">\n          <input\n            className=\"auth__form_input\"\n            type=\"text\"\n            placeholder=\"Category\"\n            name=\"category\"\n            ref={register({ required: \"Category is required\" })}\n          />\n        </div>\n        <div className=\"auth__input_wrapper\">\n          <input\n            className=\"auth__form_input\"\n            type=\"file\"\n            name=\"file\"\n            accept=\"image/*\"\n            ref={register({ required: true })}\n          />\n        </div>\n        <FormButtonInactivable\n          isActivate={formState.isValid && !formState.isSubmitting}\n          loading={loading}\n        >\n          Create Restaurant\n        </FormButtonInactivable>\n      </form>\n      {data?.createRestaurant.error && (\n        <p className=\"auth__form_error\">{data.createRestaurant.error}</p>\n      )}\n    </div>\n  );\n};\n","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/restaurant/my.restaurants.tsx",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/components/header.tsx",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/user/verification.page.tsx",["172"],"import { gql, useApolloClient, useMutation } from \"@apollo/client\";\nimport React, { useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\n\nimport {\n  MutationVerifyCode,\n  MutationVerifyCodeVariables,\n} from \"../../codegen/MutationVerifyCode\";\nimport { HelmetOnlyTitle } from \"../../components/helmet.onlytitle\";\nimport { useMe } from \"../../hooks/useMe\";\nimport { useQueryParam } from \"../../hooks/useQueryParam\";\n\nconst GQL_VERIFICATION = gql`\n  mutation MutationVerifyCode($code: String!) {\n    verifyCode(code: $code) {\n      ok\n      error\n    }\n  }\n`;\n\n/* Todo:\n    add sendVerification mutation on backend.\n*/\n\nexport const VerificationPage = () => {\n  const history = useHistory();\n  const onVerifyCompleted = (data: MutationVerifyCode) => {\n    const {\n      verifyCode: { ok },\n    } = data;\n\n    if (ok && userData?.me?.id) {\n      client.writeFragment({\n        id: `User:${userData?.me?.id}`,\n        fragment: gql`\n          fragment VerifiedUser on User {\n            verified\n          }\n        `,\n        data: {\n          verified: true,\n        },\n      });\n      toast.success(\"Success to comfirm your verification.\");\n      setTimeout(() => history.push(\"/\"), 2000);\n    } else {\n      toast.error(\"Verification of your email address is not valid.\");\n    }\n  };\n  const [verifyCode, { loading, data, error }] = useMutation<\n    MutationVerifyCode,\n    MutationVerifyCodeVariables\n  >(GQL_VERIFICATION, { onCompleted: onVerifyCompleted });\n\n  const queryParam = useQueryParam();\n  const client = useApolloClient();\n  const { data: userData } = useMe();\n\n  useEffect(() => {\n    const code = queryParam.get(\"code\");\n\n    if (code) {\n      verifyCode({\n        variables: {\n          code,\n        },\n      });\n    }\n  }, []);\n\n  return (\n    <div className=\"mt-52 flex flex-col items-center justify-center\">\n      <HelmetOnlyTitle title=\"Verifying your email address\" />\n      {loading ? (\n        <h1 className=\"text-lg mb-2 font-medium\">\n          Confirming your verification.. Please wait..\n        </h1>\n      ) : !error && data?.verifyCode.ok ? (\n        <h1 className=\"text-lg mb-2 font-medium\">\n          Your verification is confirmed. Please log in.\n        </h1>\n      ) : (\n        <div>\n          <h1 className=\"text-lg mb-2 font-medium\">\n            Couldn't confirm your email verification.\n          </h1>\n          <p>Message: {data?.verifyCode.error} </p>\n        </div>\n      )}\n    </div>\n  );\n};\n","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/user/password.page.tsx",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/user/me.page.tsx",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/restaurant/update.dish.tsx",["173","174","175","176","177"],"import { gql, useApolloClient, useMutation, useQuery } from \"@apollo/client\";\nimport React, { useState } from \"react\";\nimport { useFieldArray, useForm } from \"react-hook-form\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport { DishChoiceType, DishOptionType } from \"../../codegen/globalTypes\";\nimport {\n  MutationUpdateDish,\n  MutationUpdateDishVariables,\n} from \"../../codegen/MutationUpdateDish\";\nimport { QueryDish } from \"../../codegen/QueryDish\";\n\nimport { FormButtonInactivable } from \"../../components/form-button-inactivable\";\nimport { HelmetOnlyTitle } from \"../../components/helmet.onlytitle\";\nimport { DISH_FRAGMENT } from \"../../fragments\";\n\nimport { GQL_MYRESTAURANT } from \"./my.restaurant\";\n\nconst GQL_UPDATE_DISH = gql`\n  mutation MutationUpdateDish(\n    $name: String\n    $price: Float\n    $description: String\n    $options: [DishOptionType!]\n    $dishId: Int!\n  ) {\n    updateDish(\n      name: $name\n      price: $price\n      description: $description\n      options: $options\n      dishId: $dishId\n    ) {\n      ok\n      error\n    }\n  }\n  ${DISH_FRAGMENT}\n`;\n\nconst GQL_DISH = gql`\n  query QueryDish($id: Int!) {\n    getDish(dishId: $id) {\n      ok\n      error\n      dish {\n        ...DishPart\n      }\n    }\n  }\n  ${DISH_FRAGMENT}\n`;\n\ninterface IChoice {\n  name: string;\n  extra: number;\n}\n\ninterface IOptions {\n  name: string;\n  extra: number;\n  choices?: IChoice[] | null;\n}\ninterface IUpdateDishForm {\n  name: string;\n  price: number;\n  description: string;\n  options: IOptions[];\n}\n\ninterface IParams {\n  restaurantId: string;\n  dishId: string;\n}\n\nexport const UpdateDish: React.FC = () => {\n  const history = useHistory();\n  const { restaurantId, dishId } = useParams<IParams>();\n\n  const { data: dishData } = useQuery<QueryDish>(GQL_DISH, {\n    variables: {\n      id: +dishId,\n    },\n  });\n\n  const [updateDish, { loading, data }] = useMutation<\n    MutationUpdateDish,\n    MutationUpdateDishVariables\n  >(GQL_UPDATE_DISH, {\n    onCompleted: (data: MutationUpdateDish) => {\n      if (data.updateDish.ok) {\n        toast.success(\"Dish successfully made.\");\n        history.goBack();\n      } else {\n        toast.error(\n          `While creating menu, an error occured. Message: ${data.updateDish.error}`\n        );\n      }\n    },\n  });\n  const {\n    register,\n    formState,\n    handleSubmit,\n    getValues,\n    setValue,\n    control,\n    errors,\n  } = useForm<IUpdateDishForm>({\n    mode: \"onChange\",\n  });\n  const {\n    fields: optionFields,\n    append: appendOption,\n    remove: removeOption,\n  } = useFieldArray({\n    control,\n    name: \"options\",\n  });\n\n  if (dishData) {\n    console.log(dishData);\n    setValue(\"name\", dishData?.getDish?.dish?.name);\n    setValue(\"price\", dishData?.getDish?.dish?.price);\n    setValue(\"description\", dishData?.getDish?.dish?.description);\n  }\n\n  const onSubmit = async () => {\n    try {\n      const { name, price, description, options } = getValues();\n      const dishOptions: DishOptionType[] = [];\n\n      options?.forEach((option) => {\n        const dishChoices: DishChoiceType[] | null = option?.choices\n          ? []\n          : null;\n\n        if (dishChoices) {\n          option?.choices?.forEach((choice) => {\n            dishChoices.push({\n              name: choice.name,\n              extra: +choice.extra,\n            });\n          });\n        }\n\n        dishOptions.push({\n          name: option.name,\n          extra: +option.extra,\n        });\n      });\n\n      await updateDish({\n        variables: {\n          name,\n          description,\n          price: +price,\n          dishId: +dishId,\n          options: dishOptions,\n        },\n      });\n      history.goBack();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const onAddClicked = () => {\n    appendOption({\n      value: \"\",\n    });\n  };\n  const onDeleteClicked = (index) => {\n    // @ts-ignore\n    removeOption(index);\n  };\n\n  return (\n    <div className=\"layout__container\">\n      <HelmetOnlyTitle title=\"Creating dish\" />\n      <h1 className=\"text-2xl font-semibold my-8\">Create Dish</h1>\n      <form\n        className=\"auth__form\"\n        onSubmit={handleSubmit(onSubmit)}\n        encType=\"multipart/form-data\"\n      >\n        <p className=\"text-xl italic text-black mb-2\">\n          Write dish information here.\n        </p>\n        <div className=\"auth__input_wrapper\">\n          <input\n            className=\"auth__form_input\"\n            type=\"text\"\n            placeholder=\"Name\"\n            name=\"name\"\n            ref={register({ required: \"Name is required\" })}\n          />\n        </div>\n        <div className=\"auth__input_wrapper\">\n          <input\n            className=\"auth__form_input\"\n            type=\"number\"\n            placeholder=\"Price\"\n            name=\"price\"\n            ref={register({\n              required: \"Price is required\",\n              min: { value: 0, message: \"Price must be over 0\" },\n            })}\n          />\n        </div>\n        <div className=\"auth__input_wrapper\">\n          <input\n            className={`auth__form_input ${\n              errors.description && \"border-red-500\"\n            }`}\n            type=\"text\"\n            placeholder=\"Description\"\n            name=\"description\"\n            ref={register({\n              required: \"Category is required\",\n              minLength: 5,\n            })}\n          />\n          {errors.description && (\n            <span className=\"auth__form_error\">\n              {errors.description.message}\n            </span>\n          )}\n        </div>\n\n        <div className=\"border-t border-gray-600 mt-2 pt-2\">\n          <p className=\"text-xl italic\">Dish options</p>\n          <span\n            onClick={() => onAddClicked()}\n            className=\"auth__form_button inline-block mb-2 cursor-pointer\"\n          >\n            Add Option\n          </span>\n          <div className=\"mb-2\">\n            {optionFields.length === 0 ? (\n              <div>\n                <p className=\"text-sm font-thin text-black\">\n                  No options now. Click above button if you need one.\n                </p>\n              </div>\n            ) : (\n              <div>\n                {optionFields.map((field, index) => (\n                  <div\n                    key={field.id}\n                    className=\"border border-gray-500 p-5 mb-2\"\n                  >\n                    <span className=\"inline-block mb-2 mr-4\">\n                      {`#${index + 1} Option`}\n                    </span>\n                    <span\n                      className=\"cursor-pointer text-xs py-1 px-2 bg-red-300 text-red-600 rounded-md hover:bg-red-600 hover:text-red-300 transition duration-200\"\n                      onClick={() => onDeleteClicked(index)}\n                    >\n                      Delete me\n                    </span>\n                    <div className=\"flex justify-around\">\n                      <div className=\"auth__input_wrapper w-full mr-3\">\n                        <input\n                          className=\"auth__form_input\"\n                          type=\"text\"\n                          name={`options[${index}].name`}\n                          placeholder=\"Name\"\n                          ref={register({ required: true })}\n                        />\n                      </div>\n                      <div className=\"auth__input_wrapper w-full\">\n                        <input\n                          className=\"auth__form_input\"\n                          type=\"number\"\n                          name={`options[${index}].extra`}\n                          placeholder=\"Extra\"\n                          ref={register({ required: true, min: 0 })}\n                        />\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n        <FormButtonInactivable\n          isActivate={formState.isValid && !formState.isSubmitting}\n          loading={loading}\n        >\n          Update Dish\n        </FormButtonInactivable>\n      </form>\n    </div>\n  );\n};\n","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/restaurant/update.restaurant.tsx",["178","179","180","181","182"],"import { gql, useApolloClient, useMutation, useQuery } from \"@apollo/client\";\nimport { reset } from \"cypress/types/sinon\";\nimport React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\n\nimport {\n  MutationUpdateRestaurant,\n  MutationUpdateRestaurantVariables,\n} from \"../../codegen/MutationUpdateRestaurant\";\nimport {\n  QueryMyRestaurant,\n  QueryMyRestaurantVariables,\n} from \"../../codegen/QueryMyRestaurant\";\nimport { QueryRestaurant } from \"../../codegen/QueryRestaurant\";\nimport { FormButtonInactivable } from \"../../components/form-button-inactivable\";\nimport { HelmetOnlyTitle } from \"../../components/helmet.onlytitle\";\nimport { RESTAURANT_FRAGMENT } from \"../../fragments\";\nimport { GQL_MYRESTAURANT } from \"./my.restaurant\";\n\nconst GQL_UPDATE_RESTAURANT = gql`\n  mutation MutationUpdateRestaurant($input: UpdateRestaurantInput!) {\n    updateRestaurant(input: $input) {\n      error\n      ok\n    }\n  }\n`;\n\ninterface IForm {\n  name: string;\n  address: string;\n  category: string;\n}\n\ninterface IParams {\n  id: string;\n}\n\nexport const UpdateRestaurant = () => {\n  const history = useHistory();\n  const { id } = useParams<IParams>();\n  const { data } = useQuery<QueryMyRestaurant, QueryMyRestaurantVariables>(\n    GQL_MYRESTAURANT,\n    {\n      variables: {\n        id: +id,\n      },\n    }\n  );\n  const {\n    register,\n    handleSubmit,\n    getValues,\n    setValue,\n    formState,\n    errors,\n  } = useForm<IForm>({\n    mode: \"onChange\",\n  });\n\n  if (data) {\n    setValue(\"name\", data?.restaurant?.restaurant?.name);\n    setValue(\"address\", data?.restaurant?.restaurant?.address);\n    setValue(\"category\", data?.restaurant?.restaurant?.category?.name);\n  }\n\n  const [updateRestaurant, { loading }] = useMutation<\n    MutationUpdateRestaurant,\n    MutationUpdateRestaurantVariables\n  >(GQL_UPDATE_RESTAURANT, {\n    onCompleted: (data: MutationUpdateRestaurant) => {\n      const { ok, error } = data.updateRestaurant;\n      if (ok) {\n        toast.success(\"Your restaurant is successfully made.\");\n      } else {\n        toast.error(\n          `Something is wrong while creating restaurant(Error: ${error})`\n        );\n      }\n      history.push(\"/\");\n    },\n    refetchQueries: [\n      {\n        query: GQL_MYRESTAURANT,\n        variables: {\n          id: +id,\n        },\n      },\n    ],\n  });\n\n  const onSubmit = async () => {\n    try {\n      const { name, address, category: categoryName } = getValues();\n\n      updateRestaurant({\n        variables: {\n          input: {\n            id: +id,\n            name,\n            address,\n            categoryName,\n          },\n        },\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <div className=\"layout__container\">\n      <HelmetOnlyTitle title=\"Creating restaurant\" />\n      <h1 className=\"text-2xl font-semibold my-8\">CreateRestaurant</h1>\n      <form\n        className=\"auth__form\"\n        onSubmit={handleSubmit(onSubmit)}\n        encType=\"multipart/form-data\"\n      >\n        <div className=\"auth__input_wrapper\">\n          <input\n            className=\"auth__form_input\"\n            type=\"text\"\n            placeholder=\"Name\"\n            name=\"name\"\n            ref={register({ required: \"Name is required\" })}\n          />\n        </div>\n        <div className=\"auth__input_wrapper\">\n          <input\n            className=\"auth__form_input\"\n            type=\"text\"\n            placeholder=\"Address\"\n            name=\"address\"\n            ref={register({ required: \"Address is required\" })}\n          />\n        </div>\n        <div className=\"auth__input_wrapper\">\n          <input\n            className=\"auth__form_input\"\n            type=\"text\"\n            placeholder=\"Category\"\n            name=\"category\"\n            ref={register({ required: \"Category is required\" })}\n          />\n        </div>\n\n        <FormButtonInactivable isActivate={formState.isValid} loading={loading}>\n          Update Restaurant\n        </FormButtonInactivable>\n      </form>\n    </div>\n  );\n};\n","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/restaurant/create.dish.tsx",["183"],"import { gql, useApolloClient, useMutation } from \"@apollo/client\";\nimport { faTrashAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { useState } from \"react\";\nimport { useFieldArray, useForm } from \"react-hook-form\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport { DishChoiceType, DishOptionType } from \"../../codegen/globalTypes\";\nimport {\n  MutationCreateDish,\n  MutationCreateDishVariables,\n} from \"../../codegen/MutationCreateDish\";\nimport {\n  QueryMyRestaurant,\n  QueryMyRestaurant_restaurant_restaurant_dishes,\n} from \"../../codegen/QueryMyRestaurant\";\nimport { FormButtonInactivable } from \"../../components/form-button-inactivable\";\nimport { HelmetOnlyTitle } from \"../../components/helmet.onlytitle\";\nimport { DISH_FRAGMENT } from \"../../fragments\";\nimport { GQL_MYRESTAURANT } from \"./my.restaurant\";\n\nconst GQL_CREATE_DISH = gql`\n  mutation MutationCreateDish($input: CreateDishInput!) {\n    createDish(input: $input) {\n      ok\n      error\n      dish {\n        ...DishPart\n      }\n    }\n  }\n  ${DISH_FRAGMENT}\n`;\n\ninterface IChoice {\n  name: string;\n  extra: number;\n}\n\ninterface IOptions {\n  name: string;\n  extra: number;\n  choice?: IChoice[] | null;\n}\ninterface ICreateDishForm {\n  name: string;\n  price: number;\n  description: string;\n  file: FileList;\n  options: IOptions[];\n}\n\ninterface IParams {\n  id: string;\n}\n\ninterface IChoiceInfo {\n  index: string;\n  isExist: boolean;\n  choice: IChoice;\n}\n\ninterface IChoiceInput {\n  optionIndex: number;\n  choicesInfo?: IChoiceInfo[] | null;\n}\n\nexport const CreateDish: React.FC = () => {\n  const client = useApolloClient();\n  const history = useHistory();\n  const [optionChoices, setOptionChoices] = useState<IChoiceInput[]>([]);\n\n  const [createDish, { loading, data, error }] = useMutation<\n    MutationCreateDish,\n    MutationCreateDishVariables\n  >(GQL_CREATE_DISH, {\n    onCompleted: (data: MutationCreateDish) => {\n      if (data.createDish.ok) {\n        const currentRestaurant = client.readQuery<QueryMyRestaurant>({\n          query: GQL_MYRESTAURANT,\n          variables: {\n            id: +restaurantId,\n          },\n        });\n        let dishes: QueryMyRestaurant_restaurant_restaurant_dishes[] = [];\n        if (currentRestaurant?.restaurant.restaurant?.dishes)\n          dishes = currentRestaurant?.restaurant.restaurant?.dishes;\n        client.writeQuery({\n          query: GQL_MYRESTAURANT,\n          data: {\n            restaurant: {\n              ...currentRestaurant?.restaurant,\n              restaurant: {\n                ...currentRestaurant?.restaurant.restaurant,\n                dishes: [data.createDish.dish, ...dishes],\n              },\n            },\n          },\n          variables: {\n            id: +restaurantId,\n          },\n        });\n        toast.success(\"Dish successfully made.\");\n        history.goBack();\n      } else {\n        toast.error(\n          `While creating menu, an error occured. Message: ${data.createDish.error}`\n        );\n      }\n    },\n  });\n  const {\n    register,\n    formState,\n    handleSubmit,\n    getValues,\n    control,\n    errors,\n  } = useForm<ICreateDishForm>({\n    mode: \"onChange\",\n  });\n  const {\n    fields: optionFields,\n    append: appendOption,\n    remove: removeOption,\n  } = useFieldArray({\n    control,\n    name: \"options\",\n  });\n\n  const { id: restaurantId } = useParams<IParams>();\n  const onSubmit = async () => {\n    try {\n      const { name, price, description, file, options } = getValues();\n      const dishOptions: DishOptionType[] = [];\n      const actualFile = file[0];\n      const formBody = new FormData();\n      formBody.append(\"file\", actualFile);\n      console.log(\"option\", options);\n      options?.forEach((option) => {\n        const dishChoices: DishChoiceType[] | null = option?.choice ? [] : null;\n\n        option?.choice?.forEach((choice) => {\n          dishChoices?.push({\n            name: choice.name,\n            extra: +choice.extra,\n          });\n        });\n\n        dishOptions.push({\n          name: option.name,\n          extra: +option.extra,\n          choices: dishChoices,\n        });\n      });\n      const { url: photo } = await (\n        await fetch(`http://lednas.synology.me:32789/upload/`, {\n          method: \"POST\",\n          body: formBody,\n        })\n      ).json();\n      console.log(\"dishoption\", dishOptions);\n      await createDish({\n        variables: {\n          input: {\n            name,\n            description,\n            price: +price,\n            photo,\n            restaurantId: +restaurantId,\n            options: dishOptions,\n          },\n        },\n      });\n\n      history.goBack();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const onAddClicked = () => {\n    appendOption({\n      value: \"\",\n    });\n  };\n  const onDeleteClicked = (index) => {\n    // @ts-ignore\n    removeOption(index);\n  };\n  const makeChoiceString = (index, choiceIndex) =>\n    `${index}-${choiceIndex} choice`;\n  const onAddChoiceClicked = (index) => {\n    const arrayIndex = optionChoices.findIndex(\n      (choice) => choice.optionIndex === index\n    );\n\n    if (arrayIndex !== -1) {\n      optionChoices[arrayIndex]?.choicesInfo?.push({\n        index: makeChoiceString(\n          index,\n          optionChoices[arrayIndex]?.choicesInfo?.length\n        ),\n        isExist: true,\n        choice: { name: \"\", extra: 0 },\n      });\n      console.log(optionChoices);\n      setOptionChoices([...optionChoices]);\n    } else {\n      setOptionChoices((current) => [\n        ...current,\n        {\n          optionIndex: index,\n          choicesInfo: [\n            {\n              index: makeChoiceString(index, 0),\n              isExist: true,\n              choice: { name: \"\", extra: 0 },\n            },\n          ],\n        },\n      ]);\n    }\n  };\n\n  const onRemoveChoiceClicked = (index, choiceIndex) => {\n    const arrayIndex = optionChoices.findIndex(\n      (choice) => choice.optionIndex === index\n    );\n\n    if (arrayIndex !== -1) {\n      optionChoices[arrayIndex].choicesInfo = optionChoices[\n        arrayIndex\n      ]?.choicesInfo?.filter((choice) => {\n        return choice.index !== makeChoiceString(index, choiceIndex);\n      });\n      //optionChoices[arrayIndex].choicesInfo?.forEach(choiceIndex);\n      setOptionChoices([...optionChoices]);\n    }\n  };\n\n  return (\n    <div className=\"layout__container\">\n      <HelmetOnlyTitle title=\"Creating dish\" />\n      <h1 className=\"text-2xl font-semibold my-8\">Create Dish</h1>\n      <form\n        className=\"auth__form\"\n        onSubmit={handleSubmit(onSubmit)}\n        encType=\"multipart/form-data\"\n      >\n        <p className=\"text-xl italic text-black mb-2\">\n          Write dish information here.\n        </p>\n        <div className=\"auth__input_wrapper\">\n          <input\n            className=\"auth__form_input\"\n            type=\"text\"\n            placeholder=\"Name\"\n            name=\"name\"\n            ref={register({ required: \"Name is required\" })}\n          />\n        </div>\n        <div className=\"auth__input_wrapper\">\n          <input\n            className=\"auth__form_input\"\n            type=\"number\"\n            placeholder=\"Price\"\n            name=\"price\"\n            ref={register({\n              required: \"Price is required\",\n              min: { value: 0, message: \"Price must be over 0\" },\n            })}\n          />\n        </div>\n        <div className=\"auth__input_wrapper\">\n          <input\n            className={`auth__form_input ${\n              errors.description && \"border-red-500\"\n            }`}\n            type=\"text\"\n            placeholder=\"Description\"\n            name=\"description\"\n            ref={register({\n              required: \"Category is required\",\n              minLength: 5,\n            })}\n          />\n          {errors.description && (\n            <span className=\"auth__form_error\">\n              {errors.description.message}\n            </span>\n          )}\n        </div>\n        <div className=\"auth__input_wrapper\">\n          <label htmlFor=\"file\" className=\"text-md italic self-start mb-1\">\n            Dish image\n          </label>\n          <input\n            className=\"auth__form_input\"\n            id=\"file\"\n            type=\"file\"\n            name=\"file\"\n            accept=\"image/*\"\n            ref={register({ required: true })}\n          />\n        </div>\n        <div className=\"border-t border-gray-600 mt-2 pt-2\">\n          <p className=\"text-xl italic\">Dish options</p>\n          <span\n            onClick={() => onAddClicked()}\n            className=\"auth__form_button inline-block mb-2 cursor-pointer\"\n          >\n            Add Option\n          </span>\n          <div className=\"mb-2\">\n            {optionFields.length === 0 ? (\n              <div>\n                <p className=\"text-sm font-thin text-black\">\n                  No options now. Click above button if you need one.\n                </p>\n              </div>\n            ) : (\n              <div>\n                {optionFields.map((field, index) => (\n                  <div\n                    key={field.id}\n                    className=\"border border-gray-500 p-5 mb-2\"\n                  >\n                    <span className=\"inline-block mb-2 mr-4\">\n                      {`#${index + 1} Option`}\n                    </span>\n                    <span\n                      className=\"cursor-pointer text-xs py-1 px-2 bg-lime-300 text-lime-600 rounded-md hover:bg-lime-600 hover:text-lime-300 transition duration-200 mr-4\"\n                      onClick={() => onAddChoiceClicked(index)}\n                    >\n                      Add choice\n                    </span>\n                    <span\n                      className=\"cursor-pointer text-xs py-1 px-2 bg-red-300 text-red-600 rounded-md hover:bg-red-600 hover:text-red-300 transition duration-200\"\n                      onClick={() => onDeleteClicked(index)}\n                    >\n                      Delete me\n                    </span>\n                    <div className=\"flex justify-around\">\n                      <div className=\"auth__input_wrapper w-full mr-3\">\n                        <input\n                          className=\"auth__form_input\"\n                          type=\"text\"\n                          name={`options[${index}].name`}\n                          placeholder=\"Name\"\n                          ref={register({ required: true })}\n                        />\n                      </div>\n                      <div className=\"auth__input_wrapper w-full\">\n                        <input\n                          className=\"auth__form_input\"\n                          type=\"number\"\n                          name={`options[${index}].extra`}\n                          placeholder=\"Extra\"\n                          ref={register({ required: true, min: 0 })}\n                        />\n                      </div>\n                    </div>\n                    <div className=\"flex flex-col justify-center items-start w-2/3 ml-20\">\n                      {optionChoices.map((o) => {\n                        if (o.optionIndex !== index) {\n                          return <></>;\n                        } else {\n                          return o.choicesInfo?.map(\n                            (choice, choiceIndex) =>\n                              choice.isExist && (\n                                <div\n                                  key={`${makeChoiceString(\n                                    o.optionIndex,\n                                    choiceIndex\n                                  )}`}\n                                  className=\"flex justify-around items-center mt-2\"\n                                >\n                                  <div className=\"w-1/6\">\n                                    <span>Choice #{choiceIndex + 1}</span>\n                                  </div>\n                                  <div className=\"w-2/6 mr-3\">\n                                    <input\n                                      className=\"auth__form_input\"\n                                      type=\"text\"\n                                      name={`options[${index}].choice[${choiceIndex}].name`}\n                                      placeholder=\"Name\"\n                                      defaultValue=\"\"\n                                      ref={register({ required: true })}\n                                    />\n                                  </div>\n                                  <div className=\" w-2/6\">\n                                    <input\n                                      className=\"auth__form_input\"\n                                      type=\"number\"\n                                      name={`options[${index}].choice[${choiceIndex}].extra`}\n                                      placeholder=\"Extra\"\n                                      defaultValue=\"\"\n                                      ref={register({ required: true, min: 0 })}\n                                    />\n                                  </div>\n                                  <div\n                                    onClick={() =>\n                                      onRemoveChoiceClicked(index, choiceIndex)\n                                    }\n                                    className=\"cursor-pointer text-xs px-2 py-1 text-center bg-red-300 text-red-600 rounded-md hover:bg-red-600 hover:text-red-300 transition duration-200 ml-3\"\n                                  >\n                                    <FontAwesomeIcon icon={faTrashAlt} />\n                                  </div>\n                                </div>\n                              )\n                          );\n                        }\n                      })}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n        <FormButtonInactivable\n          isActivate={formState.isValid && !formState.isSubmitting}\n          loading={loading}\n        >\n          Create Dish\n        </FormButtonInactivable>\n      </form>\n      {data?.createDish.error && (\n        <p className=\"auth__form_error\">{data.createDish.error}</p>\n      )}\n    </div>\n  );\n};\n","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/restaurant/my.restaurant.tsx",["184","185","186"],"import { gql, useQuery } from \"@apollo/client\";\nimport {\n  faEdit,\n  faHome,\n  faRecycle,\n  faRemoveFormat,\n  faTrash,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { useEffect } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport {\n  QueryMyRestaurant,\n  QueryMyRestaurantVariables,\n} from \"../../codegen/QueryMyRestaurant\";\nimport { DishItem } from \"../../components/dish.item\";\n\nimport {\n  DISH_FRAGMENT,\n  ORDER_FRAGMENT,\n  RESTAURANT_FRAGMENT,\n} from \"../../fragments\";\nimport {\n  VictoryChart,\n  VictoryAxis,\n  VictoryVoronoiContainer,\n  VictoryLine,\n  VictoryTheme,\n  VictoryTooltip,\n} from \"victory\";\n\ninterface IParam {\n  id: string;\n}\n\nexport const GQL_MYRESTAURANT = gql`\n  query QueryMyRestaurant($id: Float!) {\n    restaurant(id: $id) {\n      ok\n      error\n      restaurant {\n        ...RestaurantPart\n        dishes {\n          ...DishPart\n        }\n        orders {\n          ...OrderPart\n        }\n      }\n    }\n  }\n  ${RESTAURANT_FRAGMENT}\n  ${DISH_FRAGMENT}\n  ${ORDER_FRAGMENT}\n`;\n\ninterface IChartData {\n  x: string;\n  y: number;\n}\n\nexport const MyRestaurant = () => {\n  const { id } = useParams<IParam>();\n  let chartData: IChartData[] = [];\n  const { data, loading, error } = useQuery<\n    QueryMyRestaurant,\n    QueryMyRestaurantVariables\n  >(GQL_MYRESTAURANT, {\n    variables: {\n      id: +id,\n    },\n  });\n\n  if (data && !loading) {\n    data.restaurant?.restaurant?.orders?.forEach((order) => {\n      const date = new Date(order.createAt).toLocaleDateString(\"ko\");\n      const dateIndex = chartData.findIndex((data) => data.x === date);\n      if (dateIndex !== -1) {\n        chartData[dateIndex].y += order.totalCost ? order.totalCost : 0;\n      } else {\n        chartData.push({ x: date, y: order.totalCost ? order.totalCost : 0 });\n      }\n    });\n  }\n\n  return (\n    <div className=\"w-full flex flex-col items-center\">\n      {loading ? (\n        <div className=\"w-screen h-screen flex justify-content items-center\">\n          <h1>Loading...</h1>\n        </div>\n      ) : error || !data?.restaurant.ok ? (\n        <div className=\"w-screen h-screen flex justify-content items-center\">\n          <h1>Data fetching error</h1>\n        </div>\n      ) : (\n        <div className=\"w-full flex flex-col items-center\">\n          <div\n            className=\"w-full h-60 bg-cover bg-center flex items-center\"\n            style={{\n              backgroundImage: `url(${data?.restaurant.restaurant?.coverImage})`,\n            }}\n          >\n            <div className=\"w-1/3 bg-white py-4 opacity-95\">\n              <h1 className=\"text-2xl pl-20 flex mb-3 \">\n                {data?.restaurant.restaurant?.name}\n              </h1>\n\n              <h4 className=\"text-sm font-light pl-20 flex mb-2 underline\">\n                {data?.restaurant.restaurant?.category?.name}\n              </h4>\n\n              <h4 className=\"text-sm font-light pl-20 flex items-center\">\n                <FontAwesomeIcon className=\"mr-2\" icon={faHome} />\n                {data?.restaurant.restaurant?.address}\n              </h4>\n            </div>\n          </div>\n\n          <div className=\"mt-5 flex justify-start layout__container\">\n            <Link\n              to={`/my-restaurant/${id}/create-dish`}\n              className=\"mr-8 text-white bg-gray-800 py-3 px-10 rounded-md\"\n            >\n              Add Dish &rarr;\n            </Link>\n            <Link\n              to=\"\"\n              className=\"text-white bg-lime-700 py-3 px-10 rounded-md\"\n            >\n              Buy Promotion &rarr;\n            </Link>\n          </div>\n          <div className=\"mt-4 layout__container\">\n            {data?.restaurant?.restaurant?.dishes?.length === 0 ? (\n              <div>No Dishes, please create your menus.</div>\n            ) : (\n              <div className=\"layout__container grid lg:grid-cols-3 md:grid-cols-2  sm:grid-cols-1 gap-4 mt-10\">\n                {data?.restaurant?.restaurant?.dishes?.map((dish) => (\n                  <div key={dish.id} className=\"flex flex-col\">\n                    <DishItem\n                      name={dish.name}\n                      description={dish.description}\n                      photo={dish.photo}\n                      price={dish.price}\n                    />\n                    <div className=\"flex justify-around text-center mt-2\">\n                      <Link\n                        className=\"w-1/3 bg-lime-200 text-lime-600 rounded-md px-3 py-1 hover:text-lime-200 hover:bg-lime-600 transition duration-200\"\n                        to={`/my-restaurant/${id}/${dish.id}/update`}\n                      >\n                        <FontAwesomeIcon icon={faEdit} /> Edit\n                      </Link>\n                      <Link\n                        className=\"w-1/3 bg-red-200 text-red-600 rounded-md px-3 py-1 hover:text-red-200 hover:bg-red-600 transition duration-200\"\n                        to=\"\"\n                      >\n                        <FontAwesomeIcon icon={faTrash} className=\"mr-1\" />\n                        Remove\n                      </Link>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n          <div className=\"mt-20 mb-20\">\n            <h4 className=\"text-center text-2xl font-medium\">Sales</h4>\n            <div className=\"w-full\">\n              <VictoryChart\n                domainPadding={20}\n                width={window.innerWidth}\n                height={500}\n                theme={VictoryTheme.material}\n                containerComponent={<VictoryVoronoiContainer />}\n              >\n                <VictoryLine\n                  data={chartData}\n                  style={{ data: { strokeWidth: 5 } }}\n                  labels={({ datum }) => `$${datum.y}`}\n                  labelComponent={\n                    <VictoryTooltip\n                      style={{ fontSize: 10 }}\n                      renderInPortal\n                      dy={-20}\n                    />\n                  }\n                  interpolation=\"natural\"\n                />\n\n                <VictoryAxis\n                  style={{\n                    tickLabels: {\n                      fontSize: 10,\n                    },\n                  }}\n                />\n              </VictoryChart>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/client/restaurant.tsx",["187","188","189"],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/codegen/globalTypes.ts",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/user/logout.tsx",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/utils.ts",["190","191"],"export const EMAIL_REGEX = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n","/Users/pleed0215/Documents/mystudy/nuber_eats/src/hooks/useQueryParam.ts",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/components/helmet.onlytitle.tsx",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/fragments.ts",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/components/form-button-inactivable.tsx",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/components/uberlogo.tsx",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/components/restaurant.item.tsx",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/components/dish.item.tsx",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/components/restaurants.tsx",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/components/categories.tsx",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/components/category.tsx",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/components/cart.icon.tsx",[],{"ruleId":"192","replacedBy":"193"},{"ruleId":"194","replacedBy":"195"},{"ruleId":"196","severity":1,"message":"197","line":54,"column":6,"nodeType":"198","endLine":54,"endColumn":15,"suggestions":"199"},{"ruleId":"200","severity":1,"message":"201","line":2,"column":17,"nodeType":"202","messageId":"203","endLine":2,"endColumn":25},{"ruleId":"200","severity":1,"message":"204","line":96,"column":5,"nodeType":"202","messageId":"203","endLine":96,"endColumn":11},{"ruleId":"196","severity":1,"message":"205","line":71,"column":6,"nodeType":"198","endLine":71,"endColumn":8,"suggestions":"206"},{"ruleId":"200","severity":1,"message":"207","line":1,"column":15,"nodeType":"202","messageId":"203","endLine":1,"endColumn":30},{"ruleId":"200","severity":1,"message":"201","line":2,"column":17,"nodeType":"202","messageId":"203","endLine":2,"endColumn":25},{"ruleId":"200","severity":1,"message":"208","line":17,"column":10,"nodeType":"202","messageId":"203","endLine":17,"endColumn":26},{"ruleId":"200","severity":1,"message":"209","line":78,"column":11,"nodeType":"202","messageId":"203","endLine":78,"endColumn":23},{"ruleId":"200","severity":1,"message":"210","line":86,"column":33,"nodeType":"202","messageId":"203","endLine":86,"endColumn":37},{"ruleId":"200","severity":1,"message":"207","line":1,"column":15,"nodeType":"202","messageId":"203","endLine":1,"endColumn":30},{"ruleId":"200","severity":1,"message":"211","line":2,"column":10,"nodeType":"202","messageId":"203","endLine":2,"endColumn":15},{"ruleId":"200","severity":1,"message":"212","line":16,"column":10,"nodeType":"202","messageId":"203","endLine":16,"endColumn":25},{"ruleId":"200","severity":1,"message":"213","line":19,"column":10,"nodeType":"202","messageId":"203","endLine":19,"endColumn":29},{"ruleId":"200","severity":1,"message":"204","line":58,"column":5,"nodeType":"202","messageId":"203","endLine":58,"endColumn":11},{"ruleId":"200","severity":1,"message":"214","line":73,"column":39,"nodeType":"202","messageId":"203","endLine":73,"endColumn":44},{"ruleId":"200","severity":1,"message":"215","line":5,"column":3,"nodeType":"202","messageId":"203","endLine":5,"endColumn":12},{"ruleId":"200","severity":1,"message":"216","line":6,"column":3,"nodeType":"202","messageId":"203","endLine":6,"endColumn":17},{"ruleId":"200","severity":1,"message":"217","line":10,"column":17,"nodeType":"202","messageId":"203","endLine":10,"endColumn":26},{"ruleId":"200","severity":1,"message":"218","line":6,"column":3,"nodeType":"202","messageId":"203","endLine":6,"endColumn":15},{"ruleId":"200","severity":1,"message":"217","line":11,"column":17,"nodeType":"202","messageId":"203","endLine":11,"endColumn":26},{"ruleId":"200","severity":1,"message":"219","line":91,"column":34,"nodeType":"202","messageId":"203","endLine":91,"endColumn":52},{"ruleId":"220","severity":1,"message":"221","line":1,"column":38,"nodeType":"222","messageId":"223","endLine":1,"endColumn":39,"suggestions":"224"},{"ruleId":"220","severity":1,"message":"221","line":1,"column":63,"nodeType":"222","messageId":"223","endLine":1,"endColumn":64,"suggestions":"225"},"no-native-reassign",["226"],"no-negated-in-lhs",["227"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history', 'queryParam', and 'queryReadyToStart'. Either include them or remove the dependency array.","ArrayExpression",["228"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'errors' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'queryParam' and 'verifyCode'. Either include them or remove the dependency array.",["229"],"'useApolloClient' is defined but never used.","'GQL_MYRESTAURANT' is defined but never used.","'restaurantId' is assigned a value but never used.","'data' is assigned a value but never used.","'reset' is defined but never used.","'QueryRestaurant' is defined but never used.","'RESTAURANT_FRAGMENT' is defined but never used.","'error' is assigned a value but never used.","'faRecycle' is defined but never used.","'faRemoveFormat' is defined but never used.","'useEffect' is defined but never used.","'faDoorClosed' is defined but never used.","'loadingCreateOrder' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["230","231"],["232","233"],"no-global-assign","no-unsafe-negation",{"desc":"234","fix":"235"},{"desc":"236","fix":"237"},{"messageId":"238","fix":"239","desc":"240"},{"messageId":"241","fix":"242","desc":"243"},{"messageId":"238","fix":"244","desc":"240"},{"messageId":"241","fix":"245","desc":"243"},"Update the dependencies array to be: [history, loading, queryParam, queryReadyToStart]",{"range":"246","text":"247"},"Update the dependencies array to be: [queryParam, verifyCode]",{"range":"248","text":"249"},"removeEscape",{"range":"250","text":"251"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"252","text":"253"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"254","text":"251"},{"range":"255","text":"253"},[1460,1469],"[history, loading, queryParam, queryReadyToStart]",[1800,1802],"[queryParam, verifyCode]",[37,38],"",[37,37],"\\",[62,63],[62,62]]