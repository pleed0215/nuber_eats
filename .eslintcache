[{"D:\\mystudy\\nuber_eats\\src\\index.tsx":"1","D:\\mystudy\\nuber_eats\\src\\reportWebVitals.ts":"2","D:\\mystudy\\nuber_eats\\src\\apollo.ts":"3","D:\\mystudy\\nuber_eats\\src\\App.tsx":"4","D:\\mystudy\\nuber_eats\\src\\gloabl.constant.ts":"5","D:\\mystudy\\nuber_eats\\src\\routers\\logged-out-router.tsx":"6","D:\\mystudy\\nuber_eats\\src\\routers\\logged-in-router.tsx":"7","D:\\mystudy\\nuber_eats\\src\\codegen\\globalTypes.ts":"8","D:\\mystudy\\nuber_eats\\src\\hooks\\useMe.ts":"9","D:\\mystudy\\nuber_eats\\src\\pages\\404.tsx":"10","D:\\mystudy\\nuber_eats\\src\\pages\\logint.tsx":"11","D:\\mystudy\\nuber_eats\\src\\pages\\create-account.tsx":"12","D:\\mystudy\\nuber_eats\\src\\pages\\client\\search.tsx":"13","D:\\mystudy\\nuber_eats\\src\\pages\\user\\me.page.tsx":"14","D:\\mystudy\\nuber_eats\\src\\pages\\user\\password.page.tsx":"15","D:\\mystudy\\nuber_eats\\src\\pages\\user\\verification.page.tsx":"16","D:\\mystudy\\nuber_eats\\src\\pages\\order.tsx":"17","D:\\mystudy\\nuber_eats\\src\\pages\\my.page.tsx":"18","D:\\mystudy\\nuber_eats\\src\\components\\header.tsx":"19","D:\\mystudy\\nuber_eats\\src\\pages\\client\\category.tsx":"20","D:\\mystudy\\nuber_eats\\src\\pages\\client\\restaurants.tsx":"21","D:\\mystudy\\nuber_eats\\src\\pages\\client\\restaurant.tsx":"22","D:\\mystudy\\nuber_eats\\src\\pages\\restaurant\\create.restaurant.tsx":"23","D:\\mystudy\\nuber_eats\\src\\pages\\restaurant\\my.restaurants.tsx":"24","D:\\mystudy\\nuber_eats\\src\\pages\\restaurant\\create.dish.tsx":"25","D:\\mystudy\\nuber_eats\\src\\pages\\restaurant\\my.restaurant.tsx":"26","D:\\mystudy\\nuber_eats\\src\\pages\\restaurant\\update.restaurant.tsx":"27","D:\\mystudy\\nuber_eats\\src\\pages\\user\\logout.tsx":"28","D:\\mystudy\\nuber_eats\\src\\pages\\driver\\dashboard.tsx":"29","D:\\mystudy\\nuber_eats\\src\\utils.ts":"30","D:\\mystudy\\nuber_eats\\src\\hooks\\useQueryParam.ts":"31","D:\\mystudy\\nuber_eats\\src\\components\\helmet.onlytitle.tsx":"32","D:\\mystudy\\nuber_eats\\src\\fragments.ts":"33","D:\\mystudy\\nuber_eats\\src\\components\\form-button-inactivable.tsx":"34","D:\\mystudy\\nuber_eats\\src\\components\\dish.item.tsx":"35","D:\\mystudy\\nuber_eats\\src\\components\\restaurants.tsx":"36","D:\\mystudy\\nuber_eats\\src\\components\\loader.tsx":"37","D:\\mystudy\\nuber_eats\\src\\components\\cart.icon.tsx":"38","D:\\mystudy\\nuber_eats\\src\\components\\restaurant.item.tsx":"39","D:\\mystudy\\nuber_eats\\src\\components\\categories.tsx":"40","D:\\mystudy\\nuber_eats\\src\\components\\uberlogo.tsx":"41","D:\\mystudy\\nuber_eats\\src\\components\\category.tsx":"42"},{"size":1010,"mtime":1610863667810,"results":"43","hashOfConfig":"44"},{"size":440,"mtime":1608632301346,"results":"45","hashOfConfig":"44"},{"size":2172,"mtime":1610863667806,"results":"46","hashOfConfig":"44"},{"size":413,"mtime":1608632301338,"results":"47","hashOfConfig":"44"},{"size":233,"mtime":1610863667810,"results":"48","hashOfConfig":"44"},{"size":605,"mtime":1610863667815,"results":"49","hashOfConfig":"44"},{"size":4711,"mtime":1610863667815,"results":"50","hashOfConfig":"44"},{"size":1879,"mtime":1610864076125,"results":"51","hashOfConfig":"44"},{"size":300,"mtime":1608632301343,"results":"52","hashOfConfig":"44"},{"size":671,"mtime":1608632301344,"results":"53","hashOfConfig":"44"},{"size":4310,"mtime":1608632301345,"results":"54","hashOfConfig":"44"},{"size":4855,"mtime":1610863667812,"results":"55","hashOfConfig":"44"},{"size":2002,"mtime":1608632301344,"results":"56","hashOfConfig":"44"},{"size":4040,"mtime":1608632301346,"results":"57","hashOfConfig":"44"},{"size":3272,"mtime":1608632301346,"results":"58","hashOfConfig":"44"},{"size":2590,"mtime":1608632301346,"results":"59","hashOfConfig":"44"},{"size":6470,"mtime":1610863667812,"results":"60","hashOfConfig":"44"},{"size":2603,"mtime":1610864098338,"results":"61","hashOfConfig":"44"},{"size":1357,"mtime":1610863667809,"results":"62","hashOfConfig":"44"},{"size":1722,"mtime":1610863667810,"results":"63","hashOfConfig":"44"},{"size":3473,"mtime":1610863667811,"results":"64","hashOfConfig":"44"},{"size":18433,"mtime":1610863667811,"results":"65","hashOfConfig":"44"},{"size":5336,"mtime":1610863667813,"results":"66","hashOfConfig":"44"},{"size":3318,"mtime":1610863667813,"results":"67","hashOfConfig":"44"},{"size":18219,"mtime":1610863667813,"results":"68","hashOfConfig":"44"},{"size":7232,"mtime":1610863667813,"results":"69","hashOfConfig":"44"},{"size":4045,"mtime":1610863667814,"results":"70","hashOfConfig":"44"},{"size":748,"mtime":1610863667814,"results":"71","hashOfConfig":"44"},{"size":5603,"mtime":1610863667812,"results":"72","hashOfConfig":"44"},{"size":180,"mtime":1610863667815,"results":"73","hashOfConfig":"44"},{"size":130,"mtime":1608632301343,"results":"74","hashOfConfig":"44"},{"size":276,"mtime":1608632301342,"results":"75","hashOfConfig":"44"},{"size":1514,"mtime":1610863667810,"results":"76","hashOfConfig":"44"},{"size":453,"mtime":1610863667808,"results":"77","hashOfConfig":"44"},{"size":1093,"mtime":1608906637621,"results":"78","hashOfConfig":"44"},{"size":948,"mtime":1608632301343,"results":"79","hashOfConfig":"44"},{"size":784,"mtime":1610863667809,"results":"80","hashOfConfig":"44"},{"size":914,"mtime":1610863667808,"results":"81","hashOfConfig":"44"},{"size":1162,"mtime":1610863667809,"results":"82","hashOfConfig":"44"},{"size":723,"mtime":1610863667808,"results":"83","hashOfConfig":"44"},{"size":173,"mtime":1608632301343,"results":"84","hashOfConfig":"44"},{"size":836,"mtime":1608632301342,"results":"85","hashOfConfig":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},"lt469s",{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"88"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"88"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"88"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"88"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"88"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"88"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"88"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"88"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"88"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},"D:\\mystudy\\nuber_eats\\src\\index.tsx",[],["180","181"],"D:\\mystudy\\nuber_eats\\src\\reportWebVitals.ts",[],"D:\\mystudy\\nuber_eats\\src\\apollo.ts",[],"D:\\mystudy\\nuber_eats\\src\\App.tsx",[],"D:\\mystudy\\nuber_eats\\src\\gloabl.constant.ts",[],"D:\\mystudy\\nuber_eats\\src\\routers\\logged-out-router.tsx",[],"D:\\mystudy\\nuber_eats\\src\\routers\\logged-in-router.tsx",["182"],"import React, { useEffect } from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\n\r\nimport { UserRole } from \"../codegen/globalTypes\";\r\nimport { Header } from \"../components/header\";\r\nimport { useMe } from \"../hooks/useMe\";\r\nimport { NotFound } from \"../pages/404\";\r\nimport { CategoryPage } from \"../pages/client/category\";\r\nimport { Restaurant } from \"../pages/client/restaurant\";\r\nimport { RestaurantsPage } from \"../pages/client/restaurants\";\r\nimport { SearchPage } from \"../pages/client/search\";\r\nimport { CreateRestaurant } from \"../pages/restaurant/create.restaurant\";\r\nimport { MyRestaurants } from \"../pages/restaurant/my.restaurants\";\r\nimport { MyRestaurant } from \"../pages/restaurant/my.restaurant\";\r\nimport { LogOutPage } from \"../pages/user/logout\";\r\nimport { EditProfile } from \"../pages/user/me.page\";\r\nimport { UpdatePassword } from \"../pages/user/password.page\";\r\nimport { VerificationPage } from \"../pages/user/verification.page\";\r\nimport { CreateDish } from \"../pages/restaurant/create.dish\";\r\nimport { UpdateRestaurant } from \"../pages/restaurant/update.restaurant\";\r\n\r\nimport { Order } from \"../pages/order\";\r\nimport { DashBoard } from \"../pages/driver/dashboard\";\r\nimport { MyPage } from \"../pages/my.page\";\r\nimport { TOKEN_NAME } from \"../gloabl.constant\";\r\nimport { authTokenVar, isLoggedInVar } from \"../apollo\";\r\nimport { useApolloClient } from \"@apollo/client\";\r\n\r\ninterface IRouteItem {\r\n  path: string;\r\n  component: React.FC;\r\n  exact?: boolean;\r\n}\r\n\r\nconst clientRoutes: IRouteItem[] = [\r\n  {\r\n    path: \"/\",\r\n    component: RestaurantsPage,\r\n    exact: true,\r\n  },\r\n  {\r\n    path: \"/search\",\r\n    component: SearchPage,\r\n  },\r\n  {\r\n    path: \"/category/:slug\",\r\n    component: CategoryPage,\r\n  },\r\n  {\r\n    path: \"/restaurant/:id\",\r\n    component: Restaurant,\r\n  },\r\n];\r\n\r\nconst ownerRoutes: IRouteItem[] = [\r\n  {\r\n    path: \"/\",\r\n    component: MyRestaurants,\r\n    exact: true,\r\n  },\r\n  {\r\n    path: \"/create-restaurant\",\r\n    component: CreateRestaurant,\r\n  },\r\n  {\r\n    path: \"/my-restaurant/:restaurantId/:dishId/update\",\r\n    component: CreateDish,\r\n    exact: true,\r\n  },\r\n  {\r\n    path: \"/my-restaurant/:restaurantId/create-dish\",\r\n    component: CreateDish,\r\n  },\r\n  {\r\n    path: \"/my-restaurant/:id/update\",\r\n    component: UpdateRestaurant,\r\n  },\r\n  {\r\n    path: \"/my-restaurant/:id\",\r\n    component: MyRestaurant,\r\n  },\r\n];\r\n\r\nconst driversRoutes: IRouteItem[] = [{ path: \"/\", component: DashBoard }];\r\n\r\nconst commonRoutes: IRouteItem[] = [\r\n  {\r\n    path: \"/verification\",\r\n    component: VerificationPage,\r\n  },\r\n  {\r\n    path: \"/me\",\r\n    component: EditProfile,\r\n  },\r\n  {\r\n    path: \"/password\",\r\n    component: UpdatePassword,\r\n  },\r\n  {\r\n    path: \"/logout\",\r\n    component: LogOutPage,\r\n  },\r\n  {\r\n    path: \"/orders/:id\",\r\n    component: Order,\r\n  },\r\n  {\r\n    path: \"/my-page\",\r\n    component: MyPage,\r\n  },\r\n];\r\n\r\nexport const LoggedInRouter = () => {\r\n  const { data, loading, error } = useMe();\r\n  const client = useApolloClient();\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"h-screen flex justify-center items-center\">\r\n        <span className=\"font-medium text-xl tracking-wide\">Loading...</span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!loading && error) {\r\n    localStorage.removeItem(TOKEN_NAME);\r\n    isLoggedInVar(false);\r\n    authTokenVar(null);\r\n    client.cache.reset();\r\n  }\r\n\r\n  return (\r\n    <Router>\r\n      <Header />\r\n      <Switch>\r\n        {commonRoutes.map((route) => (\r\n          <Route\r\n            key={route.path}\r\n            path={route.path}\r\n            exact={Boolean(route.exact)}\r\n          >\r\n            <route.component />\r\n          </Route>\r\n        ))}\r\n        {data?.me?.role === UserRole.Client &&\r\n          clientRoutes.map((route) => (\r\n            <Route\r\n              key={route.path}\r\n              path={route.path}\r\n              exact={Boolean(route.exact)}\r\n            >\r\n              <route.component />\r\n            </Route>\r\n          ))}\r\n        {data?.me?.role === UserRole.Owner &&\r\n          ownerRoutes.map((route) => (\r\n            <Route\r\n              key={route.path}\r\n              path={route.path}\r\n              exact={Boolean(route.exact)}\r\n            >\r\n              <route.component />\r\n            </Route>\r\n          ))}\r\n        {data?.me?.role === UserRole.Delivery &&\r\n          driversRoutes.map((route) => (\r\n            <Route\r\n              key={route.path}\r\n              path={route.path}\r\n              exact={Boolean(route.exact)}\r\n            >\r\n              <route.component />\r\n            </Route>\r\n          ))}\r\n\r\n        <Route>\r\n          <NotFound />\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n};\r\n","D:\\mystudy\\nuber_eats\\src\\codegen\\globalTypes.ts",[],"D:\\mystudy\\nuber_eats\\src\\hooks\\useMe.ts",[],"D:\\mystudy\\nuber_eats\\src\\pages\\404.tsx",[],"D:\\mystudy\\nuber_eats\\src\\pages\\logint.tsx",[],"D:\\mystudy\\nuber_eats\\src\\pages\\create-account.tsx",[],"D:\\mystudy\\nuber_eats\\src\\pages\\client\\search.tsx",["183"],"import { gql, useLazyQuery } from \"@apollo/client\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n  QuerySearchByTerm,\r\n  QuerySearchByTermVariables,\r\n} from \"../../codegen/QuerySearchByTerm\";\r\nimport { HelmetOnlyTitle } from \"../../components/helmet.onlytitle\";\r\nimport { Restaurants } from \"../../components/restaurants\";\r\nimport { RESTAURANT_FRAGMENT } from \"../../fragments\";\r\nimport { useQueryParam } from \"../../hooks/useQueryParam\";\r\n\r\nconst GQL_SEARCH_BY_TERM = gql`\r\n  query QuerySearchByTerm($term: String!, $page: Int!) {\r\n    searchRestaurantByName(search: { query: $term, page: $page }) {\r\n      ok\r\n      error\r\n      totalPages\r\n      countTotalItems\r\n      restaurants {\r\n        ...RestaurantPart\r\n        category {\r\n          name\r\n          slug\r\n        }\r\n      }\r\n    }\r\n  }\r\n  ${RESTAURANT_FRAGMENT}\r\n`;\r\n\r\nexport const SearchPage: React.FC = () => {\r\n  const queryParam = useQueryParam();\r\n  const history = useHistory();\r\n  const [term, setTerm] = useState<string | null>(null);\r\n  const [queryReadyToStart, { loading, data }] = useLazyQuery<\r\n    QuerySearchByTerm,\r\n    QuerySearchByTermVariables\r\n  >(GQL_SEARCH_BY_TERM);\r\n\r\n  useEffect(() => {\r\n    const inputTerm = queryParam.get(\"term\");\r\n    if (!inputTerm) {\r\n      history.replace(\"/\");\r\n    } else {\r\n      queryReadyToStart({\r\n        variables: {\r\n          term: inputTerm,\r\n          page: 1,\r\n        },\r\n      });\r\n      setTerm(inputTerm);\r\n    }\r\n  }, [loading]);\r\n\r\n  return (\r\n    <div>\r\n      <HelmetOnlyTitle title={`Searching term: \"${term}\"`} />\r\n      <div className=\"w-full\">\r\n        {loading ? (\r\n          <h1>Loading...</h1>\r\n        ) : (\r\n          <Restaurants\r\n            restaurants={data?.searchRestaurantByName.restaurants}\r\n            categoryShow={true}\r\n            title={`Searching: \"${term}\" (Found: ${data?.searchRestaurantByName.countTotalItems})`}\r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","D:\\mystudy\\nuber_eats\\src\\pages\\user\\me.page.tsx",[],"D:\\mystudy\\nuber_eats\\src\\pages\\user\\password.page.tsx",[],"D:\\mystudy\\nuber_eats\\src\\pages\\user\\verification.page.tsx",["184"],"import { gql, useApolloClient, useMutation } from \"@apollo/client\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nimport {\r\n  MutationVerifyCode,\r\n  MutationVerifyCodeVariables,\r\n} from \"../../codegen/MutationVerifyCode\";\r\nimport { HelmetOnlyTitle } from \"../../components/helmet.onlytitle\";\r\nimport { useMe } from \"../../hooks/useMe\";\r\nimport { useQueryParam } from \"../../hooks/useQueryParam\";\r\n\r\nconst GQL_VERIFICATION = gql`\r\n  mutation MutationVerifyCode($code: String!) {\r\n    verifyCode(code: $code) {\r\n      ok\r\n      error\r\n    }\r\n  }\r\n`;\r\n\r\n/* Todo:\r\n    add sendVerification mutation on backend.\r\n*/\r\n\r\nexport const VerificationPage = () => {\r\n  const history = useHistory();\r\n  const onVerifyCompleted = (data: MutationVerifyCode) => {\r\n    const {\r\n      verifyCode: { ok },\r\n    } = data;\r\n\r\n    if (ok && userData?.me?.id) {\r\n      client.writeFragment({\r\n        id: `User:${userData?.me?.id}`,\r\n        fragment: gql`\r\n          fragment VerifiedUser on User {\r\n            verified\r\n          }\r\n        `,\r\n        data: {\r\n          verified: true,\r\n        },\r\n      });\r\n      toast.success(\"Success to comfirm your verification.\");\r\n      setTimeout(() => history.push(\"/\"), 2000);\r\n    } else {\r\n      toast.error(\"Verification of your email address is not valid.\");\r\n    }\r\n  };\r\n  const [verifyCode, { loading, data, error }] = useMutation<\r\n    MutationVerifyCode,\r\n    MutationVerifyCodeVariables\r\n  >(GQL_VERIFICATION, { onCompleted: onVerifyCompleted });\r\n\r\n  const queryParam = useQueryParam();\r\n  const client = useApolloClient();\r\n  const { data: userData } = useMe();\r\n\r\n  useEffect(() => {\r\n    const code = queryParam.get(\"code\");\r\n\r\n    if (code) {\r\n      verifyCode({\r\n        variables: {\r\n          code,\r\n        },\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"mt-52 flex flex-col items-center justify-center\">\r\n      <HelmetOnlyTitle title=\"Verifying your email address\" />\r\n      {loading ? (\r\n        <h1 className=\"text-lg mb-2 font-medium\">\r\n          Confirming your verification.. Please wait..\r\n        </h1>\r\n      ) : !error && data?.verifyCode.ok ? (\r\n        <h1 className=\"text-lg mb-2 font-medium\">\r\n          Your verification is confirmed. Please log in.\r\n        </h1>\r\n      ) : (\r\n        <div>\r\n          <h1 className=\"text-lg mb-2 font-medium\">\r\n            Couldn't confirm your email verification.\r\n          </h1>\r\n          <p>Message: {data?.verifyCode.error} </p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","D:\\mystudy\\nuber_eats\\src\\pages\\order.tsx",["185"],"import { gql, useMutation, useQuery } from \"@apollo/client\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { OrderStatus, UserRole } from \"../codegen/globalTypes\";\r\nimport { OnOrderUpdate } from \"../codegen/OnOrderUpdate\";\r\nimport {\r\n  OwnerUpdateOrder,\r\n  OwnerUpdateOrderVariables,\r\n} from \"../codegen/OwnerUpdateOrder\";\r\nimport {\r\n  QueryOrderDetail,\r\n  QueryOrderDetailVariables,\r\n} from \"../codegen/QueryOrderDetail\";\r\nimport { HelmetOnlyTitle } from \"../components/helmet.onlytitle\";\r\nimport { FULL_ORDER_FRAGMENT } from \"../fragments\";\r\nimport { useMe } from \"../hooks/useMe\";\r\n\r\ninterface IParams {\r\n  id: string;\r\n}\r\n\r\nconst GQL_GET_ORDER = gql`\r\n  query QueryOrderDetail($id: Int!) {\r\n    orderDetail(id: $id) {\r\n      ok\r\n      error\r\n      order {\r\n        ...FullOrderPart\r\n      }\r\n    }\r\n  }\r\n  ${FULL_ORDER_FRAGMENT}\r\n`;\r\n\r\nconst GQL_ON_ORDER = gql`\r\n  subscription OnOrderUpdate($orderId: Float!) {\r\n    orderUpdate(orderId: $orderId) {\r\n      ...FullOrderPart\r\n    }\r\n  }\r\n  ${FULL_ORDER_FRAGMENT}\r\n`;\r\n\r\nconst GQL_UPDATE_ORDER = gql`\r\n  mutation OwnerUpdateOrder($id: Float!, $orderStatus: OrderStatus!) {\r\n    updateOrder(id: $id, orderStatus: $orderStatus) {\r\n      ok\r\n      error\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Order = () => {\r\n  const { id } = useParams<IParams>();\r\n  const { data, loading, error, subscribeToMore } = useQuery<\r\n    QueryOrderDetail,\r\n    QueryOrderDetailVariables\r\n  >(GQL_GET_ORDER, {\r\n    variables: {\r\n      id: +id,\r\n    },\r\n  });\r\n  const { data: userData } = useMe();\r\n  const [updateOrder] = useMutation<\r\n    OwnerUpdateOrder,\r\n    OwnerUpdateOrderVariables\r\n  >(GQL_UPDATE_ORDER, {\r\n    refetchQueries: [\r\n      {\r\n        query: GQL_GET_ORDER,\r\n        variables: {\r\n          id: +id,\r\n        },\r\n      },\r\n    ],\r\n  });\r\n\r\n  const onButtonClick = async (status: OrderStatus) =>\r\n    await updateOrder({ variables: { id: +id, orderStatus: status } });\r\n\r\n  useEffect(() => {\r\n    subscribeToMore({\r\n      document: GQL_ON_ORDER,\r\n      variables: {\r\n        orderId: +id,\r\n      },\r\n      updateQuery: (\r\n        prev,\r\n        {\r\n          subscriptionData: { data },\r\n        }: { subscriptionData: { data: OnOrderUpdate } }\r\n      ) => {\r\n        if (!data) return prev;\r\n        return {\r\n          orderDetail: {\r\n            ...prev.orderDetail,\r\n            order: {\r\n              ...data.orderUpdate,\r\n            },\r\n          },\r\n        };\r\n      },\r\n    });\r\n    return () => {};\r\n  }, [data]);\r\n\r\n  return (\r\n    <div className=\"layout__container mt-32 flex justify-center items-center\">\r\n      <HelmetOnlyTitle title=\"Order Detail\" />\r\n      {loading ? (\r\n        <div className=\"w-screen h-screen flex justify-content items-center\">\r\n          <h1>Loading...</h1>\r\n        </div>\r\n      ) : error || !data?.orderDetail.ok ? (\r\n        <div className=\"w-screen h-screen flex justify-content items-center\">\r\n          <h1>Data fetching error</h1>\r\n        </div>\r\n      ) : (\r\n        <div className=\"w-1/2 max-w-lg min-w-max flex flex-col items-center border border-gray-700\">\r\n          <div className=\"w-full text-center py-2 mx-auto bg-gray-700 text-white\">\r\n            Order #{data?.orderDetail?.order?.id}\r\n          </div>\r\n          <div className=\"w-full py-3 px-4 bg-white flex flex-col items-center justify-start\">\r\n            <div className=\" w-full py-4 text-center text-xl border-b border-gray-700\">\r\n              ${data?.orderDetail?.order?.totalCost}\r\n            </div>\r\n            <div className=\" w-full py-4 border-b border-gray-700\">\r\n              Prepared By: {data?.orderDetail?.order?.restaurant?.name}\r\n            </div>\r\n            <div className=\" w-full py-4 border-b border-gray-700\">\r\n              Deliver To: {data?.orderDetail?.order?.customer?.email}\r\n            </div>\r\n            <div className=\" w-full py-4 border-b border-gray-700\">\r\n              driver:&nbsp;\r\n              {data?.orderDetail?.order?.driver === null\r\n                ? \"Not yet\"\r\n                : data?.orderDetail?.order?.driver?.email}\r\n            </div>\r\n            {userData?.me?.role === UserRole.Client && (\r\n              <div className=\" w-full py-8 text-center text-lime-500 font-semibold text-lg\">\r\n                Status:{data?.orderDetail?.order?.orderStatus}\r\n              </div>\r\n            )}\r\n            {userData?.me?.role === UserRole.Delivery &&\r\n              (data?.orderDetail?.order?.orderStatus ===\r\n              OrderStatus.Pickedup ? (\r\n                <button\r\n                  className=\"auth__form_button\"\r\n                  onClick={() => onButtonClick(OrderStatus.Delivered)}\r\n                >\r\n                  Delivery Completed\r\n                </button>\r\n              ) : (\r\n                <div className=\" w-full py-8 text-center text-lime-500 font-semibold text-lg\">\r\n                  Status:{data?.orderDetail?.order?.orderStatus}\r\n                </div>\r\n              ))}\r\n\r\n            {userData?.me?.role === UserRole.Owner && (\r\n              <>\r\n                {data?.orderDetail?.order?.orderStatus ===\r\n                  OrderStatus.Pending && (\r\n                  <button\r\n                    className=\"auth__form_button\"\r\n                    onClick={() => onButtonClick(OrderStatus.Cooking)}\r\n                  >\r\n                    Accept Order\r\n                  </button>\r\n                )}\r\n                {data?.orderDetail?.order?.orderStatus ===\r\n                  OrderStatus.Cooking && (\r\n                  <button\r\n                    className=\"auth__form_button\"\r\n                    onClick={() => onButtonClick(OrderStatus.Cooked)}\r\n                  >\r\n                    Order Cooked\r\n                  </button>\r\n                )}\r\n                {data?.orderDetail?.order?.orderStatus !==\r\n                  OrderStatus.Cooking &&\r\n                data?.orderDetail?.order?.orderStatus === OrderStatus.Cooked ? (\r\n                  <div className=\" w-full py-8 text-center text-lime-500 font-semibold text-lg\">\r\n                    Status:{data?.orderDetail?.order?.orderStatus}\r\n                  </div>\r\n                ) : (\r\n                  <div className=\" w-full py-8 text-center text-lime-500 font-semibold text-lg\">\r\n                    Status:{data?.orderDetail?.order?.orderStatus}\r\n                  </div>\r\n                )}\r\n              </>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","D:\\mystudy\\nuber_eats\\src\\pages\\my.page.tsx",[],"D:\\mystudy\\nuber_eats\\src\\components\\header.tsx",[],"D:\\mystudy\\nuber_eats\\src\\pages\\client\\category.tsx",[],"D:\\mystudy\\nuber_eats\\src\\pages\\client\\restaurants.tsx",[],"D:\\mystudy\\nuber_eats\\src\\pages\\client\\restaurant.tsx",["186"],"import { gql, useMutation, useQuery } from \"@apollo/client\";\r\nimport {\r\n  faCalculator,\r\n  faCartArrowDown,\r\n  faCartPlus,\r\n  faDoorOpen,\r\n  faHome,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React, { useState } from \"react\";\r\nimport { Link, useHistory, useParams } from \"react-router-dom\";\r\nimport {\r\n  MutationCreateOrder,\r\n  MutationCreateOrderVariables,\r\n} from \"../../codegen/MutationCreateOrder\";\r\nimport {\r\n  QueryRestaurant,\r\n  QueryRestaurantVariables,\r\n  QueryRestaurant_restaurant_restaurant_dishes,\r\n} from \"../../codegen/QueryRestaurant\";\r\nimport { DishItem } from \"../../components/dish.item\";\r\nimport { DISH_FRAGMENT, RESTAURANT_FRAGMENT } from \"../../fragments\";\r\nimport { CreateOrderItemInput } from \"../../codegen/globalTypes\";\r\nimport { CartIcon } from \"../../components/cart.icon\";\r\nimport { toast } from \"react-toastify\";\r\nimport { Loader } from \"../../components/loader\";\r\n\r\ninterface IParam {\r\n  id: string;\r\n}\r\n\r\nexport const GQL_RESTAURANT = gql`\r\n  query QueryRestaurant($id: Float!) {\r\n    restaurant(id: $id) {\r\n      ok\r\n      error\r\n      restaurant {\r\n        ...RestaurantPart\r\n        dishes {\r\n          ...DishPart\r\n        }\r\n      }\r\n    }\r\n  }\r\n  ${RESTAURANT_FRAGMENT}\r\n  ${DISH_FRAGMENT}\r\n`;\r\n\r\nconst GQL_ORDER = gql`\r\n  mutation MutationCreateOrder($input: CreateOrderInput!) {\r\n    createOrder(input: $input) {\r\n      ok\r\n      error\r\n      orderId\r\n    }\r\n  }\r\n`;\r\n\r\ninterface IChoice {\r\n  name: string;\r\n  extra: number;\r\n}\r\n\r\ninterface IOption {\r\n  name: string;\r\n  extra: number;\r\n  choices?: IChoice[] | null;\r\n}\r\n\r\nexport const Restaurant = () => {\r\n  const { id } = useParams<IParam>();\r\n  const history = useHistory();\r\n  const [\r\n    dishInfo,\r\n    setDishInfo,\r\n  ] = useState<QueryRestaurant_restaurant_restaurant_dishes | null>(null);\r\n  const [totalPay, setTotalPay] = useState<number>(0);\r\n  const [options, setOptions] = useState<IOption[]>([]);\r\n  const [totalOrder, setTotalOrder] = useState<CreateOrderItemInput[]>([]);\r\n  const [totalOrderPay, setTotalOrderPay] = useState<number>(0);\r\n  const [seeCart, setSeeCart] = useState<boolean>(false);\r\n  const [nowOrdering, setNowOrdering] = useState<boolean>(false);\r\n  const { data, loading, error } = useQuery<\r\n    QueryRestaurant,\r\n    QueryRestaurantVariables\r\n  >(GQL_RESTAURANT, {\r\n    variables: {\r\n      id: +id,\r\n    },\r\n  });\r\n\r\n  const [createOrder, { loading: loadingCreateOrder }] = useMutation<\r\n    MutationCreateOrder,\r\n    MutationCreateOrderVariables\r\n  >(GQL_ORDER, {\r\n    onCompleted: ({ createOrder: { ok, orderId } }: MutationCreateOrder) => {\r\n      if (ok) {\r\n        setNowOrdering(false);\r\n        setSeeCart(false);\r\n        toast.success(\r\n          \"You order was successfully made. Please wait for your delivery.\"\r\n        );\r\n        history.push(`/orders/${orderId}`);\r\n      }\r\n    },\r\n    onError: (error) => {\r\n      toast.error(\"Order failed...\");\r\n    },\r\n  });\r\n\r\n  const onScroll = (e) => {\r\n    e.preventDefault();\r\n    window.scrollTo(0, 0);\r\n  };\r\n  const onDishClicked = (id) => {\r\n    const dish = data?.restaurant.restaurant?.dishes?.find(\r\n      (dish) => dish.id === id\r\n    );\r\n    if (dish !== undefined) {\r\n      window.scrollTo(0, 0);\r\n      window.onscroll = () => {\r\n        window.scrollTo(0, 0);\r\n      };\r\n      setDishInfo(dish);\r\n      setTotalPay(dish.price);\r\n    }\r\n  };\r\n\r\n  const onOptionClicked = (name, extra) => {\r\n    const option = options?.find((option) => option.name === name);\r\n    if (option) {\r\n      let choicesPay = 0;\r\n      option.choices?.forEach((choice) => (choicesPay += choice.extra));\r\n      setOptions(options.filter((option) => option.name !== name));\r\n      setTotalPay((current) => current - extra - choicesPay);\r\n    } else {\r\n      if (options) {\r\n        setOptions([...options, { name, extra }]);\r\n        setTotalPay((current) => current + extra);\r\n      }\r\n    }\r\n  };\r\n\r\n  const onChoiceClicked = (optionName, choiceName, extra) => {\r\n    const optionIndex = options?.findIndex(\r\n      (option) => option.name === optionName\r\n    );\r\n    if (optionIndex > -1) {\r\n      const choiceIndex = options[optionIndex].choices?.findIndex(\r\n        (choice) => choice.name === choiceName\r\n      );\r\n\r\n      if (choiceIndex !== undefined && choiceIndex > -1) {\r\n        options[optionIndex].choices?.splice(choiceIndex, 1);\r\n\r\n        setOptions([...options]);\r\n        setTotalPay((current) => current - extra);\r\n      } else {\r\n        if (options[optionIndex].choices) {\r\n          options[optionIndex].choices?.push({ name: choiceName, extra });\r\n        } else {\r\n          options[optionIndex].choices = [{ name: choiceName, extra }];\r\n        }\r\n        setOptions([...options]);\r\n        setTotalPay((current) => current + extra);\r\n      }\r\n    }\r\n  };\r\n\r\n  const onOrderClosed = () => {\r\n    window.onscroll = () => {};\r\n    setDishInfo(null);\r\n    setTotalPay(0);\r\n    setOptions([]);\r\n    setNowOrdering(false);\r\n  };\r\n\r\n  const onAddCartClicked = (dishId) => {\r\n    const order: CreateOrderItemInput = {\r\n      dishId,\r\n      options: [...options],\r\n    };\r\n    setTotalOrder([...totalOrder, order]);\r\n    setTotalOrderPay((current) => current + totalPay);\r\n    onOrderClosed();\r\n  };\r\n\r\n  const startOrder = async () => {\r\n    if (nowOrdering || loadingCreateOrder) {\r\n      return;\r\n    }\r\n    setNowOrdering(true);\r\n    const ok = window.confirm(\"Are you sure order?\");\r\n    if (ok) {\r\n      await createOrder({\r\n        variables: {\r\n          input: {\r\n            restaurantId: +id,\r\n            items: totalOrder,\r\n          },\r\n        },\r\n      });\r\n    } else {\r\n      setNowOrdering(false);\r\n    }\r\n  };\r\n\r\n  const hasOption = (optionName) => {\r\n    return Boolean(options.find((option) => option.name === optionName));\r\n  };\r\n\r\n  const hasChoice = (optionName, choiceName) => {\r\n    const option = options.find((o) => o.name === optionName);\r\n    if (option) {\r\n      return Boolean(\r\n        option.choices?.find((choice) => choice.name === choiceName)\r\n      );\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-full flex justify-contern\">\r\n      {loading ? (\r\n        <div className=\"w-screen h-screen flex justify-center items-center\">\r\n          <Loader />\r\n        </div>\r\n      ) : error || !data?.restaurant.ok ? (\r\n        <div className=\"w-screen h-screen flex justify-content items-center\">\r\n          <h1>Data fetching error</h1>\r\n        </div>\r\n      ) : (\r\n        <div className={`w-full flex flex-col items-center`}>\r\n          <div\r\n            className=\"w-full h-80 bg-cover bg-center flex items-center\"\r\n            style={{\r\n              backgroundImage: `url(${data?.restaurant.restaurant?.coverImage})`,\r\n            }}\r\n          >\r\n            <div className=\"sm:w-2/3 md:w-1/2 xl:w-1/3 bg-white py-4 pr-4 opacity-95\">\r\n              <h1 className=\"text-2xl pl-20 flex mb-3 \">\r\n                {data?.restaurant.restaurant?.name}\r\n              </h1>\r\n              <Link\r\n                to={`/category/${data.restaurant.restaurant?.category?.slug}`}\r\n              >\r\n                <h4 className=\"text-sm font-light pl-20 flex mb-2 underline\">\r\n                  {data?.restaurant.restaurant?.category?.name}\r\n                </h4>\r\n              </Link>\r\n              <h4 className=\"text-sm font-light pl-20 flex items-center\">\r\n                <FontAwesomeIcon className=\"mr-2\" icon={faHome} />\r\n                {data?.restaurant.restaurant?.address}\r\n              </h4>\r\n            </div>\r\n          </div>\r\n          <div className=\"layout__container flex justify-start items-center pt-5\">\r\n            <div\r\n              className=\"flex items-center cursor-pointer\"\r\n              onClick={() => setSeeCart(totalOrder.length > 0 && true)}\r\n            >\r\n              <CartIcon n={totalOrder.length} />\r\n              <span className=\"ml-2 text-lg\">Total: ${totalOrderPay}</span>\r\n            </div>\r\n          </div>\r\n          <div className=\"text-2xl italic border-b pb-2 w-full layout__container mt-4\">\r\n            Choose Dishes you want to order\r\n          </div>\r\n          <div className=\"layout__container grid lg:grid-cols-3 md:grid-cols-2  sm:grid-cols-1 gap-4 mt-4\">\r\n            {data?.restaurant.restaurant?.dishes?.map((dish) => (\r\n              <div key={dish.id} onClick={() => onDishClicked(dish.id)}>\r\n                <DishItem\r\n                  name={dish.name}\r\n                  price={dish.price}\r\n                  description={dish.description}\r\n                  photo={dish.photo}\r\n                  cursorPointer\r\n                />\r\n              </div>\r\n            ))}\r\n          </div>\r\n          {seeCart && (\r\n            <div className=\"absolute inset-0 w-full h-full bg-gray-600 bg-opacity-50 z-50 flex justify-center items-center\">\r\n              <div className=\"flex flex-col w-1/3 min-w-max max-w-sm h-1/2 border border-gray-600 rounded-lg\">\r\n                <div className=\"w-full h-12 bg-lime-600 rounded-t-lg text-center flex items-center justify-between text-white text-xl font-semibold italic px-4\">\r\n                  <p></p>\r\n                  <p>Confirm orders</p>\r\n                  <p>\r\n                    <FontAwesomeIcon\r\n                      icon={faDoorOpen}\r\n                      className=\"hover:text-gray-300 cursor-pointer\"\r\n                      onClick={() => setSeeCart(false)}\r\n                    />\r\n                  </p>\r\n                </div>\r\n                <div className=\"h-full bg-white p-4 flex flex-col items-center justify-start overflow-y-auto\">\r\n                  <div className=\"text-md font-thin font-mono w-full\">\r\n                    Total orders\r\n                    <hr></hr>\r\n                  </div>\r\n                  {totalOrder.map((order, index) => {\r\n                    const dish = data.restaurant.restaurant?.dishes?.find(\r\n                      (d) => d.id === order.dishId\r\n                    );\r\n\r\n                    return (\r\n                      <div key={`confirm-order-${index}`} className=\"w-full\">\r\n                        <div className=\"font-mono text-sm pl-2\">\r\n                          {`# ${index + 1} - ${dish?.name} / $${dish?.price}`}\r\n                          {order.options !== null &&\r\n                            order.options?.map((option, optionIndex) => (\r\n                              <div\r\n                                className=\"font-mono text-sm font-thin pl-4\"\r\n                                key={`confir-option-${optionIndex}`}\r\n                              >\r\n                                {`@ Option ${optionIndex + 1}. ${\r\n                                  option?.name\r\n                                } - $${option?.extra}`}\r\n                                {option.choices &&\r\n                                  option.choices.length > 0 && (\r\n                                    <div>&lt;Additional&gt;</div>\r\n                                  )}\r\n                                {option?.choices?.map((choice, choiceIndex) => (\r\n                                  <div\r\n                                    className=\"font-mono text-sm font-thin pl-4\"\r\n                                    key={`confir-choice-${index}-${choiceIndex}`}\r\n                                  >{`* ${choiceIndex + 1}. ${choice?.name} - $${\r\n                                    choice?.extra\r\n                                  }`}</div>\r\n                                ))}\r\n                              </div>\r\n                            ))}\r\n                        </div>\r\n                      </div>\r\n                    );\r\n                  })}\r\n                </div>\r\n                <div\r\n                  onClick={() => startOrder()}\r\n                  className=\"w-full h-12 grid grid-cols-3 items-center text-white bg-lime-600 rounded-b-lg cursor-pointer hover:bg-lime-700  transition duration-200\"\r\n                >\r\n                  <p className=\"text-center\">\r\n                    <FontAwesomeIcon icon={faCalculator} className=\"mr-2\" />\r\n                    Total: ${totalOrderPay}\r\n                  </p>\r\n                  <p className=\"text-center flex justify-center\">\r\n                    {nowOrdering ? <Loader /> : \"Order Now\"}\r\n                  </p>\r\n                  <p></p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n          {dishInfo && (\r\n            <div className=\"absolute inset-0 w-full h-full bg-gray-600 bg-opacity-50 z-50 flex justify-center items-center\">\r\n              <div className=\"flex flex-col w-1/3 min-w-max max-w-sm h-1/2 border border-gray-600 rounded-lg\">\r\n                <div className=\"w-full h-12 bg-lime-600 rounded-t-lg text-center flex items-center justify-between text-white text-xl font-semibold italic px-4\">\r\n                  <p></p>\r\n                  <p className=\"truncate\">Order for '{dishInfo.name}'</p>\r\n                  <p\r\n                    className=\"hover:text-gray-200 cursor-pointer\"\r\n                    onClick={() => onOrderClosed()}\r\n                  >\r\n                    <FontAwesomeIcon icon={faDoorOpen} />\r\n                  </p>\r\n                </div>\r\n                <div className=\"h-full bg-white p-4 flex flex-col items-center justify-start overflow-y-auto\">\r\n                  <div className=\"flex w-full h-auto\">\r\n                    <div\r\n                      className=\" w-32 h-32 bg-center bg-cover rounded\"\r\n                      style={{ backgroundImage: `url(${dishInfo.photo})` }}\r\n                    ></div>\r\n                    <div className=\"w-full ml-2\">\r\n                      <div\r\n                        onClick={() => onAddCartClicked(dishInfo.id)}\r\n                        className=\"px-2 py-1 text-center bg-blue-400 text-blue-600 hover:bg-blue-600 hover:text-white transition duration-200 rounded-md cursor-pointer\"\r\n                      >\r\n                        <FontAwesomeIcon\r\n                          icon={faCartArrowDown}\r\n                          className=\"mr-2\"\r\n                        />\r\n                        Add to Cart\r\n                      </div>\r\n                      <div className=\"text-xl font-bold \">{dishInfo.name}</div>\r\n                      <div className=\"text-xs font-thin mb-2\">\r\n                        {dishInfo.description}\r\n                      </div>\r\n                      <div className=\" text-sm\">Price: ${dishInfo.price}</div>\r\n                    </div>\r\n                  </div>\r\n                  {dishInfo.options && dishInfo.options.length > 0 && (\r\n                    <div className=\"w-full mt-2 border-t  border-gray-300 pt-2 px-2 flex flex-col\">\r\n                      <div className=\"text-xl font-semibold mb-2\">\r\n                        Select Options &amp; Choices\r\n                      </div>\r\n                      {dishInfo.options &&\r\n                        dishInfo.options.map((option, index) => (\r\n                          <div\r\n                            key={`option-${index}`}\r\n                            className=\"flex flex-col\"\r\n                          >\r\n                            <div\r\n                              className={`flex items-center border px-2 py-1 cursor-pointer rounded-lg mb-2 ${\r\n                                hasOption(option.name)\r\n                                  ? \" border-gray-600 shadow bg-lime-200\"\r\n                                  : \"border-gray-200\"\r\n                              }`}\r\n                              onClick={() =>\r\n                                onOptionClicked(option.name, option.extra)\r\n                              }\r\n                            >\r\n                              <span>\r\n                                {option.name} -\r\n                                {option.extra === 0\r\n                                  ? \"free\"\r\n                                  : `$${option.extra}`}\r\n                              </span>\r\n                            </div>\r\n                            {option.choices && option.choices.length > 0 && (\r\n                              <div className=\"ml-4 border p-2 flex flex-col text-sm mb-2\">\r\n                                <span className=\"mb-1 font-semibold\">\r\n                                  Choose extra option\r\n                                </span>\r\n                                {option.choices &&\r\n                                  option.choices.map((choice, choiceIndex) => (\r\n                                    <div\r\n                                      key={`option-${choice}-${choiceIndex}`}\r\n                                      className={`px-2 py-1 border rounded-lg mb-1 cursor-pointer ${\r\n                                        hasChoice(option.name, choice.name)\r\n                                          ? \"border-gray-600 shadow bg-lime-200\"\r\n                                          : \"border-gray-200\"\r\n                                      }`}\r\n                                      onClick={() =>\r\n                                        onChoiceClicked(\r\n                                          option.name,\r\n                                          choice.name,\r\n                                          choice.extra\r\n                                        )\r\n                                      }\r\n                                    >\r\n                                      <div className=\"ml-2 flex items-center\">\r\n                                        <span>\r\n                                          {choice.name} -\r\n                                          {choice.extra === 0\r\n                                            ? \"free\"\r\n                                            : `$${choice.extra}`}\r\n                                        </span>\r\n                                      </div>\r\n                                    </div>\r\n                                  ))}\r\n                              </div>\r\n                            )}\r\n                          </div>\r\n                        ))}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n                <div className=\"w-full h-12 flex justify-center items-center text-white bg-lime-600 rounded-b-lg\">\r\n                  <FontAwesomeIcon icon={faCartPlus} className=\"mr-2\" />\r\n                  Total: ${totalPay}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","D:\\mystudy\\nuber_eats\\src\\pages\\restaurant\\create.restaurant.tsx",[],"D:\\mystudy\\nuber_eats\\src\\pages\\restaurant\\my.restaurants.tsx",[],"D:\\mystudy\\nuber_eats\\src\\pages\\restaurant\\create.dish.tsx",["187","188","189","190","191"],"import {\r\n  gql,\r\n  useApolloClient,\r\n  useLazyQuery,\r\n  useMutation,\r\n  useQuery,\r\n} from \"@apollo/client\";\r\nimport { faTrashAlt } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React, { useEffect, useMemo, useState } from \"react\";\r\nimport { useFieldArray, useForm } from \"react-hook-form\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { toast } from \"react-toastify\";\r\nimport { DishChoiceType, DishOptionType } from \"../../codegen/globalTypes\";\r\nimport {\r\n  MutationCreateDish,\r\n  MutationCreateDishVariables,\r\n} from \"../../codegen/MutationCreateDish\";\r\nimport { QueryDish } from \"../../codegen/QueryDish\";\r\nimport {\r\n  QueryMyRestaurant,\r\n  QueryMyRestaurant_restaurant_restaurant_dishes,\r\n  QueryMyRestaurant_restaurant_restaurant_dishes_options_choices,\r\n} from \"../../codegen/QueryMyRestaurant\";\r\nimport { FormButtonInactivable } from \"../../components/form-button-inactivable\";\r\nimport { HelmetOnlyTitle } from \"../../components/helmet.onlytitle\";\r\nimport { DISH_FRAGMENT } from \"../../fragments\";\r\nimport { BASE_URL } from \"../../gloabl.constant\";\r\nimport { GQL_MYRESTAURANT } from \"./my.restaurant\";\r\n\r\nconst GQL_CREATE_DISH = gql`\r\n  mutation MutationCreateDish($input: CreateDishInput!) {\r\n    createDish(input: $input) {\r\n      ok\r\n      error\r\n      dish {\r\n        ...DishPart\r\n      }\r\n    }\r\n  }\r\n  ${DISH_FRAGMENT}\r\n`;\r\n\r\nconst GQL_DISH = gql`\r\n  query QueryDish($id: Int!) {\r\n    getDish(dishId: $id) {\r\n      ok\r\n      error\r\n      dish {\r\n        ...DishPart\r\n      }\r\n    }\r\n  }\r\n  ${DISH_FRAGMENT}\r\n`;\r\n\r\ninterface IChoice {\r\n  name: string;\r\n  extra: number;\r\n  isRemoved: boolean;\r\n}\r\n\r\ninterface IOptions {\r\n  name: string;\r\n  extra: number;\r\n  choice?: IChoice[] | null;\r\n}\r\ninterface ICreateDishForm {\r\n  name: string;\r\n  price: number;\r\n  description: string;\r\n  file: FileList;\r\n  options: IOptions[];\r\n}\r\n\r\ninterface IParams {\r\n  restaurantId: string;\r\n  dishId: string;\r\n}\r\n\r\ninterface IChoiceInfo {\r\n  index: string;\r\n  isExist: boolean;\r\n  choice: IChoice;\r\n}\r\n\r\ninterface IChoiceInput {\r\n  optionIndex: number;\r\n  choicesInfo: IChoiceInfo[] | null;\r\n}\r\n\r\ninterface INestedChoice {\r\n  register: any;\r\n  control: any;\r\n  field: any;\r\n  namePrefix: any;\r\n  choices?:\r\n    | QueryMyRestaurant_restaurant_restaurant_dishes_options_choices[]\r\n    | null;\r\n}\r\n\r\nconst NestedChoice: React.FC<INestedChoice> = ({\r\n  register,\r\n  control,\r\n  field,\r\n  choices,\r\n  namePrefix,\r\n}) => {\r\n  const { fields, append, remove } = useFieldArray({\r\n    control,\r\n    name: namePrefix,\r\n  });\r\n\r\n  useMemo(\r\n    () =>\r\n      choices?.forEach((choice) =>\r\n        append({ name: choice.name, extra: choice.extra })\r\n      ),\r\n    [choices]\r\n  );\r\n\r\n  return (\r\n    <div className=\"w-full\">\r\n      <span\r\n        className=\"cursor-pointer text-xs py-1 px-2 bg-lime-300 text-lime-600 rounded-md hover:bg-lime-600 hover:text-lime-300 transition duration-200 mr-4\"\r\n        onClick={() => append({ name: \"\", extra: 0 })}\r\n      >\r\n        Add choice\r\n      </span>\r\n      {fields.map((choice, choiceIndex) => (\r\n        <div key={choice.id} className=\"flex justify-around items-center mt-2\">\r\n          <div className=\"w-1/6\">\r\n            <span>Choice #{choiceIndex + 1}</span>\r\n          </div>\r\n          <div className=\"w-2/6 mr-3\">\r\n            <input\r\n              className=\"auth__form_input\"\r\n              type=\"text\"\r\n              name={`${namePrefix}[${choiceIndex}].name`}\r\n              placeholder=\"Name\"\r\n              defaultValue={`${choice.name}`}\r\n              ref={register({ required: true })}\r\n            />\r\n          </div>\r\n          <div className=\" w-2/6\">\r\n            <input\r\n              className=\"auth__form_input\"\r\n              type=\"number\"\r\n              name={`${namePrefix}[${choiceIndex}].extra`}\r\n              placeholder=\"Extra\"\r\n              defaultValue={`${choice.extra}`}\r\n              ref={register({ required: true, min: 0 })}\r\n            />\r\n          </div>\r\n          <div\r\n            onClick={() => remove(choiceIndex)}\r\n            className=\"cursor-pointer text-xs px-2 py-1 text-center bg-red-300 text-red-600 rounded-md hover:bg-red-600 hover:text-red-300 transition duration-200 ml-3\"\r\n          >\r\n            <FontAwesomeIcon icon={faTrashAlt} />\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const CreateDish: React.FC = () => {\r\n  const client = useApolloClient();\r\n  const history = useHistory();\r\n\r\n  const { restaurantId, dishId } = useParams<IParams>();\r\n\r\n  const [\r\n    updateDish,\r\n    { data: dishData, loading: dishLoading },\r\n  ] = useLazyQuery<QueryDish>(GQL_DISH, {\r\n    onCompleted: (data: QueryDish) => {\r\n      setValue(\"name\", dishData.getDish.dish.name);\r\n      setValue(\"description\", dishData.getDish.dish.description);\r\n      setValue(\"price\", dishData.getDish.dish.price);\r\n      dishData.getDish.dish.options.forEach((option) => {\r\n        appendOption({ name: option.name, extra: option.extra });\r\n      });\r\n\r\n      console.log(dishData.getDish.dish);\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (dishId) {\r\n      updateDish({\r\n        variables: {\r\n          id: +dishId,\r\n        },\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  const [createDish, { loading, data }] = useMutation<\r\n    MutationCreateDish,\r\n    MutationCreateDishVariables\r\n  >(GQL_CREATE_DISH, {\r\n    onCompleted: (data: MutationCreateDish) => {\r\n      if (data.createDish.ok) {\r\n        const currentRestaurant = client.readQuery<QueryMyRestaurant>({\r\n          query: GQL_MYRESTAURANT,\r\n          variables: {\r\n            id: +restaurantId,\r\n          },\r\n        });\r\n        let dishes: QueryMyRestaurant_restaurant_restaurant_dishes[] = [];\r\n        if (currentRestaurant?.restaurant.restaurant?.dishes)\r\n          dishes = currentRestaurant?.restaurant.restaurant?.dishes;\r\n        client.writeQuery({\r\n          query: GQL_MYRESTAURANT,\r\n          data: {\r\n            restaurant: {\r\n              ...currentRestaurant?.restaurant,\r\n              restaurant: {\r\n                ...currentRestaurant?.restaurant.restaurant,\r\n                dishes: [data.createDish.dish, ...dishes],\r\n              },\r\n            },\r\n          },\r\n          variables: {\r\n            id: +restaurantId,\r\n          },\r\n        });\r\n        toast.success(\"Dish successfully made.\");\r\n        history.goBack();\r\n      } else {\r\n        toast.error(\r\n          `While creating menu, an error occured. Message: ${data.createDish.error}`\r\n        );\r\n      }\r\n    },\r\n  });\r\n  const {\r\n    register,\r\n    formState,\r\n    handleSubmit,\r\n    getValues,\r\n    setValue,\r\n    control,\r\n    errors,\r\n  } = useForm<ICreateDishForm>({\r\n    mode: \"onChange\",\r\n  });\r\n  const {\r\n    fields: optionFields,\r\n    append: appendOption,\r\n    remove: removeOption,\r\n  } = useFieldArray({\r\n    control,\r\n    name: \"options\",\r\n  });\r\n\r\n  const onSubmit = async () => {\r\n    try {\r\n      const { name, price, description, file, options } = getValues();\r\n      const dishOptions: DishOptionType[] = [];\r\n      const actualFile = file[0];\r\n      const formBody = new FormData();\r\n\r\n      formBody.append(\"file\", actualFile);\r\n\r\n      options?.forEach((option) => {\r\n        const dishChoices: DishChoiceType[] | null = option?.choice ? [] : null;\r\n\r\n        option?.choice?.forEach((choice) => {\r\n          dishChoices?.push({\r\n            name: choice.name,\r\n            extra: +choice.extra,\r\n          });\r\n        });\r\n\r\n        dishOptions.push({\r\n          name: option.name,\r\n          extra: +option.extra,\r\n          choices: dishChoices,\r\n        });\r\n      });\r\n\r\n      const { url: photo } = await (\r\n        await fetch(`https://${BASE_URL}/upload/`, {\r\n          method: \"POST\",\r\n          body: formBody,\r\n        })\r\n      ).json();\r\n      await createDish({\r\n        variables: {\r\n          input: {\r\n            name,\r\n            description,\r\n            price: +price,\r\n            photo,\r\n            restaurantId: +restaurantId,\r\n            options: dishOptions,\r\n          },\r\n        },\r\n      });\r\n\r\n      history.goBack();\r\n    } catch (error) {\r\n      toast.error(\r\n        `Some error while creating dish with error: ${error.message}`\r\n      );\r\n      history.push(\"/\");\r\n    }\r\n  };\r\n\r\n  const onAddClicked = () => {\r\n    appendOption({ value: \"afaf\" });\r\n  };\r\n  const onDeleteClicked = (index) => {\r\n    // @ts-ignore\r\n    removeOption(index);\r\n  };\r\n\r\n  if (dishId && dishLoading) {\r\n    return (\r\n      <div className=\"layout__container flex justify-center items-center text-2xl\">\r\n        <HelmetOnlyTitle title=\"Creating dish\" />\r\n        Loading...\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"layout__container\">\r\n      <HelmetOnlyTitle title=\"Creating dish\" />\r\n      <h1 className=\"text-2xl font-semibold my-8\">\r\n        {dishData ? \"Update Dish\" : \"Create Dish\"}\r\n      </h1>\r\n      {/* Main form start. \r\n          Must implment double nested input.\r\n          Ex) Dish > Choices \r\n      */}\r\n      <form\r\n        className=\"auth__form\"\r\n        onSubmit={handleSubmit(onSubmit)}\r\n        encType=\"multipart/form-data\"\r\n      >\r\n        <p className=\"text-xl italic text-black mb-2\">\r\n          Write dish information here.(Many bugs are here. To be fixed.)\r\n        </p>\r\n        {/* Dish information. Name, Price, Description */}\r\n        <div className=\"auth__input_wrapper\">\r\n          <input\r\n            className=\"auth__form_input\"\r\n            type=\"text\"\r\n            placeholder=\"Name\"\r\n            name=\"name\"\r\n            ref={register({ required: \"Name is required\" })}\r\n          />\r\n        </div>\r\n        <div className=\"auth__input_wrapper\">\r\n          <input\r\n            className=\"auth__form_input\"\r\n            type=\"number\"\r\n            placeholder=\"Price\"\r\n            name=\"price\"\r\n            ref={register({\r\n              required: \"Price is required\",\r\n              min: { value: 0, message: \"Price must be over 0\" },\r\n            })}\r\n          />\r\n        </div>\r\n        <div className=\"auth__input_wrapper\">\r\n          <input\r\n            className={`auth__form_input ${\r\n              errors.description && \"border-red-500\"\r\n            }`}\r\n            type=\"text\"\r\n            placeholder=\"Description\"\r\n            name=\"description\"\r\n            ref={register({\r\n              required: \"Category is required\",\r\n              minLength: 5,\r\n            })}\r\n          />\r\n          {errors.description && (\r\n            <span className=\"auth__form_error\">\r\n              {errors.description.message}\r\n            </span>\r\n          )}\r\n        </div>\r\n        <div className=\"auth__input_wrapper\">\r\n          <label htmlFor=\"file\" className=\"text-md italic self-start mb-1\">\r\n            Dish image\r\n          </label>\r\n          <input\r\n            className=\"auth__form_input\"\r\n            id=\"file\"\r\n            type=\"file\"\r\n            name=\"file\"\r\n            accept=\"image/*\"\r\n            ref={register({ required: true })}\r\n          />\r\n        </div>\r\n        {/* Starting Option part. Must be dynamic field. It is implemented by React Form Hook useFieldArray and it is easy to use. */}\r\n        <div className=\"border-t border-gray-600 mt-2 pt-2\">\r\n          <p className=\"text-xl italic\">Dish options</p>\r\n          <span\r\n            onClick={() => onAddClicked()}\r\n            className=\"auth__form_button inline-block mb-2 cursor-pointer\"\r\n          >\r\n            Add Option\r\n          </span>\r\n          <div className=\"mb-2\">\r\n            {optionFields.length === 0 ? (\r\n              <div>\r\n                <p className=\"text-sm font-thin text-black\">\r\n                  No options now. Click above button if you need one.\r\n                </p>\r\n              </div>\r\n            ) : (\r\n              <div>\r\n                {/* useFieldArray() returns fields, append, remove, so on. */}\r\n                {optionFields.map((field, optionIndex) => (\r\n                  <div\r\n                    key={field.id}\r\n                    className=\"border border-gray-500 p-5 mb-2\"\r\n                  >\r\n                    <span className=\"inline-block mb-2 mr-4\">\r\n                      {`#${optionIndex + 1} Option`}\r\n                    </span>\r\n                    <span\r\n                      className=\"cursor-pointer text-xs py-1 px-2 bg-red-300 text-red-600 rounded-md hover:bg-red-600 hover:text-red-300 transition duration-200\"\r\n                      onClick={() => onDeleteClicked(optionIndex)}\r\n                    >\r\n                      Delete me\r\n                    </span>\r\n                    <div className=\"flex justify-around\">\r\n                      <div className=\"auth__input_wrapper w-full mr-3\">\r\n                        <input\r\n                          className=\"auth__form_input\"\r\n                          type=\"text\"\r\n                          name={`options[${optionIndex}].name`}\r\n                          defaultValue={`${field.name}`}\r\n                          placeholder=\"Name\"\r\n                          ref={register({ required: true })}\r\n                        />\r\n                      </div>\r\n                      <div className=\"auth__input_wrapper w-full\">\r\n                        <input\r\n                          className=\"auth__form_input\"\r\n                          type=\"number\"\r\n                          name={`options[${optionIndex}].extra`}\r\n                          defaultValue={`${field.extra}`}\r\n                          placeholder=\"Extra\"\r\n                          ref={register({ required: true, min: 0 })}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                    {/* Double nested dynamic field for options->choice. Not using useArrayField.. \r\n                    in fact cannot use for double nested dynamic field.. */}\r\n                    <div className=\"flex flex-col justify-center items-start w-2/3\">\r\n                      <NestedChoice\r\n                        key={`options[${optionIndex}]`}\r\n                        register={register}\r\n                        control={control}\r\n                        field={field}\r\n                        choices={\r\n                          dishData.getDish.dish.options[optionIndex].choices\r\n                        }\r\n                        namePrefix={`options[${optionIndex}].choices`}\r\n                      />\r\n\r\n                      {/*{optionChoices.map((o) => {\r\n                        if (o.optionIndex !== optionIndex) {\r\n                          return <></>;\r\n                        } else {\r\n                          return o.choicesInfo?.map(\r\n                            (choice, choiceIndex) =>\r\n                              choice.isExist && (\r\n                                <div\r\n                                  key={`${makeChoiceString(\r\n                                    o.optionIndex,\r\n                                    choiceIndex\r\n                                  )}`}\r\n                                  className=\"flex justify-around items-center mt-2\"\r\n                                >\r\n                                  <div className=\"w-1/6\">\r\n                                    <span>Choice #{choiceIndex + 1}</span>\r\n                                  </div>\r\n                                  <div className=\"w-2/6 mr-3\">\r\n                                    <input\r\n                                      className=\"auth__form_input\"\r\n                                      type=\"text\"\r\n                                      name={`options[${optionIndex}].choice[${choiceIndex}].name`}\r\n                                      placeholder=\"Name\"\r\n                                      defaultValue=\"\"\r\n                                      ref={register({ required: true })}\r\n                                    />\r\n                                  </div>\r\n                                  <div className=\" w-2/6\">\r\n                                    <input\r\n                                      className=\"auth__form_input\"\r\n                                      type=\"number\"\r\n                                      name={`options[${optionIndex}].choice[${choiceIndex}].extra`}\r\n                                      placeholder=\"Extra\"\r\n                                      defaultValue=\"0\"\r\n                                      ref={register({ required: true, min: 0 })}\r\n                                    />\r\n                                    <input\r\n                                      type=\"checkbox\"\r\n                                      name={`options[${optionIndex}].choice[${choiceIndex}].isRemoved`}\r\n                                      defaultValue={0}\r\n                                      ref={register()}\r\n                                      hidden\r\n                                    />\r\n                                  </div>\r\n                                  <div\r\n                                    onClick={() =>\r\n                                      onRemoveChoiceClicked(\r\n                                        optionIndex,\r\n                                        choiceIndex\r\n                                      )\r\n                                    }\r\n                                    className=\"cursor-pointer text-xs px-2 py-1 text-center bg-red-300 text-red-600 rounded-md hover:bg-red-600 hover:text-red-300 transition duration-200 ml-3\"\r\n                                  >\r\n                                    <FontAwesomeIcon icon={faTrashAlt} />\r\n                                  </div>\r\n                                </div>\r\n                              )\r\n                          );\r\n                        }\r\n                      })}*/}\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <FormButtonInactivable\r\n          isActivate={formState.isValid && !formState.isSubmitting}\r\n          loading={loading}\r\n        >\r\n          {dishData ? \"Update Dish\" : \"Create Dish\"}\r\n        </FormButtonInactivable>\r\n      </form>\r\n      {data?.createDish.error && (\r\n        <p className=\"auth__form_error\">{data.createDish.error}</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","D:\\mystudy\\nuber_eats\\src\\pages\\restaurant\\my.restaurant.tsx",["192"],"import { gql, useQuery, useSubscription } from \"@apollo/client\";\r\nimport { faEdit, faHome, faTrash } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React, { useEffect } from \"react\";\r\nimport { Link, useHistory, useParams } from \"react-router-dom\";\r\nimport {\r\n  QueryMyRestaurant,\r\n  QueryMyRestaurantVariables,\r\n} from \"../../codegen/QueryMyRestaurant\";\r\nimport { DishItem } from \"../../components/dish.item\";\r\n\r\nimport {\r\n  DISH_FRAGMENT,\r\n  FULL_ORDER_FRAGMENT,\r\n  ORDER_FRAGMENT,\r\n  RESTAURANT_FRAGMENT,\r\n} from \"../../fragments\";\r\nimport {\r\n  VictoryChart,\r\n  VictoryAxis,\r\n  VictoryVoronoiContainer,\r\n  VictoryLine,\r\n  VictoryTheme,\r\n  VictoryTooltip,\r\n} from \"victory\";\r\nimport { OnPendingOrders } from \"../../codegen/OnPendingOrders\";\r\n\r\ninterface IParam {\r\n  id: string;\r\n}\r\n\r\nexport const GQL_MYRESTAURANT = gql`\r\n  query QueryMyRestaurant($id: Float!) {\r\n    restaurant(id: $id) {\r\n      ok\r\n      error\r\n      restaurant {\r\n        ...RestaurantPart\r\n        dishes {\r\n          ...DishPart\r\n        }\r\n        orders {\r\n          ...OrderPart\r\n        }\r\n      }\r\n    }\r\n  }\r\n  ${RESTAURANT_FRAGMENT}\r\n  ${DISH_FRAGMENT}\r\n  ${ORDER_FRAGMENT}\r\n`;\r\n\r\nconst GQL_PENDING_ORDERS = gql`\r\n  subscription OnPendingOrders {\r\n    pendingOrders {\r\n      ...FullOrderPart\r\n    }\r\n  }\r\n  ${FULL_ORDER_FRAGMENT}\r\n`;\r\n\r\ninterface IChartData {\r\n  x: string;\r\n  y: number;\r\n}\r\n\r\nexport const MyRestaurant = () => {\r\n  const { id } = useParams<IParam>();\r\n  let chartData: IChartData[] = [];\r\n  const { data, loading, error } = useQuery<\r\n    QueryMyRestaurant,\r\n    QueryMyRestaurantVariables\r\n  >(GQL_MYRESTAURANT, {\r\n    variables: {\r\n      id: +id,\r\n    },\r\n  });\r\n\r\n  const {\r\n    data: subscriptionData,\r\n    loading: subscriptionLoading,\r\n  } = useSubscription<OnPendingOrders>(GQL_PENDING_ORDERS);\r\n\r\n  const history = useHistory();\r\n\r\n  console.log(subscriptionLoading);\r\n\r\n  if (!subscriptionLoading && subscriptionData?.pendingOrders?.id) {\r\n    history.push(`/orders/${subscriptionData.pendingOrders.id}`);\r\n  }\r\n\r\n  if (data && !loading) {\r\n    data.restaurant?.restaurant?.orders?.forEach((order) => {\r\n      const date = new Date(order.createAt).toLocaleDateString(\"ko\");\r\n      const dateIndex = chartData.findIndex((data) => data.x === date);\r\n      if (dateIndex !== -1) {\r\n        chartData[dateIndex].y += order.totalCost ? order.totalCost : 0;\r\n      } else {\r\n        chartData.push({ x: date, y: order.totalCost ? order.totalCost : 0 });\r\n      }\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className=\"w-full flex flex-col items-center\">\r\n      {loading ? (\r\n        <div className=\"w-screen h-screen flex justify-content items-center\">\r\n          <h1>Loading...</h1>\r\n        </div>\r\n      ) : error || !data?.restaurant.ok ? (\r\n        <div className=\"w-screen h-screen flex justify-content items-center\">\r\n          <h1>Data fetching error</h1>\r\n        </div>\r\n      ) : (\r\n        <div className=\"w-full flex flex-col items-center\">\r\n          <div\r\n            className=\"w-full h-60 bg-cover bg-center flex items-center\"\r\n            style={{\r\n              backgroundImage: `url(${data?.restaurant.restaurant?.coverImage})`,\r\n            }}\r\n          >\r\n            <div className=\"sm:w-2/3 md:w-1/2 xl:w-1/3 bg-white py-4 pr-4 opacity-95\">\r\n              <h1 className=\"text-2xl pl-20 flex mb-3 \">\r\n                {data?.restaurant.restaurant?.name}\r\n              </h1>\r\n\r\n              <h4 className=\"text-sm font-light pl-20 flex mb-2 underline\">\r\n                {data?.restaurant.restaurant?.category?.name}\r\n              </h4>\r\n\r\n              <h4 className=\"text-sm font-light pl-20 flex items-center\">\r\n                <FontAwesomeIcon className=\"mr-2\" icon={faHome} />\r\n                {data?.restaurant.restaurant?.address}\r\n              </h4>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"mt-5 flex justify-start layout__container\">\r\n            <Link\r\n              to={`/my-restaurant/${id}/create-dish`}\r\n              className=\"mr-8 text-white bg-gray-800 py-3 px-10 rounded-md\"\r\n            >\r\n              Add Dish &rarr;\r\n            </Link>\r\n            <Link\r\n              to=\"\"\r\n              className=\"text-white bg-lime-700 py-3 px-10 rounded-md\"\r\n            >\r\n              Buy Promotion &rarr;\r\n            </Link>\r\n          </div>\r\n          <div className=\"mt-4 layout__container\">\r\n            {data?.restaurant?.restaurant?.dishes?.length === 0 ? (\r\n              <div>No Dishes, please create your menus.</div>\r\n            ) : (\r\n              <div className=\"layout__container grid lg:grid-cols-3 md:grid-cols-2  sm:grid-cols-1 gap-4 mt-10\">\r\n                {data?.restaurant?.restaurant?.dishes?.map((dish) => (\r\n                  <div key={dish.id} className=\"flex flex-col\">\r\n                    <DishItem\r\n                      name={dish.name}\r\n                      description={dish.description}\r\n                      photo={dish.photo}\r\n                      price={dish.price}\r\n                    />\r\n                    <div className=\"flex justify-around text-center mt-2\">\r\n                      <Link\r\n                        className=\"w-1/3 bg-lime-200 text-lime-600 rounded-md px-3 py-1 hover:text-lime-200 hover:bg-lime-600 transition duration-200\"\r\n                        to={`/my-restaurant/${id}/${dish.id}/update`}\r\n                      >\r\n                        <FontAwesomeIcon icon={faEdit} /> Edit\r\n                      </Link>\r\n                      <Link\r\n                        className=\"w-1/3 bg-red-200 text-red-600 rounded-md px-3 py-1 hover:text-red-200 hover:bg-red-600 transition duration-200\"\r\n                        to=\"\"\r\n                      >\r\n                        <FontAwesomeIcon icon={faTrash} className=\"mr-1\" />\r\n                        Remove\r\n                      </Link>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            )}\r\n          </div>\r\n          <div className=\"mt-20 mb-20\">\r\n            <h4 className=\"text-center text-2xl font-medium\">Sales</h4>\r\n            <div className=\"w-full\">\r\n              <VictoryChart\r\n                domainPadding={20}\r\n                width={window.innerWidth}\r\n                height={500}\r\n                theme={VictoryTheme.material}\r\n                containerComponent={<VictoryVoronoiContainer />}\r\n              >\r\n                <VictoryLine\r\n                  data={chartData}\r\n                  style={{ data: { strokeWidth: 5 } }}\r\n                  labels={({ datum }) => `$${datum.y}`}\r\n                  labelComponent={\r\n                    <VictoryTooltip\r\n                      style={{ fontSize: 10 }}\r\n                      renderInPortal\r\n                      dy={-20}\r\n                    />\r\n                  }\r\n                  interpolation=\"natural\"\r\n                />\r\n\r\n                <VictoryAxis\r\n                  style={{\r\n                    tickLabels: {\r\n                      fontSize: 10,\r\n                    },\r\n                  }}\r\n                />\r\n              </VictoryChart>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","D:\\mystudy\\nuber_eats\\src\\pages\\restaurant\\update.restaurant.tsx",[],"D:\\mystudy\\nuber_eats\\src\\pages\\user\\logout.tsx",[],"D:\\mystudy\\nuber_eats\\src\\pages\\driver\\dashboard.tsx",["193","194"],"import React, { useEffect, useState } from \"react\";\r\nimport GoogleMapReact from \"google-map-react\";\r\nimport googleMapReact from \"google-map-react\";\r\nimport { gql, useMutation, useSubscription } from \"@apollo/client\";\r\nimport { FULL_ORDER_FRAGMENT } from \"../../fragments\";\r\nimport { OnCookedOrders } from \"../../codegen/OnCookedOrders\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n  MutationOrderPick,\r\n  MutationOrderPickVariables,\r\n} from \"../../codegen/MutationOrderPick\";\r\nimport { OrderStatus } from \"../../codegen/globalTypes\";\r\nimport { toast } from \"react-toastify\";\r\n\r\ninterface ICoords {\r\n  lat: number;\r\n  lng: number;\r\n}\r\n\r\ninterface IDriverProps {\r\n  lat: number;\r\n  lng: number;\r\n  $hover?: any;\r\n}\r\n\r\nconst GQL_COOCKED_ORDERS = gql`\r\n  subscription OnCookedOrders {\r\n    cookedOrders {\r\n      ...FullOrderPart\r\n    }\r\n  }\r\n  ${FULL_ORDER_FRAGMENT}\r\n`;\r\n\r\nconst GQL_ORDER_PICKED = gql`\r\n  mutation MutationOrderPick($id: Float!, $status: OrderStatus!) {\r\n    updateOrder(id: $id, orderStatus: $status) {\r\n      ok\r\n      error\r\n    }\r\n  }\r\n`;\r\n\r\nconst Driver: React.FC<IDriverProps> = ({ lat, lng, $hover }) => (\r\n  <div\r\n    // @ts-ignore\r\n    lng={lng}\r\n    lat={lat}\r\n    className=\"rounded-full w-8 h-8 bg-white flex justify-center items-center\"\r\n  >\r\n    🚖\r\n  </div>\r\n);\r\n\r\nexport const DashBoard = () => {\r\n  const [driverCoords, setDriverCoords] = useState<ICoords>({ lng: 0, lat: 0 });\r\n  const [googleMap, setGoogleMap] = useState<google.maps.Map | null>(null);\r\n  const [googleMaps, setGoogleMaps] = useState<googleMapReact | null>(null);\r\n  const onSuccess = ({\r\n    coords: { latitude, longitude },\r\n  }: GeolocationPosition) => {\r\n    setDriverCoords({ lng: longitude, lat: latitude });\r\n  };\r\n  const onError = (error: GeolocationPositionError) => {};\r\n\r\n  const { data: cookedOrdersData } = useSubscription<OnCookedOrders>(\r\n    GQL_COOCKED_ORDERS\r\n  );\r\n  const history = useHistory();\r\n  const [pickOrder] = useMutation<\r\n    MutationOrderPick,\r\n    MutationOrderPickVariables\r\n  >(GQL_ORDER_PICKED, {\r\n    onCompleted: (data: MutationOrderPick) => {\r\n      if (data.updateOrder.ok) {\r\n        toast.success(\"Order picked up.\");\r\n        history.push(`/orders/${cookedOrdersData?.cookedOrders.id}`);\r\n      }\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    navigator.geolocation.watchPosition(onSuccess, onError, {\r\n      enableHighAccuracy: true,\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (googleMap && googleMaps) {\r\n      const geocoder = new google.maps.Geocoder();\r\n      geocoder.geocode(\r\n        {\r\n          location: new google.maps.LatLng(driverCoords.lat, driverCoords.lng),\r\n        },\r\n        (results, status) => {\r\n          console.log(\"status\", status);\r\n          console.log(\"results\", results);\r\n        }\r\n      );\r\n    }\r\n  }, [driverCoords.lat, driverCoords.lng]);\r\n\r\n  useEffect(() => {\r\n    if (cookedOrdersData?.cookedOrders?.id) {\r\n      onGetRouteClick();\r\n    }\r\n    return () => {};\r\n  }, [cookedOrdersData]);\r\n\r\n  const onApiLoaded = ({ map, maps }: { map: any; maps: any }) => {\r\n    setGoogleMap(map);\r\n    setGoogleMaps(maps);\r\n    map.panTo(new maps.LatLng(driverCoords.lat, driverCoords.lng));\r\n  };\r\n\r\n  const onGetRouteClick = () => {\r\n    if (googleMap) {\r\n      const directionsService = new google.maps.DirectionsService();\r\n      const directionsRenderer = new google.maps.DirectionsRenderer();\r\n      directionsRenderer.setMap(googleMap);\r\n      directionsService.route(\r\n        {\r\n          origin: {\r\n            location: new google.maps.LatLng(51.507351, -0.127758),\r\n          },\r\n          destination: {\r\n            location: new google.maps.LatLng(51.5127196, -0.1268353),\r\n          },\r\n          travelMode: google.maps.TravelMode.DRIVING,\r\n        },\r\n        (result, status) => {\r\n          console.log(result);\r\n          directionsRenderer.setDirections(result);\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"\" style={{ width: window.innerWidth, height: \"50vh\" }}>\r\n        <GoogleMapReact\r\n          defaultZoom={18}\r\n          yesIWantToUseGoogleMapApiInternals\r\n          onGoogleApiLoaded={onApiLoaded}\r\n          center={{ lng: driverCoords.lng, lat: driverCoords.lat }}\r\n          bootstrapURLKeys={{ key: \"AIzaSyBXMuO-0G-Lkxq_JDP1v9zG7VN4n2l5DdE\" }}\r\n        >\r\n          <Driver lng={driverCoords.lng} lat={driverCoords.lat} />\r\n        </GoogleMapReact>\r\n        {cookedOrdersData?.cookedOrders.restaurant ? (\r\n          <div className=\" max-w-screen-sm  mx-auto bg-white relative -top-10 shadow-lg py-8 px-5\">\r\n            <h1 className=\"text-center text-3xl font-medium\">\r\n              New Cooked order\r\n            </h1>\r\n            <h4 className=\"text-center my-3 text-2xl font-medium\">\r\n              Pick it up soon @{\" \"}\r\n              {cookedOrdersData?.cookedOrders.restaurant?.name}\r\n            </h4>\r\n            <button\r\n              className=\"auth__form_button w-full block text-center mt-5\"\r\n              onClick={async () =>\r\n                await pickOrder({\r\n                  variables: {\r\n                    id: cookedOrdersData?.cookedOrders.id,\r\n                    status: OrderStatus.Pickedup,\r\n                  },\r\n                })\r\n              }\r\n            >\r\n              Accept Challenge &rarr;\r\n            </button>\r\n          </div>\r\n        ) : (\r\n          <div className=\" max-w-screen-sm  mx-auto bg-white relative -top-10 shadow-lg py-8 px-5\">\r\n            <h1 className=\"text-center text-3xl font-medium\">No orders yet</h1>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","D:\\mystudy\\nuber_eats\\src\\utils.ts",[],"D:\\mystudy\\nuber_eats\\src\\hooks\\useQueryParam.ts",[],"D:\\mystudy\\nuber_eats\\src\\components\\helmet.onlytitle.tsx",[],"D:\\mystudy\\nuber_eats\\src\\fragments.ts",[],"D:\\mystudy\\nuber_eats\\src\\components\\form-button-inactivable.tsx",[],"D:\\mystudy\\nuber_eats\\src\\components\\dish.item.tsx",[],"D:\\mystudy\\nuber_eats\\src\\components\\restaurants.tsx",[],"D:\\mystudy\\nuber_eats\\src\\components\\loader.tsx",["195"],"import React from \"react\";\r\n\r\nenum SpinType {\r\n  default = \"default\",\r\n  tailSpin = \"tail-spin\",\r\n}\r\n\r\nexport type Spin = keyof typeof SpinType;\r\n\r\n// color tailwindcss color\r\ninterface ILoader {\r\n  size?: number; // size using tailwindcss unit.\r\n  color?: string; // web color not tailwind color\r\n  type?: Spin;\r\n}\r\n\r\nexport const Loader: React.FC<ILoader> = ({\r\n  size = 5,\r\n  color = \"#44a8db\",\r\n  type = \"default\",\r\n}) => {\r\n  return (\r\n    <>\r\n      {type === \"default\" && (\r\n        <div\r\n          className={`animate-spin w-${size} h-${size} rounded-full border-2 border-gray-200`}\r\n          style={{ borderTopColor: color }}\r\n        />\r\n      )}\r\n      {type === \"tailSpin\" && (\r\n        <img src={process.env.PUBLIC_URL + \"tail-spin.svg\"} />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","D:\\mystudy\\nuber_eats\\src\\components\\cart.icon.tsx",[],"D:\\mystudy\\nuber_eats\\src\\components\\restaurant.item.tsx",[],"D:\\mystudy\\nuber_eats\\src\\components\\categories.tsx",[],"D:\\mystudy\\nuber_eats\\src\\components\\uberlogo.tsx",[],"D:\\mystudy\\nuber_eats\\src\\components\\category.tsx",[],{"ruleId":"196","replacedBy":"197"},{"ruleId":"198","replacedBy":"199"},{"ruleId":"200","severity":1,"message":"201","line":1,"column":17,"nodeType":"202","messageId":"203","endLine":1,"endColumn":26},{"ruleId":"204","severity":1,"message":"205","line":54,"column":6,"nodeType":"206","endLine":54,"endColumn":15,"suggestions":"207"},{"ruleId":"204","severity":1,"message":"208","line":71,"column":6,"nodeType":"206","endLine":71,"endColumn":8,"suggestions":"209"},{"ruleId":"204","severity":1,"message":"210","line":105,"column":6,"nodeType":"206","endLine":105,"endColumn":12,"suggestions":"211"},{"ruleId":"200","severity":1,"message":"212","line":111,"column":9,"nodeType":"202","messageId":"203","endLine":111,"endColumn":17},{"ruleId":"200","severity":1,"message":"213","line":6,"column":3,"nodeType":"202","messageId":"203","endLine":6,"endColumn":11},{"ruleId":"200","severity":1,"message":"214","line":10,"column":37,"nodeType":"202","messageId":"203","endLine":10,"endColumn":45},{"ruleId":"200","severity":1,"message":"215","line":87,"column":11,"nodeType":"202","messageId":"203","endLine":87,"endColumn":23},{"ruleId":"204","severity":1,"message":"216","line":119,"column":5,"nodeType":"206","endLine":119,"endColumn":14,"suggestions":"217"},{"ruleId":"204","severity":1,"message":"218","line":197,"column":6,"nodeType":"206","endLine":197,"endColumn":8,"suggestions":"219"},{"ruleId":"200","severity":1,"message":"201","line":4,"column":17,"nodeType":"202","messageId":"203","endLine":4,"endColumn":26},{"ruleId":"204","severity":1,"message":"220","line":101,"column":6,"nodeType":"206","endLine":101,"endColumn":42,"suggestions":"221"},{"ruleId":"204","severity":1,"message":"222","line":108,"column":6,"nodeType":"206","endLine":108,"endColumn":24,"suggestions":"223"},{"ruleId":"224","severity":1,"message":"225","line":31,"column":9,"nodeType":"226","endLine":31,"endColumn":63},"no-native-reassign",["227"],"no-negated-in-lhs",["228"],"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history', 'queryParam', and 'queryReadyToStart'. Either include them or remove the dependency array.","ArrayExpression",["229"],"React Hook useEffect has missing dependencies: 'queryParam' and 'verifyCode'. Either include them or remove the dependency array.",["230"],"React Hook useEffect has missing dependencies: 'id' and 'subscribeToMore'. Either include them or remove the dependency array.",["231"],"'onScroll' is assigned a value but never used.","'useQuery' is defined but never used.","'useState' is defined but never used.","'IChoiceInput' is defined but never used.","React Hook useMemo has a missing dependency: 'append'. Either include it or remove the dependency array.",["232"],"React Hook useEffect has missing dependencies: 'dishId' and 'updateDish'. Either include them or remove the dependency array.",["233"],"React Hook useEffect has missing dependencies: 'googleMap' and 'googleMaps'. Either include them or remove the dependency array.",["234"],"React Hook useEffect has a missing dependency: 'onGetRouteClick'. Either include it or remove the dependency array.",["235"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"236","fix":"237"},{"desc":"238","fix":"239"},{"desc":"240","fix":"241"},{"desc":"242","fix":"243"},{"desc":"244","fix":"245"},{"desc":"246","fix":"247"},{"desc":"248","fix":"249"},"Update the dependencies array to be: [history, loading, queryParam, queryReadyToStart]",{"range":"250","text":"251"},"Update the dependencies array to be: [queryParam, verifyCode]",{"range":"252","text":"253"},"Update the dependencies array to be: [data, id, subscribeToMore]",{"range":"254","text":"255"},"Update the dependencies array to be: [append, choices]",{"range":"256","text":"257"},"Update the dependencies array to be: [dishId, updateDish]",{"range":"258","text":"259"},"Update the dependencies array to be: [driverCoords.lat, driverCoords.lng, googleMap, googleMaps]",{"range":"260","text":"261"},"Update the dependencies array to be: [cookedOrdersData, onGetRouteClick]",{"range":"262","text":"263"},[1513,1522],"[history, loading, queryParam, queryReadyToStart]",[1870,1872],"[queryParam, verifyCode]",[2507,2513],"[data, id, subscribeToMore]",[2736,2745],"[append, choices]",[5238,5240],"[dishId, updateDish]",[2802,2838],"[driverCoords.lat, driverCoords.lng, googleMap, googleMaps]",[2972,2990],"[cookedOrdersData, onGetRouteClick]"]