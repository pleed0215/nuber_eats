[{"D:\\mystudy\\nuber_eats\\src\\index.tsx":"1","D:\\mystudy\\nuber_eats\\src\\apollo.ts":"2","D:\\mystudy\\nuber_eats\\src\\reportWebVitals.ts":"3","D:\\mystudy\\nuber_eats\\src\\App.tsx":"4","D:\\mystudy\\nuber_eats\\src\\gloabl.constant.ts":"5","D:\\mystudy\\nuber_eats\\src\\routers\\logged-in-router.tsx":"6","D:\\mystudy\\nuber_eats\\src\\routers\\logged-out-router.tsx":"7","D:\\mystudy\\nuber_eats\\src\\codegen\\globalTypes.ts":"8","D:\\mystudy\\nuber_eats\\src\\hooks\\useMe.ts":"9","D:\\mystudy\\nuber_eats\\src\\components\\header.tsx":"10","D:\\mystudy\\nuber_eats\\src\\pages\\client\\restaurants.tsx":"11","D:\\mystudy\\nuber_eats\\src\\pages\\client\\restaurant.tsx":"12","D:\\mystudy\\nuber_eats\\src\\pages\\404.tsx":"13","D:\\mystudy\\nuber_eats\\src\\pages\\user\\logout.tsx":"14","D:\\mystudy\\nuber_eats\\src\\pages\\client\\search.tsx":"15","D:\\mystudy\\nuber_eats\\src\\pages\\client\\category.tsx":"16","D:\\mystudy\\nuber_eats\\src\\pages\\user\\verification.page.tsx":"17","D:\\mystudy\\nuber_eats\\src\\pages\\create-account.tsx":"18","D:\\mystudy\\nuber_eats\\src\\pages\\user\\me.page.tsx":"19","D:\\mystudy\\nuber_eats\\src\\pages\\user\\password.page.tsx":"20","D:\\mystudy\\nuber_eats\\src\\pages\\logint.tsx":"21","D:\\mystudy\\nuber_eats\\src\\utils.ts":"22","D:\\mystudy\\nuber_eats\\src\\hooks\\useQueryParam.ts":"23","D:\\mystudy\\nuber_eats\\src\\fragments.ts":"24","D:\\mystudy\\nuber_eats\\src\\components\\form-button-inactivable.tsx":"25","D:\\mystudy\\nuber_eats\\src\\components\\helmet.onlytitle.tsx":"26","D:\\mystudy\\nuber_eats\\src\\components\\restaurants.tsx":"27","D:\\mystudy\\nuber_eats\\src\\components\\uberlogo.tsx":"28","D:\\mystudy\\nuber_eats\\src\\components\\categories.tsx":"29","D:\\mystudy\\nuber_eats\\src\\components\\restaurant.item.tsx":"30","D:\\mystudy\\nuber_eats\\src\\components\\category.tsx":"31"},{"size":957,"mtime":1607646320752,"results":"32","hashOfConfig":"33"},{"size":1118,"mtime":1607646320747,"results":"34","hashOfConfig":"33"},{"size":440,"mtime":1607646320757,"results":"35","hashOfConfig":"33"},{"size":439,"mtime":1608160490203,"results":"36","hashOfConfig":"33"},{"size":42,"mtime":1608159658157,"results":"37","hashOfConfig":"33"},{"size":2081,"mtime":1608158997226,"results":"38","hashOfConfig":"33"},{"size":605,"mtime":1607674447345,"results":"39","hashOfConfig":"33"},{"size":725,"mtime":1608252790619,"results":"40","hashOfConfig":"33"},{"size":300,"mtime":1608159672428,"results":"41","hashOfConfig":"33"},{"size":1352,"mtime":1607746030082,"results":"42","hashOfConfig":"33"},{"size":3197,"mtime":1608081339816,"results":"43","hashOfConfig":"33"},{"size":2405,"mtime":1608159377845,"results":"44","hashOfConfig":"33"},{"size":671,"mtime":1607722187252,"results":"45","hashOfConfig":"33"},{"size":1035,"mtime":1607720574353,"results":"46","hashOfConfig":"33"},{"size":2009,"mtime":1608081339816,"results":"47","hashOfConfig":"33"},{"size":1582,"mtime":1608081491040,"results":"48","hashOfConfig":"33"},{"size":2590,"mtime":1607720912203,"results":"49","hashOfConfig":"33"},{"size":4837,"mtime":1608081339816,"results":"50","hashOfConfig":"33"},{"size":3902,"mtime":1607720929909,"results":"51","hashOfConfig":"33"},{"size":3272,"mtime":1607720561438,"results":"52","hashOfConfig":"33"},{"size":4298,"mtime":1608160578726,"results":"53","hashOfConfig":"33"},{"size":182,"mtime":1608159651020,"results":"54","hashOfConfig":"33"},{"size":130,"mtime":1608159697524,"results":"55","hashOfConfig":"33"},{"size":423,"mtime":1608159641937,"results":"56","hashOfConfig":"33"},{"size":379,"mtime":1607669271030,"results":"57","hashOfConfig":"33"},{"size":276,"mtime":1607720776050,"results":"58","hashOfConfig":"33"},{"size":948,"mtime":1608081339813,"results":"59","hashOfConfig":"33"},{"size":173,"mtime":1607646320750,"results":"60","hashOfConfig":"33"},{"size":705,"mtime":1608081339811,"results":"61","hashOfConfig":"33"},{"size":1074,"mtime":1608158997227,"results":"62","hashOfConfig":"33"},{"size":836,"mtime":1608081339812,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"167bfat",{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"66"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"66"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"66"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"66"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"66"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\mystudy\\nuber_eats\\src\\index.tsx",[],["132","133"],"D:\\mystudy\\nuber_eats\\src\\apollo.ts",[],"D:\\mystudy\\nuber_eats\\src\\reportWebVitals.ts",[],"D:\\mystudy\\nuber_eats\\src\\App.tsx",[],"D:\\mystudy\\nuber_eats\\src\\gloabl.constant.ts",[],"D:\\mystudy\\nuber_eats\\src\\routers\\logged-in-router.tsx",[],"D:\\mystudy\\nuber_eats\\src\\routers\\logged-out-router.tsx",[],"D:\\mystudy\\nuber_eats\\src\\codegen\\globalTypes.ts",[],"D:\\mystudy\\nuber_eats\\src\\hooks\\useMe.ts",[],"D:\\mystudy\\nuber_eats\\src\\components\\header.tsx",[],"D:\\mystudy\\nuber_eats\\src\\pages\\client\\restaurants.tsx",["134","135"],"import { gql, useQuery } from \"@apollo/client\";\r\nimport {\r\n  QueryRestaurants,\r\n  QueryRestaurantsVariables,\r\n} from \"../../codegen/QueryRestaurants\";\r\nimport React, { useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { HelmetOnlyTitle } from \"../../components/helmet.onlytitle\";\r\nimport { Categories } from \"../../components/categories\";\r\nimport { Restaurants } from \"../../components/restaurants\";\r\n\r\n// backend에 page를 Number로 주는 바람에... page type이 Float이다.. 나중에 수정해야 한다.\r\nconst GQL_RESTAURANTS = gql`\r\n  query QueryRestaurants($page: Float!) {\r\n    allCategories {\r\n      ok\r\n      error\r\n      count\r\n      categories {\r\n        id\r\n        name\r\n        image\r\n        slug\r\n        restaurants {\r\n          name\r\n        }\r\n      }\r\n    }\r\n    allRestaurants(page: $page) {\r\n      ok\r\n      error\r\n      totalPages\r\n      currentPage\r\n      countTotalItems\r\n      restaurants {\r\n        id\r\n        name\r\n        coverImage\r\n        address\r\n        isPromoted\r\n        category {\r\n          name\r\n          slug\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\ninterface ISearchForm {\r\n  searchTerm: string;\r\n}\r\n\r\nexport const RestaurantsPage = () => {\r\n  const history = useHistory();\r\n  const [page, setPage] = useState(1);\r\n  const { register, handleSubmit, getValues } = useForm<ISearchForm>();\r\n  const { data, loading, error } = useQuery<\r\n    QueryRestaurants,\r\n    QueryRestaurantsVariables\r\n  >(GQL_RESTAURANTS, { variables: { page } });\r\n\r\n  const onPrevPage = () => setPage(page > 1 ? page - 1 : 1);\r\n  const onNextPage = () => {\r\n    if (data?.allRestaurants.totalPages)\r\n      setPage(\r\n        page < data?.allRestaurants.totalPages\r\n          ? page + 1\r\n          : data?.allRestaurants.totalPages\r\n      );\r\n  };\r\n\r\n  const onSubmit = ({ searchTerm }: ISearchForm) => {\r\n    history.push({\r\n      pathname: \"/search\",\r\n      search: `?term=${searchTerm}`,\r\n    });\r\n  };\r\n\r\n  console.log(data?.allRestaurants.restaurants);\r\n\r\n  return (\r\n    <div className=\"w-full\">\r\n      <HelmetOnlyTitle title=\"Restaurants..\" />\r\n      <form\r\n        className=\"w-full py-40 flex items-center justify-center bg-gray-800\"\r\n        action=\"search\"\r\n        onSubmit={handleSubmit(onSubmit)}\r\n      >\r\n        <input\r\n          type=\"search\"\r\n          name=\"searchTerm\"\r\n          ref={register({ required: true, minLength: 3 })}\r\n          className=\"form_input w-5/12 sm:w-1/2 rounded-md\"\r\n          placeholder=\"Search restaurants...\"\r\n        />\r\n      </form>\r\n      <div className=\"layout__container flex flex-col justify-center items-center mt-10\">\r\n        {!loading && data && (\r\n          <>\r\n            <Categories categories={data?.allCategories.categories} />\r\n            <Restaurants restaurants={data?.allRestaurants.restaurants} />\r\n            <div className=\"w-40 flex justify-between\">\r\n              <button onClick={onPrevPage}>prev</button>\r\n              <span>{`${page} / ${data?.allRestaurants.totalPages}`}</span>\r\n              <button onClick={onNextPage}>next</button>\r\n            </div>\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","D:\\mystudy\\nuber_eats\\src\\pages\\client\\restaurant.tsx",[],"D:\\mystudy\\nuber_eats\\src\\pages\\404.tsx",[],"D:\\mystudy\\nuber_eats\\src\\pages\\user\\logout.tsx",[],"D:\\mystudy\\nuber_eats\\src\\pages\\client\\search.tsx",["136","137"],"import { gql, useLazyQuery } from \"@apollo/client\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n  QuerySearchByTerm,\r\n  QuerySearchByTermVariables,\r\n} from \"../../codegen/QuerySearchByTerm\";\r\nimport { HelmetOnlyTitle } from \"../../components/helmet.onlytitle\";\r\nimport { Restaurants } from \"../../components/restaurants\";\r\nimport { RESTAURANT_FRAGMENT } from \"../../fragments\";\r\nimport { useQueryParam } from \"../../hooks/useQueryParam\";\r\n\r\nconst GQL_SEARCH_BY_TERM = gql`\r\n  query QuerySearchByTerm($term: String!, $page: Int!) {\r\n    searchRestaurantByName(search: { query: $term, page: $page }) {\r\n      ok\r\n      error\r\n      totalPages\r\n      countTotalItems\r\n      restaurants {\r\n        ...RestaurantPart\r\n        category {\r\n          name\r\n          slug\r\n        }\r\n      }\r\n    }\r\n  }\r\n  ${RESTAURANT_FRAGMENT}\r\n`;\r\n\r\nexport const SearchPage: React.FC = () => {\r\n  const queryParam = useQueryParam();\r\n  const history = useHistory();\r\n  const [term, setTerm] = useState<string | null>(null);\r\n  const [queryReadyToStart, { loading, data, error }] = useLazyQuery<\r\n    QuerySearchByTerm,\r\n    QuerySearchByTermVariables\r\n  >(GQL_SEARCH_BY_TERM);\r\n\r\n  useEffect(() => {\r\n    const inputTerm = queryParam.get(\"term\");\r\n    if (!inputTerm) {\r\n      history.replace(\"/\");\r\n    } else {\r\n      queryReadyToStart({\r\n        variables: {\r\n          term: inputTerm,\r\n          page: 1,\r\n        },\r\n      });\r\n      setTerm(inputTerm);\r\n    }\r\n  }, [loading]);\r\n\r\n  return (\r\n    <div>\r\n      <HelmetOnlyTitle title={`Searching term: \"${term}\"`} />\r\n      <div className=\"w-full\">\r\n        {loading ? (\r\n          <h1>Loading...</h1>\r\n        ) : (\r\n          <Restaurants\r\n            restaurants={data?.searchRestaurantByName.restaurants}\r\n            categoryShow={true}\r\n            title={`Searching: \"${term}\" (Found: ${data?.searchRestaurantByName.countTotalItems})`}\r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","D:\\mystudy\\nuber_eats\\src\\pages\\client\\category.tsx",["138"],"import { gql, useQuery } from \"@apollo/client\";\r\nimport React from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport {\r\n  QueryCategory,\r\n  QueryCategoryVariables,\r\n} from \"../../codegen/QueryCategory\";\r\nimport { HelmetOnlyTitle } from \"../../components/helmet.onlytitle\";\r\nimport { Restaurants } from \"../../components/restaurants\";\r\n\r\nimport { CATEGORY_FRAGMENT, RESTAURANT_FRAGMENT } from \"../../fragments\";\r\n\r\ninterface IParams {\r\n  slug: string;\r\n}\r\n\r\nconst GQL_QUERY_CATEGORY = gql`\r\n  query QueryCategory($page: Int, $slug: String!) {\r\n    category(slug: $slug, page: $page) {\r\n      ok\r\n      error\r\n      totalPages\r\n      currentPage\r\n      countTotalItems\r\n      category {\r\n        ...CategoryPart\r\n      }\r\n      restaurants {\r\n        ...RestaurantPart\r\n        category {\r\n          id\r\n          name\r\n          slug\r\n        }\r\n      }\r\n    }\r\n  }\r\n  ${RESTAURANT_FRAGMENT}\r\n  ${CATEGORY_FRAGMENT}\r\n`;\r\n\r\nexport const CategoryPage = () => {\r\n  const { slug } = useParams<IParams>();\r\n  const { data, error, loading } = useQuery<\r\n    QueryCategory,\r\n    QueryCategoryVariables\r\n  >(GQL_QUERY_CATEGORY, {\r\n    variables: {\r\n      slug,\r\n    },\r\n  });\r\n\r\n  return (\r\n    <div className=\"w-full\">\r\n      <HelmetOnlyTitle title={`Category: ${data?.category.category?.name}`} />\r\n      {loading ? (\r\n        <h1>Loading...</h1>\r\n      ) : (\r\n        <Restaurants\r\n          restaurants={data?.category.restaurants}\r\n          categoryShow={false}\r\n          title={`Category: ${data?.category.category?.name}`}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","D:\\mystudy\\nuber_eats\\src\\pages\\user\\verification.page.tsx",["139"],"import { gql, useApolloClient, useMutation } from \"@apollo/client\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nimport {\r\n  MutationVerifyCode,\r\n  MutationVerifyCodeVariables,\r\n} from \"../../codegen/MutationVerifyCode\";\r\nimport { HelmetOnlyTitle } from \"../../components/helmet.onlytitle\";\r\nimport { useMe } from \"../../hooks/useMe\";\r\nimport { useQueryParam } from \"../../hooks/useQueryParam\";\r\n\r\nconst GQL_VERIFICATION = gql`\r\n  mutation MutationVerifyCode($code: String!) {\r\n    verifyCode(code: $code) {\r\n      ok\r\n      error\r\n    }\r\n  }\r\n`;\r\n\r\n/* Todo:\r\n    add sendVerification mutation on backend.\r\n*/\r\n\r\nexport const VerificationPage = () => {\r\n  const history = useHistory();\r\n  const onVerifyCompleted = (data: MutationVerifyCode) => {\r\n    const {\r\n      verifyCode: { ok },\r\n    } = data;\r\n\r\n    if (ok && userData?.me?.id) {\r\n      client.writeFragment({\r\n        id: `User:${userData?.me?.id}`,\r\n        fragment: gql`\r\n          fragment VerifiedUser on User {\r\n            verified\r\n          }\r\n        `,\r\n        data: {\r\n          verified: true,\r\n        },\r\n      });\r\n      toast.success(\"Success to comfirm your verification.\");\r\n      setTimeout(() => history.push(\"/\"), 2000);\r\n    } else {\r\n      toast.error(\"Verification of your email address is not valid.\");\r\n    }\r\n  };\r\n  const [verifyCode, { loading, data, error }] = useMutation<\r\n    MutationVerifyCode,\r\n    MutationVerifyCodeVariables\r\n  >(GQL_VERIFICATION, { onCompleted: onVerifyCompleted });\r\n\r\n  const queryParam = useQueryParam();\r\n  const client = useApolloClient();\r\n  const { data: userData } = useMe();\r\n\r\n  useEffect(() => {\r\n    const code = queryParam.get(\"code\");\r\n\r\n    if (code) {\r\n      verifyCode({\r\n        variables: {\r\n          code,\r\n        },\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"mt-52 flex flex-col items-center justify-center\">\r\n      <HelmetOnlyTitle title=\"Verifying your email address\" />\r\n      {loading ? (\r\n        <h1 className=\"text-lg mb-2 font-medium\">\r\n          Confirming your verification.. Please wait..\r\n        </h1>\r\n      ) : !error && data?.verifyCode.ok ? (\r\n        <h1 className=\"text-lg mb-2 font-medium\">\r\n          Your verification is confirmed. Please log in.\r\n        </h1>\r\n      ) : (\r\n        <div>\r\n          <h1 className=\"text-lg mb-2 font-medium\">\r\n            Couldn't confirm your email verification.\r\n          </h1>\r\n          <p>Message: {data?.verifyCode.error} </p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","D:\\mystudy\\nuber_eats\\src\\pages\\create-account.tsx",[],"D:\\mystudy\\nuber_eats\\src\\pages\\user\\me.page.tsx",[],"D:\\mystudy\\nuber_eats\\src\\pages\\user\\password.page.tsx",[],"D:\\mystudy\\nuber_eats\\src\\pages\\logint.tsx",[],"D:\\mystudy\\nuber_eats\\src\\utils.ts",["140","141"],"export const EMAIL_REGEX = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n","D:\\mystudy\\nuber_eats\\src\\hooks\\useQueryParam.ts",[],"D:\\mystudy\\nuber_eats\\src\\fragments.ts",[],"D:\\mystudy\\nuber_eats\\src\\components\\form-button-inactivable.tsx",[],"D:\\mystudy\\nuber_eats\\src\\components\\helmet.onlytitle.tsx",[],"D:\\mystudy\\nuber_eats\\src\\components\\restaurants.tsx",[],"D:\\mystudy\\nuber_eats\\src\\components\\uberlogo.tsx",[],"D:\\mystudy\\nuber_eats\\src\\components\\categories.tsx",[],"D:\\mystudy\\nuber_eats\\src\\components\\restaurant.item.tsx",[],"D:\\mystudy\\nuber_eats\\src\\components\\category.tsx",[],{"ruleId":"142","replacedBy":"143"},{"ruleId":"144","replacedBy":"145"},{"ruleId":"146","severity":1,"message":"147","line":58,"column":35,"nodeType":"148","messageId":"149","endLine":58,"endColumn":44},{"ruleId":"146","severity":1,"message":"150","line":59,"column":26,"nodeType":"148","messageId":"149","endLine":59,"endColumn":31},{"ruleId":"146","severity":1,"message":"150","line":36,"column":46,"nodeType":"148","messageId":"149","endLine":36,"endColumn":51},{"ruleId":"151","severity":1,"message":"152","line":54,"column":6,"nodeType":"153","endLine":54,"endColumn":15,"suggestions":"154"},{"ruleId":"146","severity":1,"message":"150","line":44,"column":17,"nodeType":"148","messageId":"149","endLine":44,"endColumn":22},{"ruleId":"151","severity":1,"message":"155","line":71,"column":6,"nodeType":"153","endLine":71,"endColumn":8,"suggestions":"156"},{"ruleId":"157","severity":1,"message":"158","line":1,"column":38,"nodeType":"159","messageId":"160","endLine":1,"endColumn":39,"suggestions":"161"},{"ruleId":"157","severity":1,"message":"158","line":1,"column":63,"nodeType":"159","messageId":"160","endLine":1,"endColumn":64,"suggestions":"162"},"no-native-reassign",["163"],"no-negated-in-lhs",["164"],"@typescript-eslint/no-unused-vars","'getValues' is assigned a value but never used.","Identifier","unusedVar","'error' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history', 'queryParam', and 'queryReadyToStart'. Either include them or remove the dependency array.","ArrayExpression",["165"],"React Hook useEffect has missing dependencies: 'queryParam' and 'verifyCode'. Either include them or remove the dependency array.",["166"],"no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["167","168"],["169","170"],"no-global-assign","no-unsafe-negation",{"desc":"171","fix":"172"},{"desc":"173","fix":"174"},{"messageId":"175","fix":"176","desc":"177"},{"messageId":"178","fix":"179","desc":"180"},{"messageId":"175","fix":"181","desc":"177"},{"messageId":"178","fix":"182","desc":"180"},"Update the dependencies array to be: [history, loading, queryParam, queryReadyToStart]",{"range":"183","text":"184"},"Update the dependencies array to be: [queryParam, verifyCode]",{"range":"185","text":"186"},"removeEscape",{"range":"187","text":"188"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"189","text":"190"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"191","text":"188"},{"range":"192","text":"190"},[1520,1529],"[history, loading, queryParam, queryReadyToStart]",[1870,1872],"[queryParam, verifyCode]",[37,38],"",[37,37],"\\",[62,63],[62,62]]