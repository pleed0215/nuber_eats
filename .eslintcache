[{"/Users/pleed0215/Documents/mystudy/nuber_eats/src/index.tsx":"1","/Users/pleed0215/Documents/mystudy/nuber_eats/src/reportWebVitals.ts":"2","/Users/pleed0215/Documents/mystudy/nuber_eats/src/apollo.ts":"3","/Users/pleed0215/Documents/mystudy/nuber_eats/src/App.tsx":"4","/Users/pleed0215/Documents/mystudy/nuber_eats/src/gloabl.constant.ts":"5","/Users/pleed0215/Documents/mystudy/nuber_eats/src/routers/logged-out-router.tsx":"6","/Users/pleed0215/Documents/mystudy/nuber_eats/src/routers/logged-in-router.tsx":"7","/Users/pleed0215/Documents/mystudy/nuber_eats/src/hooks/useMe.ts":"8","/Users/pleed0215/Documents/mystudy/nuber_eats/src/codegen/globalTypes.ts":"9","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/create-account.tsx":"10","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/404.tsx":"11","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/logint.tsx":"12","/Users/pleed0215/Documents/mystudy/nuber_eats/src/components/header.tsx":"13","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/client/category.tsx":"14","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/client/search.tsx":"15","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/client/restaurants.tsx":"16","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/restaurant/create.dish.tsx":"17","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/restaurant/update.restaurant.tsx":"18","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/restaurant/my.restaurant.tsx":"19","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/restaurant/my.restaurants.tsx":"20","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/user/password.page.tsx":"21","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/user/verification.page.tsx":"22","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/user/logout.tsx":"23","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/restaurant/update.dish.tsx":"24","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/user/me.page.tsx":"25","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/restaurant/create.restaurant.tsx":"26","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/client/restaurant.tsx":"27","/Users/pleed0215/Documents/mystudy/nuber_eats/src/fragments.ts":"28","/Users/pleed0215/Documents/mystudy/nuber_eats/src/utils.ts":"29","/Users/pleed0215/Documents/mystudy/nuber_eats/src/hooks/useQueryParam.ts":"30","/Users/pleed0215/Documents/mystudy/nuber_eats/src/components/uberlogo.tsx":"31","/Users/pleed0215/Documents/mystudy/nuber_eats/src/components/restaurants.tsx":"32","/Users/pleed0215/Documents/mystudy/nuber_eats/src/components/helmet.onlytitle.tsx":"33","/Users/pleed0215/Documents/mystudy/nuber_eats/src/components/categories.tsx":"34","/Users/pleed0215/Documents/mystudy/nuber_eats/src/components/form-button-inactivable.tsx":"35","/Users/pleed0215/Documents/mystudy/nuber_eats/src/components/restaurant.item.tsx":"36","/Users/pleed0215/Documents/mystudy/nuber_eats/src/components/dish.item.tsx":"37","/Users/pleed0215/Documents/mystudy/nuber_eats/src/components/cart.icon.tsx":"38","/Users/pleed0215/Documents/mystudy/nuber_eats/src/components/category.tsx":"39","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/order.tsx":"40","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/driver/dashboard.tsx":"41"},{"size":929,"mtime":1608276074484,"results":"42","hashOfConfig":"43"},{"size":425,"mtime":1608276074485,"results":"44","hashOfConfig":"43"},{"size":1890,"mtime":1609291517655,"results":"45","hashOfConfig":"43"},{"size":401,"mtime":1608344743262,"results":"46","hashOfConfig":"43"},{"size":41,"mtime":1608276074483,"results":"47","hashOfConfig":"43"},{"size":582,"mtime":1608276074482,"results":"48","hashOfConfig":"43"},{"size":4313,"mtime":1609310880285,"results":"49","hashOfConfig":"43"},{"size":283,"mtime":1608276074484,"results":"50","hashOfConfig":"43"},{"size":1879,"mtime":1609396462263,"results":"51","hashOfConfig":"43"},{"size":4686,"mtime":1608276074484,"results":"52","hashOfConfig":"43"},{"size":650,"mtime":1608276074484,"results":"53","hashOfConfig":"43"},{"size":4171,"mtime":1608444609213,"results":"54","hashOfConfig":"43"},{"size":1310,"mtime":1608276074483,"results":"55","hashOfConfig":"43"},{"size":1516,"mtime":1608346926256,"results":"56","hashOfConfig":"43"},{"size":1930,"mtime":1608346952186,"results":"57","hashOfConfig":"43"},{"size":3065,"mtime":1608346939214,"results":"58","hashOfConfig":"43"},{"size":14250,"mtime":1608958996713,"results":"59","hashOfConfig":"43"},{"size":4081,"mtime":1608958996714,"results":"60","hashOfConfig":"43"},{"size":7012,"mtime":1609305675943,"results":"61","hashOfConfig":"43"},{"size":3150,"mtime":1608785968062,"results":"62","hashOfConfig":"43"},{"size":3156,"mtime":1608276074485,"results":"63","hashOfConfig":"43"},{"size":2496,"mtime":1608276074485,"results":"64","hashOfConfig":"43"},{"size":1005,"mtime":1608958996715,"results":"65","hashOfConfig":"43"},{"size":8092,"mtime":1608958996714,"results":"66","hashOfConfig":"43"},{"size":3905,"mtime":1608450998531,"results":"67","hashOfConfig":"43"},{"size":5164,"mtime":1608511761495,"results":"68","hashOfConfig":"43"},{"size":17797,"mtime":1609292084378,"results":"69","hashOfConfig":"43"},{"size":1405,"mtime":1609208445756,"results":"70","hashOfConfig":"43"},{"size":181,"mtime":1608276074485,"results":"71","hashOfConfig":"43"},{"size":127,"mtime":1608276074484,"results":"72","hashOfConfig":"43"},{"size":167,"mtime":1608276074483,"results":"73","hashOfConfig":"43"},{"size":915,"mtime":1608276074483,"results":"74","hashOfConfig":"43"},{"size":264,"mtime":1608276074483,"results":"75","hashOfConfig":"43"},{"size":681,"mtime":1608276074483,"results":"76","hashOfConfig":"43"},{"size":363,"mtime":1608276074483,"results":"77","hashOfConfig":"43"},{"size":1120,"mtime":1608685769263,"results":"78","hashOfConfig":"43"},{"size":1052,"mtime":1608958996712,"results":"79","hashOfConfig":"43"},{"size":697,"mtime":1609110505278,"results":"80","hashOfConfig":"43"},{"size":803,"mtime":1608276074483,"results":"81","hashOfConfig":"43"},{"size":5570,"mtime":1609310496002,"results":"82","hashOfConfig":"43"},{"size":2338,"mtime":1609400579593,"results":"83","hashOfConfig":"43"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},"16nv2t4",{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"86"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"86"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"86"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"86"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"86"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"86"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"86"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"86"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"86"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"86"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"86"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/pleed0215/Documents/mystudy/nuber_eats/src/index.tsx",[],["178","179"],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/reportWebVitals.ts",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/apollo.ts",["180"],"import {\n  ApolloClient,\n  createHttpLink,\n  InMemoryCache,\n  makeVar,\n  split,\n} from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport { TOKEN_NAME } from \"./gloabl.constant\";\nimport { WebSocketLink } from \"@apollo/client/link/ws\";\nimport { SubscriptionClient } from \"subscriptions-transport-ws\";\nimport { getMainDefinition } from \"@apollo/client/utilities\";\n\nexport const getLSToken = () => localStorage.getItem(TOKEN_NAME);\n\nexport const isLoggedInVar = makeVar(Boolean(getLSToken()));\nexport const authTokenVar = makeVar(getLSToken());\n\n//const BASE_ENDPOINT = \"lednas.yoyang.io:32789/graphql\";\nconst BASE_ENDPOINT = \"my.yoyang.io:32788/graphql\";\nconst HTTP_ENDPOINT = `http://${BASE_ENDPOINT}`;\nconst WS_ENDPOINT = `ws://${BASE_ENDPOINT}`;\n\nconst httpLink = createHttpLink({\n  uri: HTTP_ENDPOINT,\n  //uri: \"http://localhost:4000/graphql\",\n});\n\nconst wsLink = new WebSocketLink({\n  uri: WS_ENDPOINT,\n  options: {\n    reconnect: true,\n    connectionParams: {\n      \"x-jwt\": authTokenVar() || \"\",\n    },\n  },\n});\n\nconst authLink = setContext((request, prevContext) => {\n  return {\n    headers: {\n      ...prevContext.headers,\n      \"x-jwt\": authTokenVar() || \"\",\n    },\n  };\n});\nconst splitLink = split(\n  ({ query }) => {\n    const definition = getMainDefinition(query);\n    return (\n      definition.kind === \"OperationDefinition\" &&\n      definition.operation === \"subscription\"\n    );\n  },\n  wsLink,\n  authLink.concat(httpLink)\n);\n\nexport const apolloClient = new ApolloClient({\n  link: splitLink,\n  cache: new InMemoryCache({\n    typePolicies: {\n      Query: {\n        fields: {\n          isLoggedIn: {\n            read(existing, options) {\n              return isLoggedInVar();\n            },\n          },\n          token: {\n            read() {\n              return authTokenVar();\n            },\n          },\n        },\n      },\n    },\n  }),\n});\n","/Users/pleed0215/Documents/mystudy/nuber_eats/src/App.tsx",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/gloabl.constant.ts",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/routers/logged-out-router.tsx",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/routers/logged-in-router.tsx",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/hooks/useMe.ts",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/codegen/globalTypes.ts",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/create-account.tsx",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/404.tsx",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/logint.tsx",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/components/header.tsx",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/client/category.tsx",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/client/search.tsx",["181"],"import { gql, useLazyQuery } from \"@apollo/client\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  QuerySearchByTerm,\n  QuerySearchByTermVariables,\n} from \"../../codegen/QuerySearchByTerm\";\nimport { HelmetOnlyTitle } from \"../../components/helmet.onlytitle\";\nimport { Restaurants } from \"../../components/restaurants\";\nimport { RESTAURANT_FRAGMENT } from \"../../fragments\";\nimport { useQueryParam } from \"../../hooks/useQueryParam\";\n\nconst GQL_SEARCH_BY_TERM = gql`\n  query QuerySearchByTerm($term: String!, $page: Int!) {\n    searchRestaurantByName(search: { query: $term, page: $page }) {\n      ok\n      error\n      totalPages\n      countTotalItems\n      restaurants {\n        ...RestaurantPart\n        category {\n          name\n          slug\n        }\n      }\n    }\n  }\n  ${RESTAURANT_FRAGMENT}\n`;\n\nexport const SearchPage: React.FC = () => {\n  const queryParam = useQueryParam();\n  const history = useHistory();\n  const [term, setTerm] = useState<string | null>(null);\n  const [queryReadyToStart, { loading, data }] = useLazyQuery<\n    QuerySearchByTerm,\n    QuerySearchByTermVariables\n  >(GQL_SEARCH_BY_TERM);\n\n  useEffect(() => {\n    const inputTerm = queryParam.get(\"term\");\n    if (!inputTerm) {\n      history.replace(\"/\");\n    } else {\n      queryReadyToStart({\n        variables: {\n          term: inputTerm,\n          page: 1,\n        },\n      });\n      setTerm(inputTerm);\n    }\n  }, [loading]);\n\n  return (\n    <div>\n      <HelmetOnlyTitle title={`Searching term: \"${term}\"`} />\n      <div className=\"w-full\">\n        {loading ? (\n          <h1>Loading...</h1>\n        ) : (\n          <Restaurants\n            restaurants={data?.searchRestaurantByName.restaurants}\n            categoryShow={true}\n            title={`Searching: \"${term}\" (Found: ${data?.searchRestaurantByName.countTotalItems})`}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/client/restaurants.tsx",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/restaurant/create.dish.tsx",["182"],"import { gql, useApolloClient, useMutation } from \"@apollo/client\";\nimport { faTrashAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { useState } from \"react\";\nimport { useFieldArray, useForm } from \"react-hook-form\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport { DishChoiceType, DishOptionType } from \"../../codegen/globalTypes\";\nimport {\n  MutationCreateDish,\n  MutationCreateDishVariables,\n} from \"../../codegen/MutationCreateDish\";\nimport {\n  QueryMyRestaurant,\n  QueryMyRestaurant_restaurant_restaurant_dishes,\n} from \"../../codegen/QueryMyRestaurant\";\nimport { FormButtonInactivable } from \"../../components/form-button-inactivable\";\nimport { HelmetOnlyTitle } from \"../../components/helmet.onlytitle\";\nimport { DISH_FRAGMENT } from \"../../fragments\";\nimport { GQL_MYRESTAURANT } from \"./my.restaurant\";\n\nconst GQL_CREATE_DISH = gql`\n  mutation MutationCreateDish($input: CreateDishInput!) {\n    createDish(input: $input) {\n      ok\n      error\n      dish {\n        ...DishPart\n      }\n    }\n  }\n  ${DISH_FRAGMENT}\n`;\n\ninterface IChoice {\n  name: string;\n  extra: number;\n}\n\ninterface IOptions {\n  name: string;\n  extra: number;\n  choice?: IChoice[] | null;\n}\ninterface ICreateDishForm {\n  name: string;\n  price: number;\n  description: string;\n  file: FileList;\n  options: IOptions[];\n}\n\ninterface IParams {\n  id: string;\n}\n\ninterface IChoiceInfo {\n  index: string;\n  isExist: boolean;\n  choice: IChoice;\n}\n\ninterface IChoiceInput {\n  optionIndex: number;\n  choicesInfo?: IChoiceInfo[] | null;\n}\n\nexport const CreateDish: React.FC = () => {\n  const client = useApolloClient();\n  const history = useHistory();\n  const [optionChoices, setOptionChoices] = useState<IChoiceInput[]>([]);\n\n  const [createDish, { loading, data, error }] = useMutation<\n    MutationCreateDish,\n    MutationCreateDishVariables\n  >(GQL_CREATE_DISH, {\n    onCompleted: (data: MutationCreateDish) => {\n      if (data.createDish.ok) {\n        const currentRestaurant = client.readQuery<QueryMyRestaurant>({\n          query: GQL_MYRESTAURANT,\n          variables: {\n            id: +restaurantId,\n          },\n        });\n        let dishes: QueryMyRestaurant_restaurant_restaurant_dishes[] = [];\n        if (currentRestaurant?.restaurant.restaurant?.dishes)\n          dishes = currentRestaurant?.restaurant.restaurant?.dishes;\n        client.writeQuery({\n          query: GQL_MYRESTAURANT,\n          data: {\n            restaurant: {\n              ...currentRestaurant?.restaurant,\n              restaurant: {\n                ...currentRestaurant?.restaurant.restaurant,\n                dishes: [data.createDish.dish, ...dishes],\n              },\n            },\n          },\n          variables: {\n            id: +restaurantId,\n          },\n        });\n        toast.success(\"Dish successfully made.\");\n        history.goBack();\n      } else {\n        toast.error(\n          `While creating menu, an error occured. Message: ${data.createDish.error}`\n        );\n      }\n    },\n  });\n  const {\n    register,\n    formState,\n    handleSubmit,\n    getValues,\n    control,\n    errors,\n  } = useForm<ICreateDishForm>({\n    mode: \"onChange\",\n  });\n  const {\n    fields: optionFields,\n    append: appendOption,\n    remove: removeOption,\n  } = useFieldArray({\n    control,\n    name: \"options\",\n  });\n\n  const { id: restaurantId } = useParams<IParams>();\n  const onSubmit = async () => {\n    try {\n      const { name, price, description, file, options } = getValues();\n      const dishOptions: DishOptionType[] = [];\n      const actualFile = file[0];\n      const formBody = new FormData();\n      formBody.append(\"file\", actualFile);\n      console.log(\"option\", options);\n      options?.forEach((option) => {\n        const dishChoices: DishChoiceType[] | null = option?.choice ? [] : null;\n\n        option?.choice?.forEach((choice) => {\n          dishChoices?.push({\n            name: choice.name,\n            extra: +choice.extra,\n          });\n        });\n\n        dishOptions.push({\n          name: option.name,\n          extra: +option.extra,\n          choices: dishChoices,\n        });\n      });\n      const { url: photo } = await (\n        await fetch(`http://lednas.synology.me:32789/upload/`, {\n          method: \"POST\",\n          body: formBody,\n        })\n      ).json();\n      console.log(\"dishoption\", dishOptions);\n      await createDish({\n        variables: {\n          input: {\n            name,\n            description,\n            price: +price,\n            photo,\n            restaurantId: +restaurantId,\n            options: dishOptions,\n          },\n        },\n      });\n\n      history.goBack();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const onAddClicked = () => {\n    appendOption({\n      value: \"\",\n    });\n  };\n  const onDeleteClicked = (index) => {\n    // @ts-ignore\n    removeOption(index);\n  };\n  const makeChoiceString = (index, choiceIndex) =>\n    `${index}-${choiceIndex} choice`;\n  const onAddChoiceClicked = (index) => {\n    const arrayIndex = optionChoices.findIndex(\n      (choice) => choice.optionIndex === index\n    );\n\n    if (arrayIndex !== -1) {\n      optionChoices[arrayIndex]?.choicesInfo?.push({\n        index: makeChoiceString(\n          index,\n          optionChoices[arrayIndex]?.choicesInfo?.length\n        ),\n        isExist: true,\n        choice: { name: \"\", extra: 0 },\n      });\n      console.log(optionChoices);\n      setOptionChoices([...optionChoices]);\n    } else {\n      setOptionChoices((current) => [\n        ...current,\n        {\n          optionIndex: index,\n          choicesInfo: [\n            {\n              index: makeChoiceString(index, 0),\n              isExist: true,\n              choice: { name: \"\", extra: 0 },\n            },\n          ],\n        },\n      ]);\n    }\n  };\n\n  const onRemoveChoiceClicked = (index, choiceIndex) => {\n    const arrayIndex = optionChoices.findIndex(\n      (choice) => choice.optionIndex === index\n    );\n\n    if (arrayIndex !== -1) {\n      optionChoices[arrayIndex].choicesInfo = optionChoices[\n        arrayIndex\n      ]?.choicesInfo?.filter((choice) => {\n        return choice.index !== makeChoiceString(index, choiceIndex);\n      });\n      //optionChoices[arrayIndex].choicesInfo?.forEach(choiceIndex);\n      setOptionChoices([...optionChoices]);\n    }\n  };\n\n  return (\n    <div className=\"layout__container\">\n      <HelmetOnlyTitle title=\"Creating dish\" />\n      <h1 className=\"text-2xl font-semibold my-8\">Create Dish</h1>\n      <form\n        className=\"auth__form\"\n        onSubmit={handleSubmit(onSubmit)}\n        encType=\"multipart/form-data\"\n      >\n        <p className=\"text-xl italic text-black mb-2\">\n          Write dish information here.\n        </p>\n        <div className=\"auth__input_wrapper\">\n          <input\n            className=\"auth__form_input\"\n            type=\"text\"\n            placeholder=\"Name\"\n            name=\"name\"\n            ref={register({ required: \"Name is required\" })}\n          />\n        </div>\n        <div className=\"auth__input_wrapper\">\n          <input\n            className=\"auth__form_input\"\n            type=\"number\"\n            placeholder=\"Price\"\n            name=\"price\"\n            ref={register({\n              required: \"Price is required\",\n              min: { value: 0, message: \"Price must be over 0\" },\n            })}\n          />\n        </div>\n        <div className=\"auth__input_wrapper\">\n          <input\n            className={`auth__form_input ${\n              errors.description && \"border-red-500\"\n            }`}\n            type=\"text\"\n            placeholder=\"Description\"\n            name=\"description\"\n            ref={register({\n              required: \"Category is required\",\n              minLength: 5,\n            })}\n          />\n          {errors.description && (\n            <span className=\"auth__form_error\">\n              {errors.description.message}\n            </span>\n          )}\n        </div>\n        <div className=\"auth__input_wrapper\">\n          <label htmlFor=\"file\" className=\"text-md italic self-start mb-1\">\n            Dish image\n          </label>\n          <input\n            className=\"auth__form_input\"\n            id=\"file\"\n            type=\"file\"\n            name=\"file\"\n            accept=\"image/*\"\n            ref={register({ required: true })}\n          />\n        </div>\n        <div className=\"border-t border-gray-600 mt-2 pt-2\">\n          <p className=\"text-xl italic\">Dish options</p>\n          <span\n            onClick={() => onAddClicked()}\n            className=\"auth__form_button inline-block mb-2 cursor-pointer\"\n          >\n            Add Option\n          </span>\n          <div className=\"mb-2\">\n            {optionFields.length === 0 ? (\n              <div>\n                <p className=\"text-sm font-thin text-black\">\n                  No options now. Click above button if you need one.\n                </p>\n              </div>\n            ) : (\n              <div>\n                {optionFields.map((field, index) => (\n                  <div\n                    key={field.id}\n                    className=\"border border-gray-500 p-5 mb-2\"\n                  >\n                    <span className=\"inline-block mb-2 mr-4\">\n                      {`#${index + 1} Option`}\n                    </span>\n                    <span\n                      className=\"cursor-pointer text-xs py-1 px-2 bg-lime-300 text-lime-600 rounded-md hover:bg-lime-600 hover:text-lime-300 transition duration-200 mr-4\"\n                      onClick={() => onAddChoiceClicked(index)}\n                    >\n                      Add choice\n                    </span>\n                    <span\n                      className=\"cursor-pointer text-xs py-1 px-2 bg-red-300 text-red-600 rounded-md hover:bg-red-600 hover:text-red-300 transition duration-200\"\n                      onClick={() => onDeleteClicked(index)}\n                    >\n                      Delete me\n                    </span>\n                    <div className=\"flex justify-around\">\n                      <div className=\"auth__input_wrapper w-full mr-3\">\n                        <input\n                          className=\"auth__form_input\"\n                          type=\"text\"\n                          name={`options[${index}].name`}\n                          placeholder=\"Name\"\n                          ref={register({ required: true })}\n                        />\n                      </div>\n                      <div className=\"auth__input_wrapper w-full\">\n                        <input\n                          className=\"auth__form_input\"\n                          type=\"number\"\n                          name={`options[${index}].extra`}\n                          placeholder=\"Extra\"\n                          ref={register({ required: true, min: 0 })}\n                        />\n                      </div>\n                    </div>\n                    <div className=\"flex flex-col justify-center items-start w-2/3 ml-20\">\n                      {optionChoices.map((o) => {\n                        if (o.optionIndex !== index) {\n                          return <></>;\n                        } else {\n                          return o.choicesInfo?.map(\n                            (choice, choiceIndex) =>\n                              choice.isExist && (\n                                <div\n                                  key={`${makeChoiceString(\n                                    o.optionIndex,\n                                    choiceIndex\n                                  )}`}\n                                  className=\"flex justify-around items-center mt-2\"\n                                >\n                                  <div className=\"w-1/6\">\n                                    <span>Choice #{choiceIndex + 1}</span>\n                                  </div>\n                                  <div className=\"w-2/6 mr-3\">\n                                    <input\n                                      className=\"auth__form_input\"\n                                      type=\"text\"\n                                      name={`options[${index}].choice[${choiceIndex}].name`}\n                                      placeholder=\"Name\"\n                                      defaultValue=\"\"\n                                      ref={register({ required: true })}\n                                    />\n                                  </div>\n                                  <div className=\" w-2/6\">\n                                    <input\n                                      className=\"auth__form_input\"\n                                      type=\"number\"\n                                      name={`options[${index}].choice[${choiceIndex}].extra`}\n                                      placeholder=\"Extra\"\n                                      defaultValue=\"\"\n                                      ref={register({ required: true, min: 0 })}\n                                    />\n                                  </div>\n                                  <div\n                                    onClick={() =>\n                                      onRemoveChoiceClicked(index, choiceIndex)\n                                    }\n                                    className=\"cursor-pointer text-xs px-2 py-1 text-center bg-red-300 text-red-600 rounded-md hover:bg-red-600 hover:text-red-300 transition duration-200 ml-3\"\n                                  >\n                                    <FontAwesomeIcon icon={faTrashAlt} />\n                                  </div>\n                                </div>\n                              )\n                          );\n                        }\n                      })}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n        <FormButtonInactivable\n          isActivate={formState.isValid && !formState.isSubmitting}\n          loading={loading}\n        >\n          Create Dish\n        </FormButtonInactivable>\n      </form>\n      {data?.createDish.error && (\n        <p className=\"auth__form_error\">{data.createDish.error}</p>\n      )}\n    </div>\n  );\n};\n","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/restaurant/update.restaurant.tsx",["183","184","185","186","187"],"import { gql, useApolloClient, useMutation, useQuery } from \"@apollo/client\";\nimport { reset } from \"cypress/types/sinon\";\nimport React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\n\nimport {\n  MutationUpdateRestaurant,\n  MutationUpdateRestaurantVariables,\n} from \"../../codegen/MutationUpdateRestaurant\";\nimport {\n  QueryMyRestaurant,\n  QueryMyRestaurantVariables,\n} from \"../../codegen/QueryMyRestaurant\";\nimport { QueryRestaurant } from \"../../codegen/QueryRestaurant\";\nimport { FormButtonInactivable } from \"../../components/form-button-inactivable\";\nimport { HelmetOnlyTitle } from \"../../components/helmet.onlytitle\";\nimport { RESTAURANT_FRAGMENT } from \"../../fragments\";\nimport { GQL_MYRESTAURANT } from \"./my.restaurant\";\n\nconst GQL_UPDATE_RESTAURANT = gql`\n  mutation MutationUpdateRestaurant($input: UpdateRestaurantInput!) {\n    updateRestaurant(input: $input) {\n      error\n      ok\n    }\n  }\n`;\n\ninterface IForm {\n  name: string;\n  address: string;\n  category: string;\n}\n\ninterface IParams {\n  id: string;\n}\n\nexport const UpdateRestaurant = () => {\n  const history = useHistory();\n  const { id } = useParams<IParams>();\n  const { data } = useQuery<QueryMyRestaurant, QueryMyRestaurantVariables>(\n    GQL_MYRESTAURANT,\n    {\n      variables: {\n        id: +id,\n      },\n    }\n  );\n  const {\n    register,\n    handleSubmit,\n    getValues,\n    setValue,\n    formState,\n    errors,\n  } = useForm<IForm>({\n    mode: \"onChange\",\n  });\n\n  if (data) {\n    setValue(\"name\", data?.restaurant?.restaurant?.name);\n    setValue(\"address\", data?.restaurant?.restaurant?.address);\n    setValue(\"category\", data?.restaurant?.restaurant?.category?.name);\n  }\n\n  const [updateRestaurant, { loading }] = useMutation<\n    MutationUpdateRestaurant,\n    MutationUpdateRestaurantVariables\n  >(GQL_UPDATE_RESTAURANT, {\n    onCompleted: (data: MutationUpdateRestaurant) => {\n      const { ok, error } = data.updateRestaurant;\n      if (ok) {\n        toast.success(\"Your restaurant is successfully made.\");\n      } else {\n        toast.error(\n          `Something is wrong while creating restaurant(Error: ${error})`\n        );\n      }\n      history.push(\"/\");\n    },\n    refetchQueries: [\n      {\n        query: GQL_MYRESTAURANT,\n        variables: {\n          id: +id,\n        },\n      },\n    ],\n  });\n\n  const onSubmit = async () => {\n    try {\n      const { name, address, category: categoryName } = getValues();\n\n      updateRestaurant({\n        variables: {\n          input: {\n            id: +id,\n            name,\n            address,\n            categoryName,\n          },\n        },\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <div className=\"layout__container\">\n      <HelmetOnlyTitle title=\"Creating restaurant\" />\n      <h1 className=\"text-2xl font-semibold my-8\">CreateRestaurant</h1>\n      <form\n        className=\"auth__form\"\n        onSubmit={handleSubmit(onSubmit)}\n        encType=\"multipart/form-data\"\n      >\n        <div className=\"auth__input_wrapper\">\n          <input\n            className=\"auth__form_input\"\n            type=\"text\"\n            placeholder=\"Name\"\n            name=\"name\"\n            ref={register({ required: \"Name is required\" })}\n          />\n        </div>\n        <div className=\"auth__input_wrapper\">\n          <input\n            className=\"auth__form_input\"\n            type=\"text\"\n            placeholder=\"Address\"\n            name=\"address\"\n            ref={register({ required: \"Address is required\" })}\n          />\n        </div>\n        <div className=\"auth__input_wrapper\">\n          <input\n            className=\"auth__form_input\"\n            type=\"text\"\n            placeholder=\"Category\"\n            name=\"category\"\n            ref={register({ required: \"Category is required\" })}\n          />\n        </div>\n\n        <FormButtonInactivable isActivate={formState.isValid} loading={loading}>\n          Update Restaurant\n        </FormButtonInactivable>\n      </form>\n    </div>\n  );\n};\n","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/restaurant/my.restaurant.tsx",["188","189","190"],"import { gql, useQuery, useSubscription } from \"@apollo/client\";\nimport {\n  faEdit,\n  faHome,\n  faRecycle,\n  faRemoveFormat,\n  faTrash,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { useEffect } from \"react\";\nimport { Link, useHistory, useParams } from \"react-router-dom\";\nimport {\n  QueryMyRestaurant,\n  QueryMyRestaurantVariables,\n} from \"../../codegen/QueryMyRestaurant\";\nimport { DishItem } from \"../../components/dish.item\";\n\nimport {\n  DISH_FRAGMENT,\n  FULL_ORDER_FRAGMENT,\n  ORDER_FRAGMENT,\n  RESTAURANT_FRAGMENT,\n} from \"../../fragments\";\nimport {\n  VictoryChart,\n  VictoryAxis,\n  VictoryVoronoiContainer,\n  VictoryLine,\n  VictoryTheme,\n  VictoryTooltip,\n} from \"victory\";\nimport { OnPendingOrders } from \"../../codegen/OnPendingOrders\";\n\ninterface IParam {\n  id: string;\n}\n\nexport const GQL_MYRESTAURANT = gql`\n  query QueryMyRestaurant($id: Float!) {\n    restaurant(id: $id) {\n      ok\n      error\n      restaurant {\n        ...RestaurantPart\n        dishes {\n          ...DishPart\n        }\n        orders {\n          ...OrderPart\n        }\n      }\n    }\n  }\n  ${RESTAURANT_FRAGMENT}\n  ${DISH_FRAGMENT}\n  ${ORDER_FRAGMENT}\n`;\n\nconst GQL_PENDING_ORDERS = gql`\n  subscription OnPendingOrders {\n    pendingOrders {\n      ...FullOrderPart\n    }\n  }\n  ${FULL_ORDER_FRAGMENT}\n`;\n\ninterface IChartData {\n  x: string;\n  y: number;\n}\n\nexport const MyRestaurant = () => {\n  const { id } = useParams<IParam>();\n  let chartData: IChartData[] = [];\n  const { data, loading, error } = useQuery<\n    QueryMyRestaurant,\n    QueryMyRestaurantVariables\n  >(GQL_MYRESTAURANT, {\n    variables: {\n      id: +id,\n    },\n  });\n\n  const { data: subscriptionData } = useSubscription<OnPendingOrders>(\n    GQL_PENDING_ORDERS\n  );\n  const history = useHistory();\n\n  useEffect(() => {\n    console.log(subscriptionData);\n    if (subscriptionData?.pendingOrders.id) {\n      history.push(`/orders/${subscriptionData.pendingOrders.id}`);\n    }\n  }, [subscriptionData]);\n\n  if (data && !loading) {\n    data.restaurant?.restaurant?.orders?.forEach((order) => {\n      const date = new Date(order.createAt).toLocaleDateString(\"ko\");\n      const dateIndex = chartData.findIndex((data) => data.x === date);\n      if (dateIndex !== -1) {\n        chartData[dateIndex].y += order.totalCost ? order.totalCost : 0;\n      } else {\n        chartData.push({ x: date, y: order.totalCost ? order.totalCost : 0 });\n      }\n    });\n  }\n\n  return (\n    <div className=\"w-full flex flex-col items-center\">\n      {loading ? (\n        <div className=\"w-screen h-screen flex justify-content items-center\">\n          <h1>Loading...</h1>\n        </div>\n      ) : error || !data?.restaurant.ok ? (\n        <div className=\"w-screen h-screen flex justify-content items-center\">\n          <h1>Data fetching error</h1>\n        </div>\n      ) : (\n        <div className=\"w-full flex flex-col items-center\">\n          <div\n            className=\"w-full h-60 bg-cover bg-center flex items-center\"\n            style={{\n              backgroundImage: `url(${data?.restaurant.restaurant?.coverImage})`,\n            }}\n          >\n            <div className=\"w-1/3 bg-white py-4 opacity-95\">\n              <h1 className=\"text-2xl pl-20 flex mb-3 \">\n                {data?.restaurant.restaurant?.name}\n              </h1>\n\n              <h4 className=\"text-sm font-light pl-20 flex mb-2 underline\">\n                {data?.restaurant.restaurant?.category?.name}\n              </h4>\n\n              <h4 className=\"text-sm font-light pl-20 flex items-center\">\n                <FontAwesomeIcon className=\"mr-2\" icon={faHome} />\n                {data?.restaurant.restaurant?.address}\n              </h4>\n            </div>\n          </div>\n\n          <div className=\"mt-5 flex justify-start layout__container\">\n            <Link\n              to={`/my-restaurant/${id}/create-dish`}\n              className=\"mr-8 text-white bg-gray-800 py-3 px-10 rounded-md\"\n            >\n              Add Dish &rarr;\n            </Link>\n            <Link\n              to=\"\"\n              className=\"text-white bg-lime-700 py-3 px-10 rounded-md\"\n            >\n              Buy Promotion &rarr;\n            </Link>\n          </div>\n          <div className=\"mt-4 layout__container\">\n            {data?.restaurant?.restaurant?.dishes?.length === 0 ? (\n              <div>No Dishes, please create your menus.</div>\n            ) : (\n              <div className=\"layout__container grid lg:grid-cols-3 md:grid-cols-2  sm:grid-cols-1 gap-4 mt-10\">\n                {data?.restaurant?.restaurant?.dishes?.map((dish) => (\n                  <div key={dish.id} className=\"flex flex-col\">\n                    <DishItem\n                      name={dish.name}\n                      description={dish.description}\n                      photo={dish.photo}\n                      price={dish.price}\n                    />\n                    <div className=\"flex justify-around text-center mt-2\">\n                      <Link\n                        className=\"w-1/3 bg-lime-200 text-lime-600 rounded-md px-3 py-1 hover:text-lime-200 hover:bg-lime-600 transition duration-200\"\n                        to={`/my-restaurant/${id}/${dish.id}/update`}\n                      >\n                        <FontAwesomeIcon icon={faEdit} /> Edit\n                      </Link>\n                      <Link\n                        className=\"w-1/3 bg-red-200 text-red-600 rounded-md px-3 py-1 hover:text-red-200 hover:bg-red-600 transition duration-200\"\n                        to=\"\"\n                      >\n                        <FontAwesomeIcon icon={faTrash} className=\"mr-1\" />\n                        Remove\n                      </Link>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n          <div className=\"mt-20 mb-20\">\n            <h4 className=\"text-center text-2xl font-medium\">Sales</h4>\n            <div className=\"w-full\">\n              <VictoryChart\n                domainPadding={20}\n                width={window.innerWidth}\n                height={500}\n                theme={VictoryTheme.material}\n                containerComponent={<VictoryVoronoiContainer />}\n              >\n                <VictoryLine\n                  data={chartData}\n                  style={{ data: { strokeWidth: 5 } }}\n                  labels={({ datum }) => `$${datum.y}`}\n                  labelComponent={\n                    <VictoryTooltip\n                      style={{ fontSize: 10 }}\n                      renderInPortal\n                      dy={-20}\n                    />\n                  }\n                  interpolation=\"natural\"\n                />\n\n                <VictoryAxis\n                  style={{\n                    tickLabels: {\n                      fontSize: 10,\n                    },\n                  }}\n                />\n              </VictoryChart>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/restaurant/my.restaurants.tsx",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/user/password.page.tsx",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/user/verification.page.tsx",["191"],"import { gql, useApolloClient, useMutation } from \"@apollo/client\";\nimport React, { useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\n\nimport {\n  MutationVerifyCode,\n  MutationVerifyCodeVariables,\n} from \"../../codegen/MutationVerifyCode\";\nimport { HelmetOnlyTitle } from \"../../components/helmet.onlytitle\";\nimport { useMe } from \"../../hooks/useMe\";\nimport { useQueryParam } from \"../../hooks/useQueryParam\";\n\nconst GQL_VERIFICATION = gql`\n  mutation MutationVerifyCode($code: String!) {\n    verifyCode(code: $code) {\n      ok\n      error\n    }\n  }\n`;\n\n/* Todo:\n    add sendVerification mutation on backend.\n*/\n\nexport const VerificationPage = () => {\n  const history = useHistory();\n  const onVerifyCompleted = (data: MutationVerifyCode) => {\n    const {\n      verifyCode: { ok },\n    } = data;\n\n    if (ok && userData?.me?.id) {\n      client.writeFragment({\n        id: `User:${userData?.me?.id}`,\n        fragment: gql`\n          fragment VerifiedUser on User {\n            verified\n          }\n        `,\n        data: {\n          verified: true,\n        },\n      });\n      toast.success(\"Success to comfirm your verification.\");\n      setTimeout(() => history.push(\"/\"), 2000);\n    } else {\n      toast.error(\"Verification of your email address is not valid.\");\n    }\n  };\n  const [verifyCode, { loading, data, error }] = useMutation<\n    MutationVerifyCode,\n    MutationVerifyCodeVariables\n  >(GQL_VERIFICATION, { onCompleted: onVerifyCompleted });\n\n  const queryParam = useQueryParam();\n  const client = useApolloClient();\n  const { data: userData } = useMe();\n\n  useEffect(() => {\n    const code = queryParam.get(\"code\");\n\n    if (code) {\n      verifyCode({\n        variables: {\n          code,\n        },\n      });\n    }\n  }, []);\n\n  return (\n    <div className=\"mt-52 flex flex-col items-center justify-center\">\n      <HelmetOnlyTitle title=\"Verifying your email address\" />\n      {loading ? (\n        <h1 className=\"text-lg mb-2 font-medium\">\n          Confirming your verification.. Please wait..\n        </h1>\n      ) : !error && data?.verifyCode.ok ? (\n        <h1 className=\"text-lg mb-2 font-medium\">\n          Your verification is confirmed. Please log in.\n        </h1>\n      ) : (\n        <div>\n          <h1 className=\"text-lg mb-2 font-medium\">\n            Couldn't confirm your email verification.\n          </h1>\n          <p>Message: {data?.verifyCode.error} </p>\n        </div>\n      )}\n    </div>\n  );\n};\n","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/user/logout.tsx",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/restaurant/update.dish.tsx",["192","193","194","195","196"],"import { gql, useApolloClient, useMutation, useQuery } from \"@apollo/client\";\nimport React, { useState } from \"react\";\nimport { useFieldArray, useForm } from \"react-hook-form\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport { DishChoiceType, DishOptionType } from \"../../codegen/globalTypes\";\nimport {\n  MutationUpdateDish,\n  MutationUpdateDishVariables,\n} from \"../../codegen/MutationUpdateDish\";\nimport { QueryDish } from \"../../codegen/QueryDish\";\n\nimport { FormButtonInactivable } from \"../../components/form-button-inactivable\";\nimport { HelmetOnlyTitle } from \"../../components/helmet.onlytitle\";\nimport { DISH_FRAGMENT } from \"../../fragments\";\n\nimport { GQL_MYRESTAURANT } from \"./my.restaurant\";\n\nconst GQL_UPDATE_DISH = gql`\n  mutation MutationUpdateDish(\n    $name: String\n    $price: Float\n    $description: String\n    $options: [DishOptionType!]\n    $dishId: Int!\n  ) {\n    updateDish(\n      name: $name\n      price: $price\n      description: $description\n      options: $options\n      dishId: $dishId\n    ) {\n      ok\n      error\n    }\n  }\n  ${DISH_FRAGMENT}\n`;\n\nconst GQL_DISH = gql`\n  query QueryDish($id: Int!) {\n    getDish(dishId: $id) {\n      ok\n      error\n      dish {\n        ...DishPart\n      }\n    }\n  }\n  ${DISH_FRAGMENT}\n`;\n\ninterface IChoice {\n  name: string;\n  extra: number;\n}\n\ninterface IOptions {\n  name: string;\n  extra: number;\n  choices?: IChoice[] | null;\n}\ninterface IUpdateDishForm {\n  name: string;\n  price: number;\n  description: string;\n  options: IOptions[];\n}\n\ninterface IParams {\n  restaurantId: string;\n  dishId: string;\n}\n\nexport const UpdateDish: React.FC = () => {\n  const history = useHistory();\n  const { restaurantId, dishId } = useParams<IParams>();\n\n  const { data: dishData } = useQuery<QueryDish>(GQL_DISH, {\n    variables: {\n      id: +dishId,\n    },\n  });\n\n  const [updateDish, { loading, data }] = useMutation<\n    MutationUpdateDish,\n    MutationUpdateDishVariables\n  >(GQL_UPDATE_DISH, {\n    onCompleted: (data: MutationUpdateDish) => {\n      if (data.updateDish.ok) {\n        toast.success(\"Dish successfully made.\");\n        history.goBack();\n      } else {\n        toast.error(\n          `While creating menu, an error occured. Message: ${data.updateDish.error}`\n        );\n      }\n    },\n  });\n  const {\n    register,\n    formState,\n    handleSubmit,\n    getValues,\n    setValue,\n    control,\n    errors,\n  } = useForm<IUpdateDishForm>({\n    mode: \"onChange\",\n  });\n  const {\n    fields: optionFields,\n    append: appendOption,\n    remove: removeOption,\n  } = useFieldArray({\n    control,\n    name: \"options\",\n  });\n\n  if (dishData) {\n    console.log(dishData);\n    setValue(\"name\", dishData?.getDish?.dish?.name);\n    setValue(\"price\", dishData?.getDish?.dish?.price);\n    setValue(\"description\", dishData?.getDish?.dish?.description);\n  }\n\n  const onSubmit = async () => {\n    try {\n      const { name, price, description, options } = getValues();\n      const dishOptions: DishOptionType[] = [];\n\n      options?.forEach((option) => {\n        const dishChoices: DishChoiceType[] | null = option?.choices\n          ? []\n          : null;\n\n        if (dishChoices) {\n          option?.choices?.forEach((choice) => {\n            dishChoices.push({\n              name: choice.name,\n              extra: +choice.extra,\n            });\n          });\n        }\n\n        dishOptions.push({\n          name: option.name,\n          extra: +option.extra,\n        });\n      });\n\n      await updateDish({\n        variables: {\n          name,\n          description,\n          price: +price,\n          dishId: +dishId,\n          options: dishOptions,\n        },\n      });\n      history.goBack();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const onAddClicked = () => {\n    appendOption({\n      value: \"\",\n    });\n  };\n  const onDeleteClicked = (index) => {\n    // @ts-ignore\n    removeOption(index);\n  };\n\n  return (\n    <div className=\"layout__container\">\n      <HelmetOnlyTitle title=\"Creating dish\" />\n      <h1 className=\"text-2xl font-semibold my-8\">Create Dish</h1>\n      <form\n        className=\"auth__form\"\n        onSubmit={handleSubmit(onSubmit)}\n        encType=\"multipart/form-data\"\n      >\n        <p className=\"text-xl italic text-black mb-2\">\n          Write dish information here.\n        </p>\n        <div className=\"auth__input_wrapper\">\n          <input\n            className=\"auth__form_input\"\n            type=\"text\"\n            placeholder=\"Name\"\n            name=\"name\"\n            ref={register({ required: \"Name is required\" })}\n          />\n        </div>\n        <div className=\"auth__input_wrapper\">\n          <input\n            className=\"auth__form_input\"\n            type=\"number\"\n            placeholder=\"Price\"\n            name=\"price\"\n            ref={register({\n              required: \"Price is required\",\n              min: { value: 0, message: \"Price must be over 0\" },\n            })}\n          />\n        </div>\n        <div className=\"auth__input_wrapper\">\n          <input\n            className={`auth__form_input ${\n              errors.description && \"border-red-500\"\n            }`}\n            type=\"text\"\n            placeholder=\"Description\"\n            name=\"description\"\n            ref={register({\n              required: \"Category is required\",\n              minLength: 5,\n            })}\n          />\n          {errors.description && (\n            <span className=\"auth__form_error\">\n              {errors.description.message}\n            </span>\n          )}\n        </div>\n\n        <div className=\"border-t border-gray-600 mt-2 pt-2\">\n          <p className=\"text-xl italic\">Dish options</p>\n          <span\n            onClick={() => onAddClicked()}\n            className=\"auth__form_button inline-block mb-2 cursor-pointer\"\n          >\n            Add Option\n          </span>\n          <div className=\"mb-2\">\n            {optionFields.length === 0 ? (\n              <div>\n                <p className=\"text-sm font-thin text-black\">\n                  No options now. Click above button if you need one.\n                </p>\n              </div>\n            ) : (\n              <div>\n                {optionFields.map((field, index) => (\n                  <div\n                    key={field.id}\n                    className=\"border border-gray-500 p-5 mb-2\"\n                  >\n                    <span className=\"inline-block mb-2 mr-4\">\n                      {`#${index + 1} Option`}\n                    </span>\n                    <span\n                      className=\"cursor-pointer text-xs py-1 px-2 bg-red-300 text-red-600 rounded-md hover:bg-red-600 hover:text-red-300 transition duration-200\"\n                      onClick={() => onDeleteClicked(index)}\n                    >\n                      Delete me\n                    </span>\n                    <div className=\"flex justify-around\">\n                      <div className=\"auth__input_wrapper w-full mr-3\">\n                        <input\n                          className=\"auth__form_input\"\n                          type=\"text\"\n                          name={`options[${index}].name`}\n                          placeholder=\"Name\"\n                          ref={register({ required: true })}\n                        />\n                      </div>\n                      <div className=\"auth__input_wrapper w-full\">\n                        <input\n                          className=\"auth__form_input\"\n                          type=\"number\"\n                          name={`options[${index}].extra`}\n                          placeholder=\"Extra\"\n                          ref={register({ required: true, min: 0 })}\n                        />\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n        <FormButtonInactivable\n          isActivate={formState.isValid && !formState.isSubmitting}\n          loading={loading}\n        >\n          Update Dish\n        </FormButtonInactivable>\n      </form>\n    </div>\n  );\n};\n","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/user/me.page.tsx",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/restaurant/create.restaurant.tsx",["197","198"],"import { gql, useApolloClient, useMutation } from \"@apollo/client\";\nimport React, { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useHistory } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport {\n  MutationCreateRestaurant,\n  MutationCreateRestaurantVariables,\n} from \"../../codegen/MutationCreateRestaurant\";\nimport { FormButtonInactivable } from \"../../components/form-button-inactivable\";\nimport { HelmetOnlyTitle } from \"../../components/helmet.onlytitle\";\nimport { RESTAURANT_FRAGMENT } from \"../../fragments\";\nimport { GQL_MYRESTAURANTS } from \"./my.restaurants\";\n\nconst GQL_CREATE_RESTAURANT = gql`\n  mutation MutationCreateRestaurant($input: CreateRestaurantInput!) {\n    createRestaurant(input: $input) {\n      error\n      ok\n      restaurant {\n        ...RestaurantPart\n      }\n    }\n  }\n  ${RESTAURANT_FRAGMENT}\n`;\n\ninterface IForm {\n  name: string;\n  address: string;\n  category: string;\n  file: FileList;\n}\n\nexport const CreateRestaurant = () => {\n  const history = useHistory();\n  const client = useApolloClient();\n\n  const [createRestaurant, { loading, data }] = useMutation<\n    MutationCreateRestaurant,\n    MutationCreateRestaurantVariables\n  >(GQL_CREATE_RESTAURANT, {\n    onCompleted: (data: MutationCreateRestaurant) => {\n      const { ok, error, restaurant } = data.createRestaurant;\n\n      if (ok) {\n        // faking cache\n        const currentQuery = client.readQuery({ query: GQL_MYRESTAURANTS });\n        const fakeData = currentQuery\n          ? {\n              myRestaurants: {\n                ...currentQuery?.myRestaurants,\n                count: currentQuery?.myRestaurants.count + 1,\n                restaurants: [\n                  {\n                    ...restaurant,\n                    __typename: \"Restaurant\",\n                  },\n                  ...currentQuery?.myRestaurants.restaurants,\n                ],\n              },\n            }\n          : {\n              myRestaurants: {\n                __typename: \"MyRestaurantOutput\",\n                ok: true,\n                error: null,\n                count: 1,\n                restaurants: {\n                  ...restaurant,\n                  __typename: \"Restaurant\",\n                },\n              },\n            };\n\n        client.writeQuery({\n          query: GQL_MYRESTAURANTS,\n          data: fakeData,\n        });\n\n        toast.success(\"Your restaurant is successfully made.\");\n      } else {\n        toast.error(\n          `Something is wrong while creating restaurant(Error: ${error})`\n        );\n      }\n      history.push(\"/\");\n    },\n  });\n\n  const {\n    register,\n    handleSubmit,\n    getValues,\n    formState,\n    errors,\n  } = useForm<IForm>({\n    mode: \"onChange\",\n  });\n  const onSubmit = async () => {\n    try {\n      const { name, address, category: categoryName, file } = getValues();\n      const actualFile = file[0];\n      const formBody = new FormData();\n      formBody.append(\"file\", actualFile);\n      const { url: coverImage } = await (\n        await fetch(`http://lednas.synology.me:32789/upload/`, {\n          method: \"POST\",\n          body: formBody,\n        })\n      ).json();\n      createRestaurant({\n        variables: {\n          input: {\n            name,\n            address,\n            categoryName,\n            coverImage,\n          },\n        },\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <div className=\"layout__container\">\n      <HelmetOnlyTitle title=\"Creating restaurant\" />\n      <h1 className=\"text-2xl font-semibold my-8\">CreateRestaurant</h1>\n      <form\n        className=\"auth__form\"\n        onSubmit={handleSubmit(onSubmit)}\n        encType=\"multipart/form-data\"\n      >\n        <div className=\"auth__input_wrapper\">\n          <input\n            className=\"auth__form_input\"\n            type=\"text\"\n            placeholder=\"Name\"\n            name=\"name\"\n            ref={register({ required: \"Name is required\" })}\n          />\n        </div>\n        <div className=\"auth__input_wrapper\">\n          <input\n            className=\"auth__form_input\"\n            type=\"text\"\n            placeholder=\"Address\"\n            name=\"address\"\n            ref={register({ required: \"Address is required\" })}\n          />\n        </div>\n        <div className=\"auth__input_wrapper\">\n          <input\n            className=\"auth__form_input\"\n            type=\"text\"\n            placeholder=\"Category\"\n            name=\"category\"\n            ref={register({ required: \"Category is required\" })}\n          />\n        </div>\n        <div className=\"auth__input_wrapper\">\n          <input\n            className=\"auth__form_input\"\n            type=\"file\"\n            name=\"file\"\n            accept=\"image/*\"\n            ref={register({ required: true })}\n          />\n        </div>\n        <FormButtonInactivable\n          isActivate={formState.isValid && !formState.isSubmitting}\n          loading={loading}\n        >\n          Create Restaurant\n        </FormButtonInactivable>\n      </form>\n      {data?.createRestaurant.error && (\n        <p className=\"auth__form_error\">{data.createRestaurant.error}</p>\n      )}\n    </div>\n  );\n};\n","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/client/restaurant.tsx",["199","200","201"],"import { gql, useMutation, useQuery } from \"@apollo/client\";\nimport {\n  faCalculator,\n  faCartArrowDown,\n  faCartPlus,\n  faDoorClosed,\n  faDoorOpen,\n  faHome,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { useEffect, useState } from \"react\";\nimport { Link, useHistory, useParams } from \"react-router-dom\";\nimport {\n  MutationCreateOrder,\n  MutationCreateOrderVariables,\n} from \"../../codegen/MutationCreateOrder\";\nimport {\n  QueryRestaurant,\n  QueryRestaurantVariables,\n  QueryRestaurant_restaurant_restaurant_dishes,\n} from \"../../codegen/QueryRestaurant\";\nimport { DishItem } from \"../../components/dish.item\";\nimport { DISH_FRAGMENT, RESTAURANT_FRAGMENT } from \"../../fragments\";\nimport { CreateOrderItemInput } from \"../../codegen/globalTypes\";\nimport { CartIcon } from \"../../components/cart.icon\";\nimport { toast } from \"react-toastify\";\nimport { create } from \"cypress/types/lodash\";\n\ninterface IParam {\n  id: string;\n}\n\nexport const GQL_RESTAURANT = gql`\n  query QueryRestaurant($id: Float!) {\n    restaurant(id: $id) {\n      ok\n      error\n      restaurant {\n        ...RestaurantPart\n        dishes {\n          ...DishPart\n        }\n      }\n    }\n  }\n  ${RESTAURANT_FRAGMENT}\n  ${DISH_FRAGMENT}\n`;\n\nconst GQL_ORDER = gql`\n  mutation MutationCreateOrder($input: CreateOrderInput!) {\n    createOrder(input: $input) {\n      ok\n      error\n      orderId\n    }\n  }\n`;\n\ninterface IChoice {\n  name: string;\n  extra: number;\n}\n\ninterface IOption {\n  name: string;\n  extra: number;\n  choices?: IChoice[] | null;\n}\n\nexport const Restaurant = () => {\n  const { id } = useParams<IParam>();\n  const history = useHistory();\n  const [\n    dishInfo,\n    setDishInfo,\n  ] = useState<QueryRestaurant_restaurant_restaurant_dishes | null>(null);\n  const [totalPay, setTotalPay] = useState<number>(0);\n  const [options, setOptions] = useState<IOption[]>([]);\n  const [totalOrder, setTotalOrder] = useState<CreateOrderItemInput[]>([]);\n  const [totalOrderPay, setTotalOrderPay] = useState<number>(0);\n  const [seeCart, setSeeCart] = useState<boolean>(false);\n  const [nowOrdering, setNowOrdering] = useState<boolean>(false);\n  const { data, loading, error } = useQuery<\n    QueryRestaurant,\n    QueryRestaurantVariables\n  >(GQL_RESTAURANT, {\n    variables: {\n      id: +id,\n    },\n  });\n\n  const [createOrder, { loading: loadingCreateOrder }] = useMutation<\n    MutationCreateOrder,\n    MutationCreateOrderVariables\n  >(GQL_ORDER, {\n    onCompleted: ({ createOrder: { ok, orderId } }: MutationCreateOrder) => {\n      if (ok) {\n        console.log(createOrder);\n        setNowOrdering(false);\n        setSeeCart(false);\n        toast.success(\n          \"You order was successfully made. Please wait for your delivery.\"\n        );\n        history.push(`/orders/${orderId}`);\n      }\n    },\n    onError: (error) => {\n      toast.error(\"Order failed...\");\n    },\n  });\n\n  const onDishClicked = (id) => {\n    const dish = data?.restaurant.restaurant?.dishes?.find(\n      (dish) => dish.id === id\n    );\n    if (dish !== undefined) {\n      setDishInfo(dish);\n      setTotalPay(dish.price);\n    }\n  };\n\n  const onOptionClicked = (name, extra) => {\n    const option = options?.find((option) => option.name === name);\n    if (option) {\n      let choicesPay = 0;\n      option.choices?.forEach((choice) => (choicesPay += choice.extra));\n      setOptions(options.filter((option) => option.name !== name));\n      setTotalPay((current) => current - extra - choicesPay);\n    } else {\n      if (options) {\n        setOptions([...options, { name, extra }]);\n        setTotalPay((current) => current + extra);\n      }\n    }\n  };\n\n  const onChoiceClicked = (optionName, choiceName, extra) => {\n    const optionIndex = options?.findIndex(\n      (option) => option.name === optionName\n    );\n    if (optionIndex > -1) {\n      const choiceIndex = options[optionIndex].choices?.findIndex(\n        (choice) => choice.name === choiceName\n      );\n\n      if (choiceIndex !== undefined && choiceIndex > -1) {\n        options[optionIndex].choices?.splice(choiceIndex, 1);\n\n        setOptions([...options]);\n        setTotalPay((current) => current - extra);\n      } else {\n        if (options[optionIndex].choices) {\n          options[optionIndex].choices?.push({ name: choiceName, extra });\n        } else {\n          options[optionIndex].choices = [{ name: choiceName, extra }];\n        }\n        setOptions([...options]);\n        setTotalPay((current) => current + extra);\n      }\n    }\n  };\n\n  const onOrderClosed = () => {\n    setDishInfo(null);\n    setTotalPay(0);\n    setOptions([]);\n    setNowOrdering(false);\n  };\n\n  const onAddCartClicked = (dishId) => {\n    const order: CreateOrderItemInput = {\n      dishId,\n      options: [...options],\n    };\n    setTotalOrder([...totalOrder, order]);\n    setTotalOrderPay((current) => current + totalPay);\n    onOrderClosed();\n  };\n\n  const startOrder = async () => {\n    if (nowOrdering || loadingCreateOrder) {\n      return;\n    }\n    setNowOrdering(true);\n    const ok = window.confirm(\"Are you sure order?\");\n    if (ok) {\n      await createOrder({\n        variables: {\n          input: {\n            restaurantId: +id,\n            items: totalOrder,\n          },\n        },\n      });\n    } else {\n      setNowOrdering(false);\n    }\n  };\n\n  const hasOption = (optionName) => {\n    return Boolean(options.find((option) => option.name === optionName));\n  };\n\n  const hasChoice = (optionName, choiceName) => {\n    const option = options.find((o) => o.name === optionName);\n    if (option) {\n      return Boolean(\n        option.choices?.find((choice) => choice.name === choiceName)\n      );\n    } else {\n      return false;\n    }\n  };\n\n  return (\n    <div className=\"w-full flex justify-contern\">\n      {loading ? (\n        <div className=\"w-screen h-screen flex justify-content items-center\">\n          <h1>Loading...</h1>\n        </div>\n      ) : error || !data?.restaurant.ok ? (\n        <div className=\"w-screen h-screen flex justify-content items-center\">\n          <h1>Data fetching error</h1>\n        </div>\n      ) : (\n        <div className=\"w-full flex flex-col items-center\">\n          <div\n            className=\"w-full h-80 bg-cover bg-center flex items-center\"\n            style={{\n              backgroundImage: `url(${data?.restaurant.restaurant?.coverImage})`,\n            }}\n          >\n            <div className=\"sm:w-2/3 md:w-1/2 xl:w-1/3 bg-white py-4 pr-4 opacity-95\">\n              <h1 className=\"text-2xl pl-20 flex mb-3 \">\n                {data?.restaurant.restaurant?.name}\n              </h1>\n              <Link\n                to={`/category/${data.restaurant.restaurant?.category?.slug}`}\n              >\n                <h4 className=\"text-sm font-light pl-20 flex mb-2 underline\">\n                  {data?.restaurant.restaurant?.category?.name}\n                </h4>\n              </Link>\n              <h4 className=\"text-sm font-light pl-20 flex items-center\">\n                <FontAwesomeIcon className=\"mr-2\" icon={faHome} />\n                {data?.restaurant.restaurant?.address}\n              </h4>\n            </div>\n          </div>\n          <div className=\"layout__container flex justify-start items-center pt-5\">\n            <div\n              className=\"flex items-center cursor-pointer\"\n              onClick={() => setSeeCart(totalOrder.length > 0 && true)}\n            >\n              <CartIcon n={totalOrder.length} />\n              <span className=\"ml-2 text-lg\">Total: ${totalOrderPay}</span>\n            </div>\n          </div>\n          <div className=\"text-2xl italic border-b pb-2 w-full layout__container mt-4\">\n            Choose Dishes you want to order\n          </div>\n          <div className=\"layout__container grid lg:grid-cols-3 md:grid-cols-2  sm:grid-cols-1 gap-4 mt-4\">\n            {data?.restaurant.restaurant?.dishes?.map((dish) => (\n              <div key={dish.id} onClick={() => onDishClicked(dish.id)}>\n                <DishItem\n                  name={dish.name}\n                  price={dish.price}\n                  description={dish.description}\n                  photo={dish.photo}\n                  cursorPointer\n                />\n              </div>\n            ))}\n          </div>\n          {seeCart && (\n            <div className=\"absolute inset-0 w-full h-full bg-gray-600 bg-opacity-50 z-50 flex justify-center items-center\">\n              <div className=\"flex flex-col w-1/3 min-w-max max-w-sm h-1/2 border border-gray-600 rounded-lg\">\n                <div className=\"w-full h-12 bg-lime-600 rounded-t-lg text-center flex items-center justify-between text-white text-xl font-semibold italic px-4\">\n                  <p></p>\n                  <p>Confirm orders</p>\n                  <p>\n                    <FontAwesomeIcon\n                      icon={faDoorOpen}\n                      className=\"hover:text-gray-300 cursor-pointer\"\n                      onClick={() => setSeeCart(false)}\n                    />\n                  </p>\n                </div>\n                <div className=\"h-full bg-white p-4 flex flex-col items-center justify-start overflow-y-auto\">\n                  <div className=\"text-md font-thin font-mono w-full\">\n                    Total orders\n                    <hr></hr>\n                  </div>\n                  {totalOrder.map((order, index) => {\n                    const dish = data.restaurant.restaurant?.dishes?.find(\n                      (d) => d.id === order.dishId\n                    );\n\n                    return (\n                      <div key={`confirm-order-${index}`} className=\"w-full\">\n                        <div className=\"font-mono text-sm pl-2\">\n                          {`# ${index + 1} - ${dish?.name} / $${dish?.price}`}\n                          {order.options !== null &&\n                            order.options?.map((option, optionIndex) => (\n                              <div\n                                className=\"font-mono text-sm font-thin pl-4\"\n                                key={`confir-option-${optionIndex}`}\n                              >\n                                {`@ Option ${optionIndex + 1}. ${\n                                  option?.name\n                                } - $${option?.extra}`}\n                                {option.choices &&\n                                  option.choices.length > 0 && (\n                                    <div>&lt;Additional&gt;</div>\n                                  )}\n                                {option?.choices?.map((choice, choiceIndex) => (\n                                  <div\n                                    className=\"font-mono text-sm font-thin pl-4\"\n                                    key={`confir-choice-${index}-${choiceIndex}`}\n                                  >{`* ${choiceIndex + 1}. ${choice?.name} - $${\n                                    choice?.extra\n                                  }`}</div>\n                                ))}\n                              </div>\n                            ))}\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n                <div\n                  onClick={() => startOrder()}\n                  className=\"w-full h-12 grid grid-cols-3 items-center text-white bg-lime-600 rounded-b-lg cursor-pointer hover:bg-lime-700  transition duration-200\"\n                >\n                  <p className=\"text-center\">\n                    <FontAwesomeIcon icon={faCalculator} className=\"mr-2\" />\n                    Total: ${totalOrderPay}\n                  </p>\n                  <p className=\"text-center\">\n                    {nowOrdering ? \"Ordering ....\" : \"Order Now\"}\n                  </p>\n                  <p></p>\n                </div>\n              </div>\n            </div>\n          )}\n          {dishInfo && (\n            <div className=\"absolute inset-0 w-full h-full bg-gray-600 bg-opacity-50 z-50 flex justify-center items-center\">\n              <div className=\"flex flex-col w-1/3 min-w-max max-w-sm h-1/2 border border-gray-600 rounded-lg\">\n                <div className=\"w-full h-12 bg-lime-600 rounded-t-lg text-center flex items-center justify-between text-white text-xl font-semibold italic px-4\">\n                  <p></p>\n                  <p className=\"truncate\">Order for '{dishInfo.name}'</p>\n                  <p\n                    className=\"hover:text-gray-200 cursor-pointer\"\n                    onClick={() => onOrderClosed()}\n                  >\n                    <FontAwesomeIcon icon={faDoorOpen} />\n                  </p>\n                </div>\n                <div className=\"h-full bg-white p-4 flex flex-col items-center justify-start overflow-y-auto\">\n                  <div className=\"flex w-full h-auto\">\n                    <div\n                      className=\" w-32 h-32 bg-center bg-cover rounded\"\n                      style={{ backgroundImage: `url(${dishInfo.photo})` }}\n                    ></div>\n                    <div className=\"w-full ml-2\">\n                      <div\n                        onClick={() => onAddCartClicked(dishInfo.id)}\n                        className=\"px-2 py-1 text-center bg-blue-400 text-blue-600 hover:bg-blue-600 hover:text-white transition duration-200 rounded-md cursor-pointer\"\n                      >\n                        <FontAwesomeIcon\n                          icon={faCartArrowDown}\n                          className=\"mr-2\"\n                        />\n                        Add to Cart\n                      </div>\n                      <div className=\"text-xl font-bold \">{dishInfo.name}</div>\n                      <div className=\"text-xs font-thin mb-2\">\n                        {dishInfo.description}\n                      </div>\n                      <div className=\" text-sm\">Price: ${dishInfo.price}</div>\n                    </div>\n                  </div>\n                  {dishInfo.options && dishInfo.options.length > 0 && (\n                    <div className=\"w-full mt-2 border-t  border-gray-300 pt-2 px-2 flex flex-col\">\n                      <div className=\"text-xl font-semibold mb-2\">\n                        Select Options &amp; Choices\n                      </div>\n                      {dishInfo.options &&\n                        dishInfo.options.map((option, index) => (\n                          <div\n                            key={`option-${index}`}\n                            className=\"flex flex-col\"\n                          >\n                            <div\n                              className={`flex items-center border px-2 py-1 cursor-pointer rounded-lg mb-2 ${\n                                hasOption(option.name)\n                                  ? \" border-gray-600 shadow bg-lime-200\"\n                                  : \"border-gray-200\"\n                              }`}\n                              onClick={() =>\n                                onOptionClicked(option.name, option.extra)\n                              }\n                            >\n                              <span>\n                                {option.name} -\n                                {option.extra === 0\n                                  ? \"free\"\n                                  : `$${option.extra}`}\n                              </span>\n                            </div>\n                            {option.choices && option.choices.length > 0 && (\n                              <div className=\"ml-4 border p-2 flex flex-col text-sm mb-2\">\n                                <span className=\"mb-1 font-semibold\">\n                                  Choose extra option\n                                </span>\n                                {option.choices &&\n                                  option.choices.map((choice, choiceIndex) => (\n                                    <div\n                                      key={`option-${choice}-${choiceIndex}`}\n                                      className={`px-2 py-1 border rounded-lg mb-1 cursor-pointer ${\n                                        hasChoice(option.name, choice.name)\n                                          ? \"border-gray-600 shadow bg-lime-200\"\n                                          : \"border-gray-200\"\n                                      }`}\n                                      onClick={() =>\n                                        onChoiceClicked(\n                                          option.name,\n                                          choice.name,\n                                          choice.extra\n                                        )\n                                      }\n                                    >\n                                      <div className=\"ml-2 flex items-center\">\n                                        <span>\n                                          {choice.name} -\n                                          {choice.extra === 0\n                                            ? \"free\"\n                                            : `$${choice.extra}`}\n                                        </span>\n                                      </div>\n                                    </div>\n                                  ))}\n                              </div>\n                            )}\n                          </div>\n                        ))}\n                    </div>\n                  )}\n                </div>\n                <div className=\"w-full h-12 flex justify-center items-center text-white bg-lime-600 rounded-b-lg\">\n                  <FontAwesomeIcon icon={faCartPlus} className=\"mr-2\" />\n                  Total: ${totalPay}\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n","/Users/pleed0215/Documents/mystudy/nuber_eats/src/fragments.ts",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/utils.ts",["202","203"],"export const EMAIL_REGEX = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n","/Users/pleed0215/Documents/mystudy/nuber_eats/src/hooks/useQueryParam.ts",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/components/uberlogo.tsx",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/components/restaurants.tsx",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/components/helmet.onlytitle.tsx",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/components/categories.tsx",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/components/form-button-inactivable.tsx",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/components/restaurant.item.tsx",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/components/dish.item.tsx",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/components/cart.icon.tsx",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/components/category.tsx",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/order.tsx",["204","205","206","207"],"import { gql, useMutation, useQuery, useSubscription } from \"@apollo/client\";\nimport React, { useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { OrderStatus, UserRole } from \"../codegen/globalTypes\";\nimport {\n  OnOrderUpdate,\n  OnOrderUpdateVariables,\n} from \"../codegen/OnOrderUpdate\";\nimport {\n  OwnerUpdateOrder,\n  OwnerUpdateOrderVariables,\n} from \"../codegen/OwnerUpdateOrder\";\nimport {\n  QueryOrderDetail,\n  QueryOrderDetailVariables,\n} from \"../codegen/QueryOrderDetail\";\nimport { HelmetOnlyTitle } from \"../components/helmet.onlytitle\";\nimport { FULL_ORDER_FRAGMENT } from \"../fragments\";\nimport { useMe } from \"../hooks/useMe\";\n\ninterface IParams {\n  id: string;\n}\n\nconst GQL_GET_ORDER = gql`\n  query QueryOrderDetail($id: Int!) {\n    orderDetail(id: $id) {\n      ok\n      error\n      order {\n        ...FullOrderPart\n      }\n    }\n  }\n  ${FULL_ORDER_FRAGMENT}\n`;\n\nconst GQL_ON_ORDER = gql`\n  subscription OnOrderUpdate($orderId: Float!) {\n    orderUpdate(orderId: $orderId) {\n      ...FullOrderPart\n    }\n  }\n  ${FULL_ORDER_FRAGMENT}\n`;\n\nconst GQL_UPDATE_ORDER = gql`\n  mutation OwnerUpdateOrder($id: Float!, $orderStatus: OrderStatus!) {\n    updateOrder(id: $id, orderStatus: $orderStatus) {\n      ok\n      error\n    }\n  }\n`;\n\nexport const Order = () => {\n  const { id } = useParams<IParams>();\n  const { data, loading, error, subscribeToMore } = useQuery<\n    QueryOrderDetail,\n    QueryOrderDetailVariables\n  >(GQL_GET_ORDER, {\n    variables: {\n      id: +id,\n    },\n  });\n  const { data: userData } = useMe();\n  const [updateOrder, { loading: mutationLoading }] = useMutation<\n    OwnerUpdateOrder,\n    OwnerUpdateOrderVariables\n  >(GQL_UPDATE_ORDER, {\n    refetchQueries: [\n      {\n        query: GQL_GET_ORDER,\n        variables: {\n          id: +id,\n        },\n      },\n    ],\n  });\n\n  const onButtonClick = async (status: OrderStatus) =>\n    await updateOrder({ variables: { id: +id, orderStatus: status } });\n\n  useEffect(() => {\n    subscribeToMore({\n      document: GQL_ON_ORDER,\n      variables: {\n        orderId: +id,\n      },\n      updateQuery: (\n        prev,\n        {\n          subscriptionData: { data },\n        }: { subscriptionData: { data: OnOrderUpdate } }\n      ) => {\n        if (!data) return prev;\n        return {\n          orderDetail: {\n            ...prev.orderDetail,\n            order: {\n              ...data.orderUpdate,\n            },\n          },\n        };\n      },\n    });\n    return () => {};\n  }, [data]);\n\n  return (\n    <div className=\"layout__container mt-32 flex justify-center items-center\">\n      <HelmetOnlyTitle title=\"Order Detail\" />\n      {loading ? (\n        <div className=\"w-screen h-screen flex justify-content items-center\">\n          <h1>Loading...</h1>\n        </div>\n      ) : error || !data?.orderDetail.ok ? (\n        <div className=\"w-screen h-screen flex justify-content items-center\">\n          <h1>Data fetching error</h1>\n        </div>\n      ) : (\n        <div className=\"w-1/2 max-w-lg min-w-max flex flex-col items-center border border-gray-700\">\n          <div className=\"w-full text-center py-2 mx-auto bg-gray-700 text-white\">\n            Order #{data?.orderDetail?.order?.id}\n          </div>\n          <div className=\"w-full py-3 px-4 bg-white flex flex-col items-center justify-start\">\n            <div className=\" w-full py-4 text-center text-xl border-b border-gray-700\">\n              ${data?.orderDetail?.order?.totalCost}\n            </div>\n            <div className=\" w-full py-4 border-b border-gray-700\">\n              Prepared By: {data?.orderDetail?.order?.restaurant?.name}\n            </div>\n            <div className=\" w-full py-4 border-b border-gray-700\">\n              Deliver To: {data?.orderDetail?.order?.customer?.email}\n            </div>\n            <div className=\" w-full py-4 border-b border-gray-700\">\n              driver:&nbsp;\n              {data?.orderDetail?.order?.driver === null\n                ? \"Not yet\"\n                : data?.orderDetail?.order?.driver?.email}\n            </div>\n            {userData?.me?.role === UserRole.Client && (\n              <div className=\" w-full py-8 text-center text-lime-500 font-semibold text-lg\">\n                Status:{data?.orderDetail?.order?.orderStatus}\n              </div>\n            )}\n            {userData?.me?.role === UserRole.Owner && (\n              <>\n                {data?.orderDetail?.order?.orderStatus ===\n                  OrderStatus.Pending && (\n                  <button\n                    className=\"auth__form_button\"\n                    onClick={() => onButtonClick(OrderStatus.Cooking)}\n                  >\n                    Accept Order\n                  </button>\n                )}\n                {data?.orderDetail?.order?.orderStatus ===\n                  OrderStatus.Cooking && (\n                  <button\n                    className=\"auth__form_button\"\n                    onClick={() => onButtonClick(OrderStatus.Cooked)}\n                  >\n                    Order Cooked\n                  </button>\n                )}\n                {data?.orderDetail?.order?.orderStatus !==\n                  OrderStatus.Cooking &&\n                  data?.orderDetail?.order?.orderStatus ===\n                    OrderStatus.Cooked && (\n                    <div className=\" w-full py-8 text-center text-lime-500 font-semibold text-lg\">\n                      Status:{data?.orderDetail?.order?.orderStatus}\n                    </div>\n                  )}\n              </>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/driver/dashboard.tsx",["208","209","210"],{"ruleId":"211","replacedBy":"212"},{"ruleId":"213","replacedBy":"214"},{"ruleId":"215","severity":1,"message":"216","line":11,"column":10,"nodeType":"217","messageId":"218","endLine":11,"endColumn":28},{"ruleId":"219","severity":1,"message":"220","line":54,"column":6,"nodeType":"221","endLine":54,"endColumn":15,"suggestions":"222"},{"ruleId":"215","severity":1,"message":"223","line":73,"column":39,"nodeType":"217","messageId":"218","endLine":73,"endColumn":44},{"ruleId":"215","severity":1,"message":"224","line":1,"column":15,"nodeType":"217","messageId":"218","endLine":1,"endColumn":30},{"ruleId":"215","severity":1,"message":"225","line":2,"column":10,"nodeType":"217","messageId":"218","endLine":2,"endColumn":15},{"ruleId":"215","severity":1,"message":"226","line":16,"column":10,"nodeType":"217","messageId":"218","endLine":16,"endColumn":25},{"ruleId":"215","severity":1,"message":"227","line":19,"column":10,"nodeType":"217","messageId":"218","endLine":19,"endColumn":29},{"ruleId":"215","severity":1,"message":"228","line":58,"column":5,"nodeType":"217","messageId":"218","endLine":58,"endColumn":11},{"ruleId":"215","severity":1,"message":"229","line":5,"column":3,"nodeType":"217","messageId":"218","endLine":5,"endColumn":12},{"ruleId":"215","severity":1,"message":"230","line":6,"column":3,"nodeType":"217","messageId":"218","endLine":6,"endColumn":17},{"ruleId":"219","severity":1,"message":"231","line":95,"column":6,"nodeType":"221","endLine":95,"endColumn":24,"suggestions":"232"},{"ruleId":"219","severity":1,"message":"233","line":71,"column":6,"nodeType":"221","endLine":71,"endColumn":8,"suggestions":"234"},{"ruleId":"215","severity":1,"message":"224","line":1,"column":15,"nodeType":"217","messageId":"218","endLine":1,"endColumn":30},{"ruleId":"215","severity":1,"message":"235","line":2,"column":17,"nodeType":"217","messageId":"218","endLine":2,"endColumn":25},{"ruleId":"215","severity":1,"message":"236","line":17,"column":10,"nodeType":"217","messageId":"218","endLine":17,"endColumn":26},{"ruleId":"215","severity":1,"message":"237","line":78,"column":11,"nodeType":"217","messageId":"218","endLine":78,"endColumn":23},{"ruleId":"215","severity":1,"message":"238","line":86,"column":33,"nodeType":"217","messageId":"218","endLine":86,"endColumn":37},{"ruleId":"215","severity":1,"message":"235","line":2,"column":17,"nodeType":"217","messageId":"218","endLine":2,"endColumn":25},{"ruleId":"215","severity":1,"message":"228","line":96,"column":5,"nodeType":"217","messageId":"218","endLine":96,"endColumn":11},{"ruleId":"215","severity":1,"message":"239","line":6,"column":3,"nodeType":"217","messageId":"218","endLine":6,"endColumn":15},{"ruleId":"215","severity":1,"message":"240","line":11,"column":17,"nodeType":"217","messageId":"218","endLine":11,"endColumn":26},{"ruleId":"215","severity":1,"message":"241","line":27,"column":10,"nodeType":"217","messageId":"218","endLine":27,"endColumn":16},{"ruleId":"242","severity":1,"message":"243","line":1,"column":38,"nodeType":"244","messageId":"245","endLine":1,"endColumn":39,"suggestions":"246"},{"ruleId":"242","severity":1,"message":"243","line":1,"column":63,"nodeType":"244","messageId":"245","endLine":1,"endColumn":64,"suggestions":"247"},{"ruleId":"215","severity":1,"message":"248","line":1,"column":38,"nodeType":"217","messageId":"218","endLine":1,"endColumn":53},{"ruleId":"215","severity":1,"message":"249","line":7,"column":3,"nodeType":"217","messageId":"218","endLine":7,"endColumn":25},{"ruleId":"215","severity":1,"message":"250","line":67,"column":34,"nodeType":"217","messageId":"218","endLine":67,"endColumn":49},{"ruleId":"219","severity":1,"message":"251","line":108,"column":6,"nodeType":"221","endLine":108,"endColumn":12,"suggestions":"252"},{"ruleId":"215","severity":1,"message":"253","line":4,"column":10,"nodeType":"217","messageId":"218","endLine":4,"endColumn":34},{"ruleId":"215","severity":1,"message":"254","line":5,"column":10,"nodeType":"217","messageId":"218","endLine":5,"endColumn":13},{"ruleId":"219","severity":1,"message":"255","line":59,"column":6,"nodeType":"221","endLine":59,"endColumn":42,"suggestions":"256"},"no-native-reassign",["257"],"no-negated-in-lhs",["258"],"@typescript-eslint/no-unused-vars","'SubscriptionClient' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history', 'queryParam', and 'queryReadyToStart'. Either include them or remove the dependency array.","ArrayExpression",["259"],"'error' is assigned a value but never used.","'useApolloClient' is defined but never used.","'reset' is defined but never used.","'QueryRestaurant' is defined but never used.","'RESTAURANT_FRAGMENT' is defined but never used.","'errors' is assigned a value but never used.","'faRecycle' is defined but never used.","'faRemoveFormat' is defined but never used.","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["260"],"React Hook useEffect has missing dependencies: 'queryParam' and 'verifyCode'. Either include them or remove the dependency array.",["261"],"'useState' is defined but never used.","'GQL_MYRESTAURANT' is defined but never used.","'restaurantId' is assigned a value but never used.","'data' is assigned a value but never used.","'faDoorClosed' is defined but never used.","'useEffect' is defined but never used.","'create' is defined but never used.","no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["262","263"],["264","265"],"'useSubscription' is defined but never used.","'OnOrderUpdateVariables' is defined but never used.","'mutationLoading' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'id' and 'subscribeToMore'. Either include them or remove the dependency array.",["266"],"'getCombinedModifierFlags' is defined but never used.","'map' is defined but never used.","React Hook useEffect has missing dependencies: 'googleMap' and 'googleMaps'. Either include them or remove the dependency array.",["267"],"no-global-assign","no-unsafe-negation",{"desc":"268","fix":"269"},{"desc":"270","fix":"271"},{"desc":"272","fix":"273"},{"messageId":"274","fix":"275","desc":"276"},{"messageId":"277","fix":"278","desc":"279"},{"messageId":"274","fix":"280","desc":"276"},{"messageId":"277","fix":"281","desc":"279"},{"desc":"282","fix":"283"},{"desc":"284","fix":"285"},"Update the dependencies array to be: [history, loading, queryParam, queryReadyToStart]",{"range":"286","text":"287"},"Update the dependencies array to be: [history, subscriptionData]",{"range":"288","text":"289"},"Update the dependencies array to be: [queryParam, verifyCode]",{"range":"290","text":"291"},"removeEscape",{"range":"292","text":"293"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"294","text":"295"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"296","text":"293"},{"range":"297","text":"295"},"Update the dependencies array to be: [data, id, subscribeToMore]",{"range":"298","text":"299"},"Update the dependencies array to be: [driverCoords.lat, driverCoords.lng, googleMap, googleMaps]",{"range":"300","text":"301"},[1460,1469],"[history, loading, queryParam, queryReadyToStart]",[2007,2025],"[history, subscriptionData]",[1800,1802],"[queryParam, verifyCode]",[37,38],"",[37,37],"\\",[62,63],[62,62],[2479,2485],"[data, id, subscribeToMore]",[1586,1622],"[driverCoords.lat, driverCoords.lng, googleMap, googleMaps]"]