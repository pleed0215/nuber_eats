[{"/Users/pleed0215/Documents/mystudy/nuber_eats/src/index.tsx":"1","/Users/pleed0215/Documents/mystudy/nuber_eats/src/reportWebVitals.ts":"2","/Users/pleed0215/Documents/mystudy/nuber_eats/src/apollo.ts":"3","/Users/pleed0215/Documents/mystudy/nuber_eats/src/App.tsx":"4","/Users/pleed0215/Documents/mystudy/nuber_eats/src/gloabl.constant.ts":"5","/Users/pleed0215/Documents/mystudy/nuber_eats/src/routers/logged-out-router.tsx":"6","/Users/pleed0215/Documents/mystudy/nuber_eats/src/routers/logged-in-router.tsx":"7","/Users/pleed0215/Documents/mystudy/nuber_eats/src/codegen/globalTypes.ts":"8","/Users/pleed0215/Documents/mystudy/nuber_eats/src/hooks/useMe.ts":"9","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/404.tsx":"10","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/logint.tsx":"11","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/create-account.tsx":"12","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/order.tsx":"13","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/client/search.tsx":"14","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/client/category.tsx":"15","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/client/restaurant.tsx":"16","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/restaurant/create.restaurant.tsx":"17","/Users/pleed0215/Documents/mystudy/nuber_eats/src/components/header.tsx":"18","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/client/restaurants.tsx":"19","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/restaurant/my.restaurants.tsx":"20","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/restaurant/my.restaurant.tsx":"21","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/user/me.page.tsx":"22","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/restaurant/create.dish.tsx":"23","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/restaurant/update.restaurant.tsx":"24","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/user/password.page.tsx":"25","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/user/verification.page.tsx":"26","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/user/logout.tsx":"27","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/my.page.tsx":"28","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/driver/dashboard.tsx":"29","/Users/pleed0215/Documents/mystudy/nuber_eats/src/hooks/useQueryParam.ts":"30","/Users/pleed0215/Documents/mystudy/nuber_eats/src/fragments.ts":"31","/Users/pleed0215/Documents/mystudy/nuber_eats/src/utils.ts":"32","/Users/pleed0215/Documents/mystudy/nuber_eats/src/components/helmet.onlytitle.tsx":"33","/Users/pleed0215/Documents/mystudy/nuber_eats/src/components/form-button-inactivable.tsx":"34","/Users/pleed0215/Documents/mystudy/nuber_eats/src/components/dish.item.tsx":"35","/Users/pleed0215/Documents/mystudy/nuber_eats/src/components/restaurant.item.tsx":"36","/Users/pleed0215/Documents/mystudy/nuber_eats/src/components/restaurants.tsx":"37","/Users/pleed0215/Documents/mystudy/nuber_eats/src/components/categories.tsx":"38","/Users/pleed0215/Documents/mystudy/nuber_eats/src/components/loader.tsx":"39","/Users/pleed0215/Documents/mystudy/nuber_eats/src/components/uberlogo.tsx":"40","/Users/pleed0215/Documents/mystudy/nuber_eats/src/components/cart.icon.tsx":"41","/Users/pleed0215/Documents/mystudy/nuber_eats/src/components/category.tsx":"42","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/user/set.address.tsx":"43","/Users/pleed0215/Documents/mystudy/nuber_eats/src/hooks/useScript.ts":"44"},{"size":1313,"mtime":1610889047826,"results":"45","hashOfConfig":"46"},{"size":425,"mtime":1609814114691,"results":"47","hashOfConfig":"46"},{"size":2088,"mtime":1609934447897,"results":"48","hashOfConfig":"46"},{"size":1101,"mtime":1611038686676,"results":"49","hashOfConfig":"46"},{"size":228,"mtime":1610773430149,"results":"50","hashOfConfig":"46"},{"size":582,"mtime":1609814114692,"results":"51","hashOfConfig":"46"},{"size":4646,"mtime":1611036409049,"results":"52","hashOfConfig":"46"},{"size":1879,"mtime":1611139359911,"results":"53","hashOfConfig":"46"},{"size":283,"mtime":1609814114689,"results":"54","hashOfConfig":"46"},{"size":650,"mtime":1609814114689,"results":"55","hashOfConfig":"46"},{"size":4171,"mtime":1609814114690,"results":"56","hashOfConfig":"46"},{"size":4704,"mtime":1609814114690,"results":"57","hashOfConfig":"46"},{"size":6273,"mtime":1609814114690,"results":"58","hashOfConfig":"46"},{"size":1930,"mtime":1609814114690,"results":"59","hashOfConfig":"46"},{"size":1652,"mtime":1610773430150,"results":"60","hashOfConfig":"46"},{"size":17963,"mtime":1610773430150,"results":"61","hashOfConfig":"46"},{"size":5157,"mtime":1609814114691,"results":"62","hashOfConfig":"46"},{"size":1315,"mtime":1609837206383,"results":"63","hashOfConfig":"46"},{"size":3354,"mtime":1610773430151,"results":"64","hashOfConfig":"46"},{"size":3230,"mtime":1610773430153,"results":"65","hashOfConfig":"46"},{"size":7009,"mtime":1609934833522,"results":"66","hashOfConfig":"46"},{"size":3905,"mtime":1609814114691,"results":"67","hashOfConfig":"46"},{"size":17670,"mtime":1610773430153,"results":"68","hashOfConfig":"46"},{"size":3890,"mtime":1609814114691,"results":"69","hashOfConfig":"46"},{"size":3156,"mtime":1609814114691,"results":"70","hashOfConfig":"46"},{"size":2496,"mtime":1609814114691,"results":"71","hashOfConfig":"46"},{"size":724,"mtime":1610701809614,"results":"72","hashOfConfig":"46"},{"size":2525,"mtime":1610873120147,"results":"73","hashOfConfig":"46"},{"size":5859,"mtime":1611038751869,"results":"74","hashOfConfig":"46"},{"size":127,"mtime":1609814114689,"results":"75","hashOfConfig":"46"},{"size":1405,"mtime":1609814114689,"results":"76","hashOfConfig":"46"},{"size":179,"mtime":1609859066097,"results":"77","hashOfConfig":"46"},{"size":264,"mtime":1609814114688,"results":"78","hashOfConfig":"46"},{"size":424,"mtime":1611028956851,"results":"79","hashOfConfig":"46"},{"size":1052,"mtime":1609814114688,"results":"80","hashOfConfig":"46"},{"size":1128,"mtime":1610773430148,"results":"81","hashOfConfig":"46"},{"size":915,"mtime":1609814114688,"results":"82","hashOfConfig":"46"},{"size":699,"mtime":1609814114688,"results":"83","hashOfConfig":"46"},{"size":749,"mtime":1610773430148,"results":"84","hashOfConfig":"46"},{"size":167,"mtime":1609814114689,"results":"85","hashOfConfig":"46"},{"size":889,"mtime":1610773430148,"results":"86","hashOfConfig":"46"},{"size":803,"mtime":1609814114688,"results":"87","hashOfConfig":"46"},{"size":3592,"mtime":1611040417355,"results":"88","hashOfConfig":"46"},{"size":317,"mtime":1611040235880,"results":"89","hashOfConfig":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"93"},"1auipe7",{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"93"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"93"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"93"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"93"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"93"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"93"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"93"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"93"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"93"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"185"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"93"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},"/Users/pleed0215/Documents/mystudy/nuber_eats/src/index.tsx",["191"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ApolloProvider } from \"@apollo/client\";\n\nimport { apolloClient } from \"./apollo\";\nimport { toast, ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { HelmetProvider } from \"react-helmet-async\";\nimport { RenderAfterNavermapsLoaded } from \"react-naver-maps\";\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={apolloClient}>\n      <HelmetProvider>\n        {/*제대로 작동 안함.\n        <RenderAfterNavermapsLoaded\n          ncpClientId={process.env.REACT_APP_NCLOUD_MAP_CLIENT_ID}\n          error={<p>Maps Load Error</p>}\n          loading={<p>Maps Loading...</p>}\n          submodule={[\"geocoder\"]}\n        >*/}\n        <div className=\"pb-10\">\n          <App />\n          <ToastContainer position={toast.POSITION.BOTTOM_LEFT} />\n        </div>\n      </HelmetProvider>\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["192","193"],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/reportWebVitals.ts",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/apollo.ts",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/App.tsx",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/gloabl.constant.ts",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/routers/logged-out-router.tsx",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/routers/logged-in-router.tsx",["194"],"import React, { useEffect } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport { UserRole } from \"../codegen/globalTypes\";\nimport { Header } from \"../components/header\";\nimport { useMe } from \"../hooks/useMe\";\nimport { NotFound } from \"../pages/404\";\nimport { CategoryPage } from \"../pages/client/category\";\nimport { Restaurant } from \"../pages/client/restaurant\";\nimport { RestaurantsPage } from \"../pages/client/restaurants\";\nimport { SearchPage } from \"../pages/client/search\";\nimport { CreateRestaurant } from \"../pages/restaurant/create.restaurant\";\nimport { MyRestaurants } from \"../pages/restaurant/my.restaurants\";\nimport { MyRestaurant } from \"../pages/restaurant/my.restaurant\";\nimport { LogOutPage } from \"../pages/user/logout\";\nimport { EditProfile } from \"../pages/user/me.page\";\nimport { UpdatePassword } from \"../pages/user/password.page\";\nimport { VerificationPage } from \"../pages/user/verification.page\";\nimport { CreateDish } from \"../pages/restaurant/create.dish\";\nimport { UpdateRestaurant } from \"../pages/restaurant/update.restaurant\";\n\nimport { Order } from \"../pages/order\";\nimport { DashBoard } from \"../pages/driver/dashboard\";\nimport { MyPage } from \"../pages/my.page\";\nimport { TOKEN_NAME } from \"../gloabl.constant\";\nimport { authTokenVar, isLoggedInVar } from \"../apollo\";\nimport { useApolloClient } from \"@apollo/client\";\nimport { SetAddress } from \"../pages/user/set.address\";\n\ninterface IRouteItem {\n  path: string;\n  component: React.FC;\n  exact?: boolean;\n}\n\nconst clientRoutes: IRouteItem[] = [\n  {\n    path: \"/\",\n    component: RestaurantsPage,\n    exact: true,\n  },\n  {\n    path: \"/search\",\n    component: SearchPage,\n  },\n  {\n    path: \"/category/:slug\",\n    component: CategoryPage,\n  },\n  {\n    path: \"/restaurant/:id\",\n    component: Restaurant,\n  },\n];\n\nconst ownerRoutes: IRouteItem[] = [\n  {\n    path: \"/\",\n    component: MyRestaurants,\n    exact: true,\n  },\n  {\n    path: \"/create-restaurant\",\n    component: CreateRestaurant,\n  },\n  {\n    path: \"/my-restaurant/:restaurantId/:dishId/update\",\n    component: CreateDish,\n    exact: true,\n  },\n  {\n    path: \"/my-restaurant/:restaurantId/create-dish\",\n    component: CreateDish,\n  },\n  {\n    path: \"/my-restaurant/:id/update\",\n    component: UpdateRestaurant,\n  },\n  {\n    path: \"/my-restaurant/:id\",\n    component: MyRestaurant,\n  },\n];\n\nconst driversRoutes: IRouteItem[] = [{ path: \"/\", component: DashBoard }];\n\nconst commonRoutes: IRouteItem[] = [\n  {\n    path: \"/verification\",\n    component: VerificationPage,\n  },\n  {\n    path: \"/me\",\n    component: EditProfile,\n  },\n  {\n    path: \"/password\",\n    component: UpdatePassword,\n  },\n  {\n    path: \"/logout\",\n    component: LogOutPage,\n  },\n  {\n    path: \"/orders/:id\",\n    component: Order,\n  },\n  {\n    path: \"/my-page\",\n    component: MyPage,\n  },\n  {\n    path: \"/my-address\",\n    component: SetAddress,\n  },\n];\n\nexport const LoggedInRouter = () => {\n  const { data, loading, error } = useMe();\n  const client = useApolloClient();\n\n  if (loading) {\n    return (\n      <div className=\"h-screen flex justify-center items-center\">\n        <span className=\"font-medium text-xl tracking-wide\">Loading...</span>\n      </div>\n    );\n  }\n\n  if (!loading && error) {\n    localStorage.removeItem(TOKEN_NAME);\n    isLoggedInVar(false);\n    authTokenVar(null);\n    client.cache.reset();\n  }\n\n  return (\n    <Router>\n      <Header />\n      <Switch>\n        {commonRoutes.map((route) => (\n          <Route\n            key={route.path}\n            path={route.path}\n            exact={Boolean(route.exact)}\n          >\n            <route.component />\n          </Route>\n        ))}\n        {data?.me?.role === UserRole.Client &&\n          clientRoutes.map((route) => (\n            <Route\n              key={route.path}\n              path={route.path}\n              exact={Boolean(route.exact)}\n            >\n              <route.component />\n            </Route>\n          ))}\n        {data?.me?.role === UserRole.Owner &&\n          ownerRoutes.map((route) => (\n            <Route\n              key={route.path}\n              path={route.path}\n              exact={Boolean(route.exact)}\n            >\n              <route.component />\n            </Route>\n          ))}\n        {data?.me?.role === UserRole.Delivery &&\n          driversRoutes.map((route) => (\n            <Route\n              key={route.path}\n              path={route.path}\n              exact={Boolean(route.exact)}\n            >\n              <route.component />\n            </Route>\n          ))}\n\n        <Route>\n          <NotFound />\n        </Route>\n      </Switch>\n    </Router>\n  );\n};\n","/Users/pleed0215/Documents/mystudy/nuber_eats/src/codegen/globalTypes.ts",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/hooks/useMe.ts",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/404.tsx",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/logint.tsx",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/create-account.tsx",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/order.tsx",["195"],"import { gql, useMutation, useQuery } from \"@apollo/client\";\nimport React, { useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { OrderStatus, UserRole } from \"../codegen/globalTypes\";\nimport { OnOrderUpdate } from \"../codegen/OnOrderUpdate\";\nimport {\n  OwnerUpdateOrder,\n  OwnerUpdateOrderVariables,\n} from \"../codegen/OwnerUpdateOrder\";\nimport {\n  QueryOrderDetail,\n  QueryOrderDetailVariables,\n} from \"../codegen/QueryOrderDetail\";\nimport { HelmetOnlyTitle } from \"../components/helmet.onlytitle\";\nimport { FULL_ORDER_FRAGMENT } from \"../fragments\";\nimport { useMe } from \"../hooks/useMe\";\n\ninterface IParams {\n  id: string;\n}\n\nconst GQL_GET_ORDER = gql`\n  query QueryOrderDetail($id: Int!) {\n    orderDetail(id: $id) {\n      ok\n      error\n      order {\n        ...FullOrderPart\n      }\n    }\n  }\n  ${FULL_ORDER_FRAGMENT}\n`;\n\nconst GQL_ON_ORDER = gql`\n  subscription OnOrderUpdate($orderId: Float!) {\n    orderUpdate(orderId: $orderId) {\n      ...FullOrderPart\n    }\n  }\n  ${FULL_ORDER_FRAGMENT}\n`;\n\nconst GQL_UPDATE_ORDER = gql`\n  mutation OwnerUpdateOrder($id: Float!, $orderStatus: OrderStatus!) {\n    updateOrder(id: $id, orderStatus: $orderStatus) {\n      ok\n      error\n    }\n  }\n`;\n\nexport const Order = () => {\n  const { id } = useParams<IParams>();\n  const { data, loading, error, subscribeToMore } = useQuery<\n    QueryOrderDetail,\n    QueryOrderDetailVariables\n  >(GQL_GET_ORDER, {\n    variables: {\n      id: +id,\n    },\n  });\n  const { data: userData } = useMe();\n  const [updateOrder] = useMutation<\n    OwnerUpdateOrder,\n    OwnerUpdateOrderVariables\n  >(GQL_UPDATE_ORDER, {\n    refetchQueries: [\n      {\n        query: GQL_GET_ORDER,\n        variables: {\n          id: +id,\n        },\n      },\n    ],\n  });\n\n  const onButtonClick = async (status: OrderStatus) =>\n    await updateOrder({ variables: { id: +id, orderStatus: status } });\n\n  useEffect(() => {\n    subscribeToMore({\n      document: GQL_ON_ORDER,\n      variables: {\n        orderId: +id,\n      },\n      updateQuery: (\n        prev,\n        {\n          subscriptionData: { data },\n        }: { subscriptionData: { data: OnOrderUpdate } }\n      ) => {\n        if (!data) return prev;\n        return {\n          orderDetail: {\n            ...prev.orderDetail,\n            order: {\n              ...data.orderUpdate,\n            },\n          },\n        };\n      },\n    });\n    return () => {};\n  }, [data]);\n\n  return (\n    <div className=\"layout__container mt-32 flex justify-center items-center\">\n      <HelmetOnlyTitle title=\"Order Detail\" />\n      {loading ? (\n        <div className=\"w-screen h-screen flex justify-content items-center\">\n          <h1>Loading...</h1>\n        </div>\n      ) : error || !data?.orderDetail.ok ? (\n        <div className=\"w-screen h-screen flex justify-content items-center\">\n          <h1>Data fetching error</h1>\n        </div>\n      ) : (\n        <div className=\"w-1/2 max-w-lg min-w-max flex flex-col items-center border border-gray-700\">\n          <div className=\"w-full text-center py-2 mx-auto bg-gray-700 text-white\">\n            Order #{data?.orderDetail?.order?.id}\n          </div>\n          <div className=\"w-full py-3 px-4 bg-white flex flex-col items-center justify-start\">\n            <div className=\" w-full py-4 text-center text-xl border-b border-gray-700\">\n              ${data?.orderDetail?.order?.totalCost}\n            </div>\n            <div className=\" w-full py-4 border-b border-gray-700\">\n              Prepared By: {data?.orderDetail?.order?.restaurant?.name}\n            </div>\n            <div className=\" w-full py-4 border-b border-gray-700\">\n              Deliver To: {data?.orderDetail?.order?.customer?.email}\n            </div>\n            <div className=\" w-full py-4 border-b border-gray-700\">\n              driver:&nbsp;\n              {data?.orderDetail?.order?.driver === null\n                ? \"Not yet\"\n                : data?.orderDetail?.order?.driver?.email}\n            </div>\n            {userData?.me?.role === UserRole.Client && (\n              <div className=\" w-full py-8 text-center text-lime-500 font-semibold text-lg\">\n                Status:{data?.orderDetail?.order?.orderStatus}\n              </div>\n            )}\n            {userData?.me?.role === UserRole.Delivery &&\n              (data?.orderDetail?.order?.orderStatus ===\n              OrderStatus.Pickedup ? (\n                <button\n                  className=\"auth__form_button\"\n                  onClick={() => onButtonClick(OrderStatus.Delivered)}\n                >\n                  Delivery Completed\n                </button>\n              ) : (\n                <div className=\" w-full py-8 text-center text-lime-500 font-semibold text-lg\">\n                  Status:{data?.orderDetail?.order?.orderStatus}\n                </div>\n              ))}\n\n            {userData?.me?.role === UserRole.Owner && (\n              <>\n                {data?.orderDetail?.order?.orderStatus ===\n                  OrderStatus.Pending && (\n                  <button\n                    className=\"auth__form_button\"\n                    onClick={() => onButtonClick(OrderStatus.Cooking)}\n                  >\n                    Accept Order\n                  </button>\n                )}\n                {data?.orderDetail?.order?.orderStatus ===\n                  OrderStatus.Cooking && (\n                  <button\n                    className=\"auth__form_button\"\n                    onClick={() => onButtonClick(OrderStatus.Cooked)}\n                  >\n                    Order Cooked\n                  </button>\n                )}\n                {data?.orderDetail?.order?.orderStatus !==\n                  OrderStatus.Cooking &&\n                data?.orderDetail?.order?.orderStatus === OrderStatus.Cooked ? (\n                  <div className=\" w-full py-8 text-center text-lime-500 font-semibold text-lg\">\n                    Status:{data?.orderDetail?.order?.orderStatus}\n                  </div>\n                ) : (\n                  <div className=\" w-full py-8 text-center text-lime-500 font-semibold text-lg\">\n                    Status:{data?.orderDetail?.order?.orderStatus}\n                  </div>\n                )}\n              </>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/client/search.tsx",["196"],"import { gql, useLazyQuery } from \"@apollo/client\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  QuerySearchByTerm,\n  QuerySearchByTermVariables,\n} from \"../../codegen/QuerySearchByTerm\";\nimport { HelmetOnlyTitle } from \"../../components/helmet.onlytitle\";\nimport { Restaurants } from \"../../components/restaurants\";\nimport { RESTAURANT_FRAGMENT } from \"../../fragments\";\nimport { useQueryParam } from \"../../hooks/useQueryParam\";\n\nconst GQL_SEARCH_BY_TERM = gql`\n  query QuerySearchByTerm($term: String!, $page: Int!) {\n    searchRestaurantByName(search: { query: $term, page: $page }) {\n      ok\n      error\n      totalPages\n      countTotalItems\n      restaurants {\n        ...RestaurantPart\n        category {\n          name\n          slug\n        }\n      }\n    }\n  }\n  ${RESTAURANT_FRAGMENT}\n`;\n\nexport const SearchPage: React.FC = () => {\n  const queryParam = useQueryParam();\n  const history = useHistory();\n  const [term, setTerm] = useState<string | null>(null);\n  const [queryReadyToStart, { loading, data }] = useLazyQuery<\n    QuerySearchByTerm,\n    QuerySearchByTermVariables\n  >(GQL_SEARCH_BY_TERM);\n\n  useEffect(() => {\n    const inputTerm = queryParam.get(\"term\");\n    if (!inputTerm) {\n      history.replace(\"/\");\n    } else {\n      queryReadyToStart({\n        variables: {\n          term: inputTerm,\n          page: 1,\n        },\n      });\n      setTerm(inputTerm);\n    }\n  }, [loading]);\n\n  return (\n    <div>\n      <HelmetOnlyTitle title={`Searching term: \"${term}\"`} />\n      <div className=\"w-full\">\n        {loading ? (\n          <h1>Loading...</h1>\n        ) : (\n          <Restaurants\n            restaurants={data?.searchRestaurantByName.restaurants}\n            categoryShow={true}\n            title={`Searching: \"${term}\" (Found: ${data?.searchRestaurantByName.countTotalItems})`}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/client/category.tsx",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/client/restaurant.tsx",["197"],"import { gql, useMutation, useQuery } from \"@apollo/client\";\nimport {\n  faCalculator,\n  faCartArrowDown,\n  faCartPlus,\n  faDoorOpen,\n  faHome,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { useState } from \"react\";\nimport { Link, useHistory, useParams } from \"react-router-dom\";\nimport {\n  MutationCreateOrder,\n  MutationCreateOrderVariables,\n} from \"../../codegen/MutationCreateOrder\";\nimport {\n  QueryRestaurant,\n  QueryRestaurantVariables,\n  QueryRestaurant_restaurant_restaurant_dishes,\n} from \"../../codegen/QueryRestaurant\";\nimport { DishItem } from \"../../components/dish.item\";\nimport { DISH_FRAGMENT, RESTAURANT_FRAGMENT } from \"../../fragments\";\nimport { CreateOrderItemInput } from \"../../codegen/globalTypes\";\nimport { CartIcon } from \"../../components/cart.icon\";\nimport { toast } from \"react-toastify\";\nimport { Loader } from \"../../components/loader\";\n\ninterface IParam {\n  id: string;\n}\n\nexport const GQL_RESTAURANT = gql`\n  query QueryRestaurant($id: Float!) {\n    restaurant(id: $id) {\n      ok\n      error\n      restaurant {\n        ...RestaurantPart\n        dishes {\n          ...DishPart\n        }\n      }\n    }\n  }\n  ${RESTAURANT_FRAGMENT}\n  ${DISH_FRAGMENT}\n`;\n\nconst GQL_ORDER = gql`\n  mutation MutationCreateOrder($input: CreateOrderInput!) {\n    createOrder(input: $input) {\n      ok\n      error\n      orderId\n    }\n  }\n`;\n\ninterface IChoice {\n  name: string;\n  extra: number;\n}\n\ninterface IOption {\n  name: string;\n  extra: number;\n  choices?: IChoice[] | null;\n}\n\nexport const Restaurant = () => {\n  const { id } = useParams<IParam>();\n  const history = useHistory();\n  const [\n    dishInfo,\n    setDishInfo,\n  ] = useState<QueryRestaurant_restaurant_restaurant_dishes | null>(null);\n  const [totalPay, setTotalPay] = useState<number>(0);\n  const [options, setOptions] = useState<IOption[]>([]);\n  const [totalOrder, setTotalOrder] = useState<CreateOrderItemInput[]>([]);\n  const [totalOrderPay, setTotalOrderPay] = useState<number>(0);\n  const [seeCart, setSeeCart] = useState<boolean>(false);\n  const [nowOrdering, setNowOrdering] = useState<boolean>(false);\n  const { data, loading, error } = useQuery<\n    QueryRestaurant,\n    QueryRestaurantVariables\n  >(GQL_RESTAURANT, {\n    variables: {\n      id: +id,\n    },\n  });\n\n  const [createOrder, { loading: loadingCreateOrder }] = useMutation<\n    MutationCreateOrder,\n    MutationCreateOrderVariables\n  >(GQL_ORDER, {\n    onCompleted: ({ createOrder: { ok, orderId } }: MutationCreateOrder) => {\n      if (ok) {\n        setNowOrdering(false);\n        setSeeCart(false);\n        toast.success(\n          \"You order was successfully made. Please wait for your delivery.\"\n        );\n        history.push(`/orders/${orderId}`);\n      }\n    },\n    onError: (error) => {\n      toast.error(\"Order failed...\");\n    },\n  });\n\n  const onScroll = (e) => {\n    e.preventDefault();\n    window.scrollTo(0, 0);\n  };\n  const onDishClicked = (id) => {\n    const dish = data?.restaurant.restaurant?.dishes?.find(\n      (dish) => dish.id === id\n    );\n    if (dish !== undefined) {\n      window.scrollTo(0, 0);\n      window.onscroll = () => {\n        window.scrollTo(0, 0);\n      };\n      setDishInfo(dish);\n      setTotalPay(dish.price);\n    }\n  };\n\n  const onOptionClicked = (name, extra) => {\n    const option = options?.find((option) => option.name === name);\n    if (option) {\n      let choicesPay = 0;\n      option.choices?.forEach((choice) => (choicesPay += choice.extra));\n      setOptions(options.filter((option) => option.name !== name));\n      setTotalPay((current) => current - extra - choicesPay);\n    } else {\n      if (options) {\n        setOptions([...options, { name, extra }]);\n        setTotalPay((current) => current + extra);\n      }\n    }\n  };\n\n  const onChoiceClicked = (optionName, choiceName, extra) => {\n    const optionIndex = options?.findIndex(\n      (option) => option.name === optionName\n    );\n    if (optionIndex > -1) {\n      const choiceIndex = options[optionIndex].choices?.findIndex(\n        (choice) => choice.name === choiceName\n      );\n\n      if (choiceIndex !== undefined && choiceIndex > -1) {\n        options[optionIndex].choices?.splice(choiceIndex, 1);\n\n        setOptions([...options]);\n        setTotalPay((current) => current - extra);\n      } else {\n        if (options[optionIndex].choices) {\n          options[optionIndex].choices?.push({ name: choiceName, extra });\n        } else {\n          options[optionIndex].choices = [{ name: choiceName, extra }];\n        }\n        setOptions([...options]);\n        setTotalPay((current) => current + extra);\n      }\n    }\n  };\n\n  const onOrderClosed = () => {\n    window.onscroll = () => {};\n    setDishInfo(null);\n    setTotalPay(0);\n    setOptions([]);\n    setNowOrdering(false);\n  };\n\n  const onAddCartClicked = (dishId) => {\n    const order: CreateOrderItemInput = {\n      dishId,\n      options: [...options],\n    };\n    setTotalOrder([...totalOrder, order]);\n    setTotalOrderPay((current) => current + totalPay);\n    onOrderClosed();\n  };\n\n  const startOrder = async () => {\n    if (nowOrdering || loadingCreateOrder) {\n      return;\n    }\n    setNowOrdering(true);\n    const ok = window.confirm(\"Are you sure order?\");\n    if (ok) {\n      await createOrder({\n        variables: {\n          input: {\n            restaurantId: +id,\n            items: totalOrder,\n          },\n        },\n      });\n    } else {\n      setNowOrdering(false);\n    }\n  };\n\n  const hasOption = (optionName) => {\n    return Boolean(options.find((option) => option.name === optionName));\n  };\n\n  const hasChoice = (optionName, choiceName) => {\n    const option = options.find((o) => o.name === optionName);\n    if (option) {\n      return Boolean(\n        option.choices?.find((choice) => choice.name === choiceName)\n      );\n    } else {\n      return false;\n    }\n  };\n\n  return (\n    <div className=\"w-full flex justify-contern\">\n      {loading ? (\n        <div className=\"w-screen h-screen flex justify-center items-center\">\n          <Loader />\n        </div>\n      ) : error || !data?.restaurant.ok ? (\n        <div className=\"w-screen h-screen flex justify-content items-center\">\n          <h1>Data fetching error</h1>\n        </div>\n      ) : (\n        <div className={`w-full flex flex-col items-center`}>\n          <div\n            className=\"w-full h-80 bg-cover bg-center flex items-center\"\n            style={{\n              backgroundImage: `url(${data?.restaurant.restaurant?.coverImage})`,\n            }}\n          >\n            <div className=\"sm:w-2/3 md:w-1/2 xl:w-1/3 bg-white py-4 pr-4 opacity-95\">\n              <h1 className=\"text-2xl pl-20 flex mb-3 \">\n                {data?.restaurant.restaurant?.name}\n              </h1>\n              <Link\n                to={`/category/${data.restaurant.restaurant?.category?.slug}`}\n              >\n                <h4 className=\"text-sm font-light pl-20 flex mb-2 underline\">\n                  {data?.restaurant.restaurant?.category?.name}\n                </h4>\n              </Link>\n              <h4 className=\"text-sm font-light pl-20 flex items-center\">\n                <FontAwesomeIcon className=\"mr-2\" icon={faHome} />\n                {data?.restaurant.restaurant?.address}\n              </h4>\n            </div>\n          </div>\n          <div className=\"layout__container flex justify-start items-center pt-5\">\n            <div\n              className=\"flex items-center cursor-pointer\"\n              onClick={() => setSeeCart(totalOrder.length > 0 && true)}\n            >\n              <CartIcon n={totalOrder.length} />\n              <span className=\"ml-2 text-lg\">Total: ${totalOrderPay}</span>\n            </div>\n          </div>\n          <div className=\"text-2xl italic border-b pb-2 w-full layout__container mt-4\">\n            Choose Dishes you want to order\n          </div>\n          <div className=\"layout__container grid lg:grid-cols-3 md:grid-cols-2  sm:grid-cols-1 gap-4 mt-4\">\n            {data?.restaurant.restaurant?.dishes?.map((dish) => (\n              <div key={dish.id} onClick={() => onDishClicked(dish.id)}>\n                <DishItem\n                  name={dish.name}\n                  price={dish.price}\n                  description={dish.description}\n                  photo={dish.photo}\n                  cursorPointer\n                />\n              </div>\n            ))}\n          </div>\n          {seeCart && (\n            <div className=\"absolute inset-0 w-full h-full bg-gray-600 bg-opacity-50 z-50 flex justify-center items-center\">\n              <div className=\"flex flex-col w-1/3 min-w-max max-w-sm h-1/2 border border-gray-600 rounded-lg\">\n                <div className=\"w-full h-12 bg-lime-600 rounded-t-lg text-center flex items-center justify-between text-white text-xl font-semibold italic px-4\">\n                  <p></p>\n                  <p>Confirm orders</p>\n                  <p>\n                    <FontAwesomeIcon\n                      icon={faDoorOpen}\n                      className=\"hover:text-gray-300 cursor-pointer\"\n                      onClick={() => setSeeCart(false)}\n                    />\n                  </p>\n                </div>\n                <div className=\"h-full bg-white p-4 flex flex-col items-center justify-start overflow-y-auto\">\n                  <div className=\"text-md font-thin font-mono w-full\">\n                    Total orders\n                    <hr></hr>\n                  </div>\n                  {totalOrder.map((order, index) => {\n                    const dish = data.restaurant.restaurant?.dishes?.find(\n                      (d) => d.id === order.dishId\n                    );\n\n                    return (\n                      <div key={`confirm-order-${index}`} className=\"w-full\">\n                        <div className=\"font-mono text-sm pl-2\">\n                          {`# ${index + 1} - ${dish?.name} / $${dish?.price}`}\n                          {order.options !== null &&\n                            order.options?.map((option, optionIndex) => (\n                              <div\n                                className=\"font-mono text-sm font-thin pl-4\"\n                                key={`confir-option-${optionIndex}`}\n                              >\n                                {`@ Option ${optionIndex + 1}. ${\n                                  option?.name\n                                } - $${option?.extra}`}\n                                {option.choices &&\n                                  option.choices.length > 0 && (\n                                    <div>&lt;Additional&gt;</div>\n                                  )}\n                                {option?.choices?.map((choice, choiceIndex) => (\n                                  <div\n                                    className=\"font-mono text-sm font-thin pl-4\"\n                                    key={`confir-choice-${index}-${choiceIndex}`}\n                                  >{`* ${choiceIndex + 1}. ${choice?.name} - $${\n                                    choice?.extra\n                                  }`}</div>\n                                ))}\n                              </div>\n                            ))}\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n                <div\n                  onClick={() => startOrder()}\n                  className=\"w-full h-12 grid grid-cols-3 items-center text-white bg-lime-600 rounded-b-lg cursor-pointer hover:bg-lime-700  transition duration-200\"\n                >\n                  <p className=\"text-center\">\n                    <FontAwesomeIcon icon={faCalculator} className=\"mr-2\" />\n                    Total: ${totalOrderPay}\n                  </p>\n                  <p className=\"text-center flex justify-center\">\n                    {nowOrdering ? <Loader /> : \"Order Now\"}\n                  </p>\n                  <p></p>\n                </div>\n              </div>\n            </div>\n          )}\n          {dishInfo && (\n            <div className=\"absolute inset-0 w-full h-full bg-gray-600 bg-opacity-50 z-50 flex justify-center items-center\">\n              <div className=\"flex flex-col w-1/3 min-w-max max-w-sm h-1/2 border border-gray-600 rounded-lg\">\n                <div className=\"w-full h-12 bg-lime-600 rounded-t-lg text-center flex items-center justify-between text-white text-xl font-semibold italic px-4\">\n                  <p></p>\n                  <p className=\"truncate\">Order for '{dishInfo.name}'</p>\n                  <p\n                    className=\"hover:text-gray-200 cursor-pointer\"\n                    onClick={() => onOrderClosed()}\n                  >\n                    <FontAwesomeIcon icon={faDoorOpen} />\n                  </p>\n                </div>\n                <div className=\"h-full bg-white p-4 flex flex-col items-center justify-start overflow-y-auto\">\n                  <div className=\"flex w-full h-auto\">\n                    <div\n                      className=\" w-32 h-32 bg-center bg-cover rounded\"\n                      style={{ backgroundImage: `url(${dishInfo.photo})` }}\n                    ></div>\n                    <div className=\"w-full ml-2\">\n                      <div\n                        onClick={() => onAddCartClicked(dishInfo.id)}\n                        className=\"px-2 py-1 text-center bg-blue-400 text-blue-600 hover:bg-blue-600 hover:text-white transition duration-200 rounded-md cursor-pointer\"\n                      >\n                        <FontAwesomeIcon\n                          icon={faCartArrowDown}\n                          className=\"mr-2\"\n                        />\n                        Add to Cart\n                      </div>\n                      <div className=\"text-xl font-bold \">{dishInfo.name}</div>\n                      <div className=\"text-xs font-thin mb-2\">\n                        {dishInfo.description}\n                      </div>\n                      <div className=\" text-sm\">Price: ${dishInfo.price}</div>\n                    </div>\n                  </div>\n                  {dishInfo.options && dishInfo.options.length > 0 && (\n                    <div className=\"w-full mt-2 border-t  border-gray-300 pt-2 px-2 flex flex-col\">\n                      <div className=\"text-xl font-semibold mb-2\">\n                        Select Options &amp; Choices\n                      </div>\n                      {dishInfo.options &&\n                        dishInfo.options.map((option, index) => (\n                          <div\n                            key={`option-${index}`}\n                            className=\"flex flex-col\"\n                          >\n                            <div\n                              className={`flex items-center border px-2 py-1 cursor-pointer rounded-lg mb-2 ${\n                                hasOption(option.name)\n                                  ? \" border-gray-600 shadow bg-lime-200\"\n                                  : \"border-gray-200\"\n                              }`}\n                              onClick={() =>\n                                onOptionClicked(option.name, option.extra)\n                              }\n                            >\n                              <span>\n                                {option.name} -\n                                {option.extra === 0\n                                  ? \"free\"\n                                  : `$${option.extra}`}\n                              </span>\n                            </div>\n                            {option.choices && option.choices.length > 0 && (\n                              <div className=\"ml-4 border p-2 flex flex-col text-sm mb-2\">\n                                <span className=\"mb-1 font-semibold\">\n                                  Choose extra option\n                                </span>\n                                {option.choices &&\n                                  option.choices.map((choice, choiceIndex) => (\n                                    <div\n                                      key={`option-${choice}-${choiceIndex}`}\n                                      className={`px-2 py-1 border rounded-lg mb-1 cursor-pointer ${\n                                        hasChoice(option.name, choice.name)\n                                          ? \"border-gray-600 shadow bg-lime-200\"\n                                          : \"border-gray-200\"\n                                      }`}\n                                      onClick={() =>\n                                        onChoiceClicked(\n                                          option.name,\n                                          choice.name,\n                                          choice.extra\n                                        )\n                                      }\n                                    >\n                                      <div className=\"ml-2 flex items-center\">\n                                        <span>\n                                          {choice.name} -\n                                          {choice.extra === 0\n                                            ? \"free\"\n                                            : `$${choice.extra}`}\n                                        </span>\n                                      </div>\n                                    </div>\n                                  ))}\n                              </div>\n                            )}\n                          </div>\n                        ))}\n                    </div>\n                  )}\n                </div>\n                <div className=\"w-full h-12 flex justify-center items-center text-white bg-lime-600 rounded-b-lg\">\n                  <FontAwesomeIcon icon={faCartPlus} className=\"mr-2\" />\n                  Total: ${totalPay}\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/restaurant/create.restaurant.tsx",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/components/header.tsx",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/client/restaurants.tsx",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/restaurant/my.restaurants.tsx",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/restaurant/my.restaurant.tsx",["198"],"import { gql, useQuery, useSubscription } from \"@apollo/client\";\nimport { faEdit, faHome, faTrash } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { useEffect } from \"react\";\nimport { Link, useHistory, useParams } from \"react-router-dom\";\nimport {\n  QueryMyRestaurant,\n  QueryMyRestaurantVariables,\n} from \"../../codegen/QueryMyRestaurant\";\nimport { DishItem } from \"../../components/dish.item\";\n\nimport {\n  DISH_FRAGMENT,\n  FULL_ORDER_FRAGMENT,\n  ORDER_FRAGMENT,\n  RESTAURANT_FRAGMENT,\n} from \"../../fragments\";\nimport {\n  VictoryChart,\n  VictoryAxis,\n  VictoryVoronoiContainer,\n  VictoryLine,\n  VictoryTheme,\n  VictoryTooltip,\n} from \"victory\";\nimport { OnPendingOrders } from \"../../codegen/OnPendingOrders\";\n\ninterface IParam {\n  id: string;\n}\n\nexport const GQL_MYRESTAURANT = gql`\n  query QueryMyRestaurant($id: Float!) {\n    restaurant(id: $id) {\n      ok\n      error\n      restaurant {\n        ...RestaurantPart\n        dishes {\n          ...DishPart\n        }\n        orders {\n          ...OrderPart\n        }\n      }\n    }\n  }\n  ${RESTAURANT_FRAGMENT}\n  ${DISH_FRAGMENT}\n  ${ORDER_FRAGMENT}\n`;\n\nconst GQL_PENDING_ORDERS = gql`\n  subscription OnPendingOrders {\n    pendingOrders {\n      ...FullOrderPart\n    }\n  }\n  ${FULL_ORDER_FRAGMENT}\n`;\n\ninterface IChartData {\n  x: string;\n  y: number;\n}\n\nexport const MyRestaurant = () => {\n  const { id } = useParams<IParam>();\n  let chartData: IChartData[] = [];\n  const { data, loading, error } = useQuery<\n    QueryMyRestaurant,\n    QueryMyRestaurantVariables\n  >(GQL_MYRESTAURANT, {\n    variables: {\n      id: +id,\n    },\n  });\n\n  const {\n    data: subscriptionData,\n    loading: subscriptionLoading,\n  } = useSubscription<OnPendingOrders>(GQL_PENDING_ORDERS);\n\n  const history = useHistory();\n\n  console.log(subscriptionLoading);\n\n  if (!subscriptionLoading && subscriptionData?.pendingOrders?.id) {\n    history.push(`/orders/${subscriptionData.pendingOrders.id}`);\n  }\n\n  if (data && !loading) {\n    data.restaurant?.restaurant?.orders?.forEach((order) => {\n      const date = new Date(order.createAt).toLocaleDateString(\"ko\");\n      const dateIndex = chartData.findIndex((data) => data.x === date);\n      if (dateIndex !== -1) {\n        chartData[dateIndex].y += order.totalCost ? order.totalCost : 0;\n      } else {\n        chartData.push({ x: date, y: order.totalCost ? order.totalCost : 0 });\n      }\n    });\n  }\n\n  return (\n    <div className=\"w-full flex flex-col items-center\">\n      {loading ? (\n        <div className=\"w-screen h-screen flex justify-content items-center\">\n          <h1>Loading...</h1>\n        </div>\n      ) : error || !data?.restaurant.ok ? (\n        <div className=\"w-screen h-screen flex justify-content items-center\">\n          <h1>Data fetching error</h1>\n        </div>\n      ) : (\n        <div className=\"w-full flex flex-col items-center\">\n          <div\n            className=\"w-full h-60 bg-cover bg-center flex items-center\"\n            style={{\n              backgroundImage: `url(${data?.restaurant.restaurant?.coverImage})`,\n            }}\n          >\n            <div className=\"sm:w-2/3 md:w-1/2 xl:w-1/3 bg-white py-4 pr-4 opacity-95\">\n              <h1 className=\"text-2xl pl-20 flex mb-3 \">\n                {data?.restaurant.restaurant?.name}\n              </h1>\n\n              <h4 className=\"text-sm font-light pl-20 flex mb-2 underline\">\n                {data?.restaurant.restaurant?.category?.name}\n              </h4>\n\n              <h4 className=\"text-sm font-light pl-20 flex items-center\">\n                <FontAwesomeIcon className=\"mr-2\" icon={faHome} />\n                {data?.restaurant.restaurant?.address}\n              </h4>\n            </div>\n          </div>\n\n          <div className=\"mt-5 flex justify-start layout__container\">\n            <Link\n              to={`/my-restaurant/${id}/create-dish`}\n              className=\"mr-8 text-white bg-gray-800 py-3 px-10 rounded-md\"\n            >\n              Add Dish &rarr;\n            </Link>\n            <Link\n              to=\"\"\n              className=\"text-white bg-lime-700 py-3 px-10 rounded-md\"\n            >\n              Buy Promotion &rarr;\n            </Link>\n          </div>\n          <div className=\"mt-4 layout__container\">\n            {data?.restaurant?.restaurant?.dishes?.length === 0 ? (\n              <div>No Dishes, please create your menus.</div>\n            ) : (\n              <div className=\"layout__container grid lg:grid-cols-3 md:grid-cols-2  sm:grid-cols-1 gap-4 mt-10\">\n                {data?.restaurant?.restaurant?.dishes?.map((dish) => (\n                  <div key={dish.id} className=\"flex flex-col\">\n                    <DishItem\n                      name={dish.name}\n                      description={dish.description}\n                      photo={dish.photo}\n                      price={dish.price}\n                    />\n                    <div className=\"flex justify-around text-center mt-2\">\n                      <Link\n                        className=\"w-1/3 bg-lime-200 text-lime-600 rounded-md px-3 py-1 hover:text-lime-200 hover:bg-lime-600 transition duration-200\"\n                        to={`/my-restaurant/${id}/${dish.id}/update`}\n                      >\n                        <FontAwesomeIcon icon={faEdit} /> Edit\n                      </Link>\n                      <Link\n                        className=\"w-1/3 bg-red-200 text-red-600 rounded-md px-3 py-1 hover:text-red-200 hover:bg-red-600 transition duration-200\"\n                        to=\"\"\n                      >\n                        <FontAwesomeIcon icon={faTrash} className=\"mr-1\" />\n                        Remove\n                      </Link>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n          <div className=\"mt-20 mb-20\">\n            <h4 className=\"text-center text-2xl font-medium\">Sales</h4>\n            <div className=\"w-full\">\n              <VictoryChart\n                domainPadding={20}\n                width={window.innerWidth}\n                height={500}\n                theme={VictoryTheme.material}\n                containerComponent={<VictoryVoronoiContainer />}\n              >\n                <VictoryLine\n                  data={chartData}\n                  style={{ data: { strokeWidth: 5 } }}\n                  labels={({ datum }) => `$${datum.y}`}\n                  labelComponent={\n                    <VictoryTooltip\n                      style={{ fontSize: 10 }}\n                      renderInPortal\n                      dy={-20}\n                    />\n                  }\n                  interpolation=\"natural\"\n                />\n\n                <VictoryAxis\n                  style={{\n                    tickLabels: {\n                      fontSize: 10,\n                    },\n                  }}\n                />\n              </VictoryChart>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/user/me.page.tsx",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/restaurant/create.dish.tsx",["199","200","201","202","203"],"import {\n  gql,\n  useApolloClient,\n  useLazyQuery,\n  useMutation,\n  useQuery,\n} from \"@apollo/client\";\nimport { faTrashAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { useEffect, useMemo, useState } from \"react\";\nimport { useFieldArray, useForm } from \"react-hook-form\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport { DishChoiceType, DishOptionType } from \"../../codegen/globalTypes\";\nimport {\n  MutationCreateDish,\n  MutationCreateDishVariables,\n} from \"../../codegen/MutationCreateDish\";\nimport { QueryDish } from \"../../codegen/QueryDish\";\nimport {\n  QueryMyRestaurant,\n  QueryMyRestaurant_restaurant_restaurant_dishes,\n  QueryMyRestaurant_restaurant_restaurant_dishes_options_choices,\n} from \"../../codegen/QueryMyRestaurant\";\nimport { FormButtonInactivable } from \"../../components/form-button-inactivable\";\nimport { HelmetOnlyTitle } from \"../../components/helmet.onlytitle\";\nimport { DISH_FRAGMENT } from \"../../fragments\";\nimport { BASE_URL } from \"../../gloabl.constant\";\nimport { GQL_MYRESTAURANT } from \"./my.restaurant\";\n\nconst GQL_CREATE_DISH = gql`\n  mutation MutationCreateDish($input: CreateDishInput!) {\n    createDish(input: $input) {\n      ok\n      error\n      dish {\n        ...DishPart\n      }\n    }\n  }\n  ${DISH_FRAGMENT}\n`;\n\nconst GQL_DISH = gql`\n  query QueryDish($id: Int!) {\n    getDish(dishId: $id) {\n      ok\n      error\n      dish {\n        ...DishPart\n      }\n    }\n  }\n  ${DISH_FRAGMENT}\n`;\n\ninterface IChoice {\n  name: string;\n  extra: number;\n  isRemoved: boolean;\n}\n\ninterface IOptions {\n  name: string;\n  extra: number;\n  choice?: IChoice[] | null;\n}\ninterface ICreateDishForm {\n  name: string;\n  price: number;\n  description: string;\n  file: FileList;\n  options: IOptions[];\n}\n\ninterface IParams {\n  restaurantId: string;\n  dishId: string;\n}\n\ninterface IChoiceInfo {\n  index: string;\n  isExist: boolean;\n  choice: IChoice;\n}\n\ninterface IChoiceInput {\n  optionIndex: number;\n  choicesInfo: IChoiceInfo[] | null;\n}\n\ninterface INestedChoice {\n  register: any;\n  control: any;\n  field: any;\n  namePrefix: any;\n  choices?:\n    | QueryMyRestaurant_restaurant_restaurant_dishes_options_choices[]\n    | null;\n}\n\nconst NestedChoice: React.FC<INestedChoice> = ({\n  register,\n  control,\n  field,\n  choices,\n  namePrefix,\n}) => {\n  const { fields, append, remove } = useFieldArray({\n    control,\n    name: namePrefix,\n  });\n\n  useMemo(\n    () =>\n      choices?.forEach((choice) =>\n        append({ name: choice.name, extra: choice.extra })\n      ),\n    [choices]\n  );\n\n  return (\n    <div className=\"w-full\">\n      <span\n        className=\"cursor-pointer text-xs py-1 px-2 bg-lime-300 text-lime-600 rounded-md hover:bg-lime-600 hover:text-lime-300 transition duration-200 mr-4\"\n        onClick={() => append({ name: \"\", extra: 0 })}\n      >\n        Add choice\n      </span>\n      {fields.map((choice, choiceIndex) => (\n        <div key={choice.id} className=\"flex justify-around items-center mt-2\">\n          <div className=\"w-1/6\">\n            <span>Choice #{choiceIndex + 1}</span>\n          </div>\n          <div className=\"w-2/6 mr-3\">\n            <input\n              className=\"auth__form_input\"\n              type=\"text\"\n              name={`${namePrefix}[${choiceIndex}].name`}\n              placeholder=\"Name\"\n              defaultValue={`${choice.name}`}\n              ref={register({ required: true })}\n            />\n          </div>\n          <div className=\" w-2/6\">\n            <input\n              className=\"auth__form_input\"\n              type=\"number\"\n              name={`${namePrefix}[${choiceIndex}].extra`}\n              placeholder=\"Extra\"\n              defaultValue={`${choice.extra}`}\n              ref={register({ required: true, min: 0 })}\n            />\n          </div>\n          <div\n            onClick={() => remove(choiceIndex)}\n            className=\"cursor-pointer text-xs px-2 py-1 text-center bg-red-300 text-red-600 rounded-md hover:bg-red-600 hover:text-red-300 transition duration-200 ml-3\"\n          >\n            <FontAwesomeIcon icon={faTrashAlt} />\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport const CreateDish: React.FC = () => {\n  const client = useApolloClient();\n  const history = useHistory();\n\n  const { restaurantId, dishId } = useParams<IParams>();\n\n  const [\n    updateDish,\n    { data: dishData, loading: dishLoading },\n  ] = useLazyQuery<QueryDish>(GQL_DISH, {\n    onCompleted: (data: QueryDish) => {\n      setValue(\"name\", dishData.getDish.dish.name);\n      setValue(\"description\", dishData.getDish.dish.description);\n      setValue(\"price\", dishData.getDish.dish.price);\n      dishData.getDish.dish.options.forEach((option) => {\n        appendOption({ name: option.name, extra: option.extra });\n      });\n\n      console.log(dishData.getDish.dish);\n    },\n  });\n\n  useEffect(() => {\n    if (dishId) {\n      updateDish({\n        variables: {\n          id: +dishId,\n        },\n      });\n    }\n  }, []);\n\n  const [createDish, { loading, data }] = useMutation<\n    MutationCreateDish,\n    MutationCreateDishVariables\n  >(GQL_CREATE_DISH, {\n    onCompleted: (data: MutationCreateDish) => {\n      if (data.createDish.ok) {\n        const currentRestaurant = client.readQuery<QueryMyRestaurant>({\n          query: GQL_MYRESTAURANT,\n          variables: {\n            id: +restaurantId,\n          },\n        });\n        let dishes: QueryMyRestaurant_restaurant_restaurant_dishes[] = [];\n        if (currentRestaurant?.restaurant.restaurant?.dishes)\n          dishes = currentRestaurant?.restaurant.restaurant?.dishes;\n        client.writeQuery({\n          query: GQL_MYRESTAURANT,\n          data: {\n            restaurant: {\n              ...currentRestaurant?.restaurant,\n              restaurant: {\n                ...currentRestaurant?.restaurant.restaurant,\n                dishes: [data.createDish.dish, ...dishes],\n              },\n            },\n          },\n          variables: {\n            id: +restaurantId,\n          },\n        });\n        toast.success(\"Dish successfully made.\");\n        history.goBack();\n      } else {\n        toast.error(\n          `While creating menu, an error occured. Message: ${data.createDish.error}`\n        );\n      }\n    },\n  });\n  const {\n    register,\n    formState,\n    handleSubmit,\n    getValues,\n    setValue,\n    control,\n    errors,\n  } = useForm<ICreateDishForm>({\n    mode: \"onChange\",\n  });\n  const {\n    fields: optionFields,\n    append: appendOption,\n    remove: removeOption,\n  } = useFieldArray({\n    control,\n    name: \"options\",\n  });\n\n  const onSubmit = async () => {\n    try {\n      const { name, price, description, file, options } = getValues();\n      const dishOptions: DishOptionType[] = [];\n      const actualFile = file[0];\n      const formBody = new FormData();\n\n      formBody.append(\"file\", actualFile);\n\n      options?.forEach((option) => {\n        const dishChoices: DishChoiceType[] | null = option?.choice ? [] : null;\n\n        option?.choice?.forEach((choice) => {\n          dishChoices?.push({\n            name: choice.name,\n            extra: +choice.extra,\n          });\n        });\n\n        dishOptions.push({\n          name: option.name,\n          extra: +option.extra,\n          choices: dishChoices,\n        });\n      });\n\n      const { url: photo } = await (\n        await fetch(`https://${BASE_URL}/upload/`, {\n          method: \"POST\",\n          body: formBody,\n        })\n      ).json();\n      await createDish({\n        variables: {\n          input: {\n            name,\n            description,\n            price: +price,\n            photo,\n            restaurantId: +restaurantId,\n            options: dishOptions,\n          },\n        },\n      });\n\n      history.goBack();\n    } catch (error) {\n      toast.error(\n        `Some error while creating dish with error: ${error.message}`\n      );\n      history.push(\"/\");\n    }\n  };\n\n  const onAddClicked = () => {\n    appendOption({ value: \"afaf\" });\n  };\n  const onDeleteClicked = (index) => {\n    // @ts-ignore\n    removeOption(index);\n  };\n\n  if (dishId && dishLoading) {\n    return (\n      <div className=\"layout__container flex justify-center items-center text-2xl\">\n        <HelmetOnlyTitle title=\"Creating dish\" />\n        Loading...\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"layout__container\">\n      <HelmetOnlyTitle title=\"Creating dish\" />\n      <h1 className=\"text-2xl font-semibold my-8\">\n        {dishData ? \"Update Dish\" : \"Create Dish\"}\n      </h1>\n      {/* Main form start. \n          Must implment double nested input.\n          Ex) Dish > Choices \n      */}\n      <form\n        className=\"auth__form\"\n        onSubmit={handleSubmit(onSubmit)}\n        encType=\"multipart/form-data\"\n      >\n        <p className=\"text-xl italic text-black mb-2\">\n          Write dish information here.(Many bugs are here. To be fixed.)\n        </p>\n        {/* Dish information. Name, Price, Description */}\n        <div className=\"auth__input_wrapper\">\n          <input\n            className=\"auth__form_input\"\n            type=\"text\"\n            placeholder=\"Name\"\n            name=\"name\"\n            ref={register({ required: \"Name is required\" })}\n          />\n        </div>\n        <div className=\"auth__input_wrapper\">\n          <input\n            className=\"auth__form_input\"\n            type=\"number\"\n            placeholder=\"Price\"\n            name=\"price\"\n            ref={register({\n              required: \"Price is required\",\n              min: { value: 0, message: \"Price must be over 0\" },\n            })}\n          />\n        </div>\n        <div className=\"auth__input_wrapper\">\n          <input\n            className={`auth__form_input ${\n              errors.description && \"border-red-500\"\n            }`}\n            type=\"text\"\n            placeholder=\"Description\"\n            name=\"description\"\n            ref={register({\n              required: \"Category is required\",\n              minLength: 5,\n            })}\n          />\n          {errors.description && (\n            <span className=\"auth__form_error\">\n              {errors.description.message}\n            </span>\n          )}\n        </div>\n        <div className=\"auth__input_wrapper\">\n          <label htmlFor=\"file\" className=\"text-md italic self-start mb-1\">\n            Dish image\n          </label>\n          <input\n            className=\"auth__form_input\"\n            id=\"file\"\n            type=\"file\"\n            name=\"file\"\n            accept=\"image/*\"\n            ref={register({ required: true })}\n          />\n        </div>\n        {/* Starting Option part. Must be dynamic field. It is implemented by React Form Hook useFieldArray and it is easy to use. */}\n        <div className=\"border-t border-gray-600 mt-2 pt-2\">\n          <p className=\"text-xl italic\">Dish options</p>\n          <span\n            onClick={() => onAddClicked()}\n            className=\"auth__form_button inline-block mb-2 cursor-pointer\"\n          >\n            Add Option\n          </span>\n          <div className=\"mb-2\">\n            {optionFields.length === 0 ? (\n              <div>\n                <p className=\"text-sm font-thin text-black\">\n                  No options now. Click above button if you need one.\n                </p>\n              </div>\n            ) : (\n              <div>\n                {/* useFieldArray() returns fields, append, remove, so on. */}\n                {optionFields.map((field, optionIndex) => (\n                  <div\n                    key={field.id}\n                    className=\"border border-gray-500 p-5 mb-2\"\n                  >\n                    <span className=\"inline-block mb-2 mr-4\">\n                      {`#${optionIndex + 1} Option`}\n                    </span>\n                    <span\n                      className=\"cursor-pointer text-xs py-1 px-2 bg-red-300 text-red-600 rounded-md hover:bg-red-600 hover:text-red-300 transition duration-200\"\n                      onClick={() => onDeleteClicked(optionIndex)}\n                    >\n                      Delete me\n                    </span>\n                    <div className=\"flex justify-around\">\n                      <div className=\"auth__input_wrapper w-full mr-3\">\n                        <input\n                          className=\"auth__form_input\"\n                          type=\"text\"\n                          name={`options[${optionIndex}].name`}\n                          defaultValue={`${field.name}`}\n                          placeholder=\"Name\"\n                          ref={register({ required: true })}\n                        />\n                      </div>\n                      <div className=\"auth__input_wrapper w-full\">\n                        <input\n                          className=\"auth__form_input\"\n                          type=\"number\"\n                          name={`options[${optionIndex}].extra`}\n                          defaultValue={`${field.extra}`}\n                          placeholder=\"Extra\"\n                          ref={register({ required: true, min: 0 })}\n                        />\n                      </div>\n                    </div>\n                    {/* Double nested dynamic field for options->choice. Not using useArrayField.. \n                    in fact cannot use for double nested dynamic field.. */}\n                    <div className=\"flex flex-col justify-center items-start w-2/3\">\n                      <NestedChoice\n                        key={`options[${optionIndex}]`}\n                        register={register}\n                        control={control}\n                        field={field}\n                        choices={\n                          dishData.getDish.dish.options[optionIndex].choices\n                        }\n                        namePrefix={`options[${optionIndex}].choices`}\n                      />\n\n                      {/*{optionChoices.map((o) => {\n                        if (o.optionIndex !== optionIndex) {\n                          return <></>;\n                        } else {\n                          return o.choicesInfo?.map(\n                            (choice, choiceIndex) =>\n                              choice.isExist && (\n                                <div\n                                  key={`${makeChoiceString(\n                                    o.optionIndex,\n                                    choiceIndex\n                                  )}`}\n                                  className=\"flex justify-around items-center mt-2\"\n                                >\n                                  <div className=\"w-1/6\">\n                                    <span>Choice #{choiceIndex + 1}</span>\n                                  </div>\n                                  <div className=\"w-2/6 mr-3\">\n                                    <input\n                                      className=\"auth__form_input\"\n                                      type=\"text\"\n                                      name={`options[${optionIndex}].choice[${choiceIndex}].name`}\n                                      placeholder=\"Name\"\n                                      defaultValue=\"\"\n                                      ref={register({ required: true })}\n                                    />\n                                  </div>\n                                  <div className=\" w-2/6\">\n                                    <input\n                                      className=\"auth__form_input\"\n                                      type=\"number\"\n                                      name={`options[${optionIndex}].choice[${choiceIndex}].extra`}\n                                      placeholder=\"Extra\"\n                                      defaultValue=\"0\"\n                                      ref={register({ required: true, min: 0 })}\n                                    />\n                                    <input\n                                      type=\"checkbox\"\n                                      name={`options[${optionIndex}].choice[${choiceIndex}].isRemoved`}\n                                      defaultValue={0}\n                                      ref={register()}\n                                      hidden\n                                    />\n                                  </div>\n                                  <div\n                                    onClick={() =>\n                                      onRemoveChoiceClicked(\n                                        optionIndex,\n                                        choiceIndex\n                                      )\n                                    }\n                                    className=\"cursor-pointer text-xs px-2 py-1 text-center bg-red-300 text-red-600 rounded-md hover:bg-red-600 hover:text-red-300 transition duration-200 ml-3\"\n                                  >\n                                    <FontAwesomeIcon icon={faTrashAlt} />\n                                  </div>\n                                </div>\n                              )\n                          );\n                        }\n                      })}*/}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n        <FormButtonInactivable\n          isActivate={formState.isValid && !formState.isSubmitting}\n          loading={loading}\n        >\n          {dishData ? \"Update Dish\" : \"Create Dish\"}\n        </FormButtonInactivable>\n      </form>\n      {data?.createDish.error && (\n        <p className=\"auth__form_error\">{data.createDish.error}</p>\n      )}\n    </div>\n  );\n};\n","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/restaurant/update.restaurant.tsx",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/user/password.page.tsx",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/user/verification.page.tsx",["204"],"import { gql, useApolloClient, useMutation } from \"@apollo/client\";\nimport React, { useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\n\nimport {\n  MutationVerifyCode,\n  MutationVerifyCodeVariables,\n} from \"../../codegen/MutationVerifyCode\";\nimport { HelmetOnlyTitle } from \"../../components/helmet.onlytitle\";\nimport { useMe } from \"../../hooks/useMe\";\nimport { useQueryParam } from \"../../hooks/useQueryParam\";\n\nconst GQL_VERIFICATION = gql`\n  mutation MutationVerifyCode($code: String!) {\n    verifyCode(code: $code) {\n      ok\n      error\n    }\n  }\n`;\n\n/* Todo:\n    add sendVerification mutation on backend.\n*/\n\nexport const VerificationPage = () => {\n  const history = useHistory();\n  const onVerifyCompleted = (data: MutationVerifyCode) => {\n    const {\n      verifyCode: { ok },\n    } = data;\n\n    if (ok && userData?.me?.id) {\n      client.writeFragment({\n        id: `User:${userData?.me?.id}`,\n        fragment: gql`\n          fragment VerifiedUser on User {\n            verified\n          }\n        `,\n        data: {\n          verified: true,\n        },\n      });\n      toast.success(\"Success to comfirm your verification.\");\n      setTimeout(() => history.push(\"/\"), 2000);\n    } else {\n      toast.error(\"Verification of your email address is not valid.\");\n    }\n  };\n  const [verifyCode, { loading, data, error }] = useMutation<\n    MutationVerifyCode,\n    MutationVerifyCodeVariables\n  >(GQL_VERIFICATION, { onCompleted: onVerifyCompleted });\n\n  const queryParam = useQueryParam();\n  const client = useApolloClient();\n  const { data: userData } = useMe();\n\n  useEffect(() => {\n    const code = queryParam.get(\"code\");\n\n    if (code) {\n      verifyCode({\n        variables: {\n          code,\n        },\n      });\n    }\n  }, []);\n\n  return (\n    <div className=\"mt-52 flex flex-col items-center justify-center\">\n      <HelmetOnlyTitle title=\"Verifying your email address\" />\n      {loading ? (\n        <h1 className=\"text-lg mb-2 font-medium\">\n          Confirming your verification.. Please wait..\n        </h1>\n      ) : !error && data?.verifyCode.ok ? (\n        <h1 className=\"text-lg mb-2 font-medium\">\n          Your verification is confirmed. Please log in.\n        </h1>\n      ) : (\n        <div>\n          <h1 className=\"text-lg mb-2 font-medium\">\n            Couldn't confirm your email verification.\n          </h1>\n          <p>Message: {data?.verifyCode.error} </p>\n        </div>\n      )}\n    </div>\n  );\n};\n","/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/user/logout.tsx",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/my.page.tsx",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/driver/dashboard.tsx",["205","206","207","208","209"],"import React, {\n  createRef,\n  useContext,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport { gql, useMutation, useSubscription } from \"@apollo/client\";\nimport { FULL_ORDER_FRAGMENT } from \"../../fragments\";\nimport { OnCookedOrders } from \"../../codegen/OnCookedOrders\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  MutationOrderPick,\n  MutationOrderPickVariables,\n} from \"../../codegen/MutationOrderPick\";\nimport { OrderStatus } from \"../../codegen/globalTypes\";\nimport { toast } from \"react-toastify\";\nimport { NaverMap, Marker, Polyline } from \"react-naver-maps\";\nimport { ICoords, PositionContext } from \"../../App\";\n\ninterface IDriverProps {\n  lat: number;\n  lng: number;\n  $hover?: any;\n}\n\nconst NAVER_API_HOST = \"http://my.yoyang.io:1111/routes\";\n\nconst GQL_COOCKED_ORDERS = gql`\n  subscription OnCookedOrders {\n    cookedOrders {\n      ...FullOrderPart\n    }\n  }\n  ${FULL_ORDER_FRAGMENT}\n`;\n\nconst GQL_ORDER_PICKED = gql`\n  mutation MutationOrderPick($id: Float!, $status: OrderStatus!) {\n    updateOrder(id: $id, orderStatus: $status) {\n      ok\n      error\n    }\n  }\n`;\n\nconst Driver: React.FC<IDriverProps> = ({ lat, lng, $hover }) => (\n  <div\n    // @ts-ignore\n    lng={lng}\n    lat={lat}\n    className=\"rounded-full w-8 h-8 bg-white flex justify-center items-center\"\n  >\n    🚖\n  </div>\n);\n\nexport const DashBoard = () => {\n  // @ts-ignore\n  const naverMaps = window.naver.maps;\n  const driverCoords = useContext(PositionContext);\n\n  const [destCoords, setDestCoords] = useState<ICoords>();\n\n  // @ts-ignore\n  const [destPath, setDestPath] = useState<naverMaps.LatLng[]>();\n  const [mapRef, setMapRef] = useState<any>();\n\n  const { data: cookedOrdersData } = useSubscription<OnCookedOrders>(\n    GQL_COOCKED_ORDERS\n  );\n  const history = useHistory();\n  const [pickOrder] = useMutation<\n    MutationOrderPick,\n    MutationOrderPickVariables\n  >(GQL_ORDER_PICKED, {\n    onCompleted: (data: MutationOrderPick) => {\n      if (data.updateOrder.ok) {\n        toast.success(\"Order picked up.\");\n        history.push(`/orders/${cookedOrdersData?.cookedOrders.id}`);\n      }\n    },\n  });\n\n  const onDesinationRecieved = (address) => {\n    //https://naveropenapi.apigw.ntruss.com/map-geocode/v2/geocode?query={주소}&coordinate=#{검색_중심_좌표}\"\n    naverMaps.Service.geocode({ query: address }, async (status, response) => {\n      if (status === naverMaps.Service.Status.Error) {\n        console.log(\"error\");\n      } else {\n        const {\n          v2: { addresses },\n        } = response;\n        const lat = addresses[0].y,\n          lng = addresses[0].x;\n        setDestCoords({ lat, lng });\n        const result = await (\n          await fetch(\n            `${NAVER_API_HOST}?start=${driverCoords.lng},${driverCoords.lat}&goal=${lng},${lat}`\n          )\n        ).json();\n        const {\n          route: { traoptimal },\n        } = result;\n        const { guide, path } = traoptimal[0];\n        setDestPath(path.map((p) => new naverMaps.LatLng(p[1], p[0])));\n        const fitBounds = new naverMaps.LatLngBounds(\n          new naverMaps.LatLng(driverCoords.lat, driverCoords.lng),\n          new naverMaps.LatLng(lat, lng)\n        );\n\n        // @ts-ignore\n        mapRef.fitBounds(fitBounds);\n        mapRef.setZoom(16);\n      }\n    });\n  };\n\n  useEffect(() => {\n    if (cookedOrdersData?.cookedOrders?.id) {\n      onDesinationRecieved(\"월배로 119\");\n    }\n    return () => {};\n  }, [cookedOrdersData]);\n\n  return (\n    <div className=\"h-full\">\n      <div\n        id=\"react-naver-map\"\n        className=\"\"\n        style={{ width: window.innerWidth, height: \"50vh\" }}\n      >\n        <NaverMap\n          naverRef={(ref) => {\n            setMapRef(ref);\n          }}\n          mapDivId={\"react-naver-map\"}\n          className=\"w-full h-half\"\n          defaultCenter={{ lat: driverCoords.lat, lng: driverCoords.lng }}\n          center={driverCoords}\n          defaultZoom={17}\n        >\n          <Marker\n            position={new naverMaps.LatLng(driverCoords.lat, driverCoords.lng)}\n            title=\"현재위치\"\n          />\n          {destCoords && (\n            <Marker\n              position={new naverMaps.LatLng(destCoords.lat, destCoords.lng)}\n              title=\"배달위치\"\n            />\n          )}\n          {destCoords && destPath && (\n            <Polyline\n              path={destPath}\n              // clickable // 사용자 인터랙션을 받기 위해 clickable을 true로 설정합니다.\n              strokeColor={\"#5347AA\"}\n              strokeOpacity={0.9}\n              strokeStyle={\"shortdash\"}\n              strokeWeight={5}\n              endIcon={2}\n            />\n          )}\n        </NaverMap>\n      </div>\n      <div>\n        {cookedOrdersData?.cookedOrders.restaurant ? (\n          <div className=\" max-w-screen-sm  mx-auto bg-white shadow-lg py-8 px-5 z-50 mt-4\">\n            <h1 className=\"text-center text-3xl font-medium\">\n              New Cooked order\n            </h1>\n            <h4 className=\"text-center my-3 text-2xl font-medium\">\n              Pick it up soon @{\" \"}\n              {cookedOrdersData?.cookedOrders.restaurant?.name}\n            </h4>\n            <button\n              className=\"auth__form_button w-full block text-center mt-5\"\n              onClick={async () =>\n                await pickOrder({\n                  variables: {\n                    id: cookedOrdersData?.cookedOrders.id,\n                    status: OrderStatus.Pickedup,\n                  },\n                })\n              }\n            >\n              Accept Challenge &rarr;\n            </button>\n          </div>\n        ) : (\n          <div className=\" max-w-screen-sm  mx-auto bg-white relative -top-10  z-50 shadow-lg py-8 px-5\">\n            <h1 className=\"text-center text-3xl font-medium\">No orders yet</h1>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n","/Users/pleed0215/Documents/mystudy/nuber_eats/src/hooks/useQueryParam.ts",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/fragments.ts",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/utils.ts",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/components/helmet.onlytitle.tsx",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/components/form-button-inactivable.tsx",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/components/dish.item.tsx",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/components/restaurant.item.tsx",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/components/restaurants.tsx",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/components/categories.tsx",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/components/loader.tsx",["210"],"import React from \"react\";\n\nenum SpinType {\n  default = \"default\",\n  tailSpin = \"tail-spin\",\n}\n\nexport type Spin = keyof typeof SpinType;\n\n// color tailwindcss color\ninterface ILoader {\n  size?: number; // size using tailwindcss unit.\n  color?: string; // web color not tailwind color\n  type?: Spin;\n}\n\nexport const Loader: React.FC<ILoader> = ({\n  size = 5,\n  color = \"#44a8db\",\n  type = \"default\",\n}) => {\n  return (\n    <>\n      {type === \"default\" && (\n        <div\n          className={`animate-spin w-${size} h-${size} rounded-full border-2 border-gray-200`}\n          style={{ borderTopColor: color }}\n        />\n      )}\n      {type === \"tailSpin\" && (\n        <img src={process.env.PUBLIC_URL + \"tail-spin.svg\"} />\n      )}\n    </>\n  );\n};\n","/Users/pleed0215/Documents/mystudy/nuber_eats/src/components/uberlogo.tsx",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/components/cart.icon.tsx",[],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/components/category.tsx",[],["211","212"],"/Users/pleed0215/Documents/mystudy/nuber_eats/src/pages/user/set.address.tsx",["213","214","215","216","217","218"],"import React, { useContext, useEffect, useState } from \"react\";\nimport { useForm, useWatch } from \"react-hook-form\";\nimport { useMe } from \"../../hooks/useMe\";\nimport { NaverMap, Marker, Polyline } from \"react-naver-maps\";\nimport { ICoords, PositionContext } from \"../../App\";\nimport { useScript } from \"../../hooks/useScript\";\n\ninterface IForm {\n  address: string;\n  zonecode: string;\n}\n\nexport const SetAddress: React.FC = () => {\n  const me = useMe();\n  // @ts-ignore\n  const naverMaps = window.naver.maps;\n  const { register, getValues, setValue, control } = useForm<IForm>();\n  const address = useWatch({ control, name: \"address\" });\n  const [addressCoords, setAddressCoords] = useState<ICoords>(null);\n  const [mapRef, setMapRef] = useState<any>();\n  const currentCoords = useContext(PositionContext);\n  let daumPostcode = null;\n\n  const onPostcodeComplete = (data) => {\n    // daum post code 이용방법\n    // http://postcode.map.daum.net/guide#usage\n\n    if (data) {\n      console.log(data);\n      setValue(\"address\", data.roadAddress);\n      setValue(\"zonecode\", data.zonecode);\n    }\n  };\n  useScript(\n    \"https://t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js\"\n  );\n\n  const onPostcodeClick = () => {\n    // @ts-ignore\n    new daum.Postcode({\n      oncomplete: onPostcodeComplete,\n    }).open();\n  };\n\n  useEffect(() => {\n    if (address && address !== \"\") {\n      naverMaps.Service.geocode(\n        { query: address },\n        async (status, response) => {\n          if (status === naverMaps.Service.Status.Error) {\n            console.log(\"error\");\n          } else {\n            const {\n              v2: { addresses },\n            } = response;\n            const lat = addresses[0].y,\n              lng = addresses[0].x;\n            setAddressCoords({ lat, lng });\n          }\n        }\n      );\n    }\n  }, [address]);\n\n  return (\n    <div className=\"layout__container flex flex-col\">\n      <h4 className=\"text-xl mb-2\">Input your address, click zoncode button</h4>\n      <form className=\"w-full mb-8\">\n        <div className=\"flex mb-2\">\n          <input\n            className=\"auth__form_input mr-2 w-32\"\n            ref={register()}\n            type=\"text\"\n            name=\"zonecode\"\n            placeholder=\"Zonecode\"\n            readOnly\n          />\n          <span\n            className=\"auth__form_button mt-0 cursor-pointer\"\n            onClick={() => onPostcodeClick()}\n          >\n            Zonecode\n          </span>\n        </div>\n        <input\n          className=\"auth__form_input\"\n          ref={register()}\n          type=\"text\"\n          name=\"address\"\n          placeholder=\"Address\"\n          readOnly\n        />\n        <div className=\"w-full flex justify-center\">\n          <input\n            type=\"submit\"\n            className=\"auth__form_button\"\n            value=\"Update address\"\n          />\n        </div>\n      </form>\n      <div id=\"address-map\">\n        <NaverMap\n          naverRef={(ref) => {\n            setMapRef(ref);\n          }}\n          mapDivId={\"react-naver-map\"}\n          className=\"w-full h-half\"\n          defaultCenter={{ lat: currentCoords.lat, lng: currentCoords.lng }}\n          center={addressCoords ? addressCoords : currentCoords}\n          defaultZoom={17}\n        >\n          <Marker\n            position={\n              !addressCoords\n                ? new naverMaps.LatLng(currentCoords.lat, currentCoords.lng)\n                : new naverMaps.LatLng(addressCoords.lat, addressCoords.lng)\n            }\n            title=\"현재위치\"\n          />\n        </NaverMap>\n      </div>\n    </div>\n  );\n};\n","/Users/pleed0215/Documents/mystudy/nuber_eats/src/hooks/useScript.ts",[],{"ruleId":"219","severity":1,"message":"220","line":12,"column":10,"nodeType":"221","messageId":"222","endLine":12,"endColumn":36},{"ruleId":"223","replacedBy":"224"},{"ruleId":"225","replacedBy":"226"},{"ruleId":"219","severity":1,"message":"227","line":1,"column":17,"nodeType":"221","messageId":"222","endLine":1,"endColumn":26},{"ruleId":"228","severity":1,"message":"229","line":105,"column":6,"nodeType":"230","endLine":105,"endColumn":12,"suggestions":"231"},{"ruleId":"228","severity":1,"message":"232","line":54,"column":6,"nodeType":"230","endLine":54,"endColumn":15,"suggestions":"233"},{"ruleId":"219","severity":1,"message":"234","line":111,"column":9,"nodeType":"221","messageId":"222","endLine":111,"endColumn":17},{"ruleId":"219","severity":1,"message":"227","line":4,"column":17,"nodeType":"221","messageId":"222","endLine":4,"endColumn":26},{"ruleId":"219","severity":1,"message":"235","line":6,"column":3,"nodeType":"221","messageId":"222","endLine":6,"endColumn":11},{"ruleId":"219","severity":1,"message":"236","line":10,"column":37,"nodeType":"221","messageId":"222","endLine":10,"endColumn":45},{"ruleId":"219","severity":1,"message":"237","line":87,"column":11,"nodeType":"221","messageId":"222","endLine":87,"endColumn":23},{"ruleId":"228","severity":1,"message":"238","line":119,"column":5,"nodeType":"230","endLine":119,"endColumn":14,"suggestions":"239"},{"ruleId":"228","severity":1,"message":"240","line":197,"column":6,"nodeType":"230","endLine":197,"endColumn":8,"suggestions":"241"},{"ruleId":"228","severity":1,"message":"242","line":71,"column":6,"nodeType":"230","endLine":71,"endColumn":8,"suggestions":"243"},{"ruleId":"219","severity":1,"message":"244","line":2,"column":3,"nodeType":"221","messageId":"222","endLine":2,"endColumn":12},{"ruleId":"219","severity":1,"message":"245","line":5,"column":3,"nodeType":"221","messageId":"222","endLine":5,"endColumn":9},{"ruleId":"219","severity":1,"message":"246","line":47,"column":7,"nodeType":"221","messageId":"222","endLine":47,"endColumn":37},{"ruleId":"219","severity":1,"message":"247","line":105,"column":17,"nodeType":"221","messageId":"222","endLine":105,"endColumn":22},{"ruleId":"228","severity":1,"message":"248","line":124,"column":6,"nodeType":"230","endLine":124,"endColumn":24,"suggestions":"249"},{"ruleId":"250","severity":1,"message":"251","line":31,"column":9,"nodeType":"252","endLine":31,"endColumn":63},{"ruleId":"223","replacedBy":"253"},{"ruleId":"225","replacedBy":"254"},{"ruleId":"219","severity":1,"message":"255","line":4,"column":28,"nodeType":"221","messageId":"222","endLine":4,"endColumn":36},{"ruleId":"219","severity":1,"message":"256","line":14,"column":9,"nodeType":"221","messageId":"222","endLine":14,"endColumn":11},{"ruleId":"219","severity":1,"message":"257","line":17,"column":21,"nodeType":"221","messageId":"222","endLine":17,"endColumn":30},{"ruleId":"219","severity":1,"message":"258","line":20,"column":10,"nodeType":"221","messageId":"222","endLine":20,"endColumn":16},{"ruleId":"219","severity":1,"message":"259","line":22,"column":7,"nodeType":"221","messageId":"222","endLine":22,"endColumn":19},{"ruleId":"228","severity":1,"message":"260","line":63,"column":6,"nodeType":"230","endLine":63,"endColumn":15,"suggestions":"261"},"@typescript-eslint/no-unused-vars","'RenderAfterNavermapsLoaded' is defined but never used.","Identifier","unusedVar","no-native-reassign",["262"],"no-negated-in-lhs",["263"],"'useEffect' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'id' and 'subscribeToMore'. Either include them or remove the dependency array.","ArrayExpression",["264"],"React Hook useEffect has missing dependencies: 'history', 'queryParam', and 'queryReadyToStart'. Either include them or remove the dependency array.",["265"],"'onScroll' is assigned a value but never used.","'useQuery' is defined but never used.","'useState' is defined but never used.","'IChoiceInput' is defined but never used.","React Hook useMemo has a missing dependency: 'append'. Either include it or remove the dependency array.",["266"],"React Hook useEffect has missing dependencies: 'dishId' and 'updateDish'. Either include them or remove the dependency array.",["267"],"React Hook useEffect has missing dependencies: 'queryParam' and 'verifyCode'. Either include them or remove the dependency array.",["268"],"'createRef' is defined but never used.","'useRef' is defined but never used.","'Driver' is assigned a value but never used.","'guide' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'onDesinationRecieved'. Either include it or remove the dependency array.",["269"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["262"],["263"],"'Polyline' is defined but never used.","'me' is assigned a value but never used.","'getValues' is assigned a value but never used.","'mapRef' is assigned a value but never used.","'daumPostcode' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'naverMaps.Service'. Either include it or remove the dependency array.",["270"],"no-global-assign","no-unsafe-negation",{"desc":"271","fix":"272"},{"desc":"273","fix":"274"},{"desc":"275","fix":"276"},{"desc":"277","fix":"278"},{"desc":"279","fix":"280"},{"desc":"281","fix":"282"},{"desc":"283","fix":"284"},"Update the dependencies array to be: [data, id, subscribeToMore]",{"range":"285","text":"286"},"Update the dependencies array to be: [history, loading, queryParam, queryReadyToStart]",{"range":"287","text":"288"},"Update the dependencies array to be: [append, choices]",{"range":"289","text":"290"},"Update the dependencies array to be: [dishId, updateDish]",{"range":"291","text":"292"},"Update the dependencies array to be: [queryParam, verifyCode]",{"range":"293","text":"294"},"Update the dependencies array to be: [cookedOrdersData, onDesinationRecieved]",{"range":"295","text":"296"},"Update the dependencies array to be: [address, naverMaps.Service]",{"range":"297","text":"298"},[2403,2409],"[data, id, subscribeToMore]",[1460,1469],"[history, loading, queryParam, queryReadyToStart]",[2618,2627],"[append, choices]",[5042,5044],"[dishId, updateDish]",[1800,1802],"[queryParam, verifyCode]",[3406,3424],"[cookedOrdersData, onDesinationRecieved]",[1830,1839],"[address, naverMaps.Service]"]