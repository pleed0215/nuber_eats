[{"D:\\mystudy\\nuber_eats\\src\\index.tsx":"1","D:\\mystudy\\nuber_eats\\src\\reportWebVitals.ts":"2","D:\\mystudy\\nuber_eats\\src\\apollo.ts":"3","D:\\mystudy\\nuber_eats\\src\\App.tsx":"4","D:\\mystudy\\nuber_eats\\src\\gloabl.constant.tsx":"5","D:\\mystudy\\nuber_eats\\src\\Routers\\logged-in-router.tsx":"6","D:\\mystudy\\nuber_eats\\src\\Routers\\logged-out-router.tsx":"7","D:\\mystudy\\nuber_eats\\src\\codegen\\globalTypes.ts":"8","D:\\mystudy\\nuber_eats\\src\\hooks\\useMe.tsx":"9","D:\\mystudy\\nuber_eats\\src\\pages\\404.tsx":"10","D:\\mystudy\\nuber_eats\\src\\components\\header.tsx":"11","D:\\mystudy\\nuber_eats\\src\\pages\\logint.tsx":"12","D:\\mystudy\\nuber_eats\\src\\pages\\create-account.tsx":"13","D:\\mystudy\\nuber_eats\\src\\pages\\client\\restaurants.tsx":"14","D:\\mystudy\\nuber_eats\\src\\pages\\user\\verification.page.tsx":"15","D:\\mystudy\\nuber_eats\\src\\pages\\user\\me.page.tsx":"16","D:\\mystudy\\nuber_eats\\src\\components\\uberlogo.tsx":"17","D:\\mystudy\\nuber_eats\\src\\hooks\\useQueryParam.tsx":"18","D:\\mystudy\\nuber_eats\\src\\utils.tsx":"19","D:\\mystudy\\nuber_eats\\src\\components\\form-button-inactivable.tsx":"20","D:\\mystudy\\nuber_eats\\src\\pages\\user\\password.page.tsx":"21","D:\\mystudy\\nuber_eats\\src\\pages\\user\\logout.tsx":"22","D:\\mystudy\\nuber_eats\\src\\components\\helmet.onlytitle.tsx":"23","D:\\mystudy\\nuber_eats\\src\\codegen\\QueryRestaurants.ts":"24","D:\\mystudy\\nuber_eats\\src\\components\\category.tsx":"25"},{"size":957,"mtime":1607646320752,"results":"26","hashOfConfig":"27"},{"size":440,"mtime":1607646320757,"results":"28","hashOfConfig":"27"},{"size":1118,"mtime":1607646320747,"results":"29","hashOfConfig":"27"},{"size":439,"mtime":1607674361827,"results":"30","hashOfConfig":"27"},{"size":42,"mtime":1607646320750,"results":"31","hashOfConfig":"27"},{"size":1684,"mtime":1607673585545,"results":"32","hashOfConfig":"27"},{"size":605,"mtime":1607674447345,"results":"33","hashOfConfig":"27"},{"size":725,"mtime":1607907074925,"results":"34","hashOfConfig":"27"},{"size":300,"mtime":1607646320750,"results":"35","hashOfConfig":"27"},{"size":671,"mtime":1607722187252,"results":"36","hashOfConfig":"27"},{"size":1352,"mtime":1607746030082,"results":"37","hashOfConfig":"27"},{"size":4344,"mtime":1607720885081,"results":"38","hashOfConfig":"27"},{"size":4883,"mtime":1607720867890,"results":"39","hashOfConfig":"27"},{"size":2734,"mtime":1607908990680,"results":"40","hashOfConfig":"27"},{"size":2590,"mtime":1607720912203,"results":"41","hashOfConfig":"27"},{"size":3902,"mtime":1607720929909,"results":"42","hashOfConfig":"27"},{"size":173,"mtime":1607646320750,"results":"43","hashOfConfig":"27"},{"size":130,"mtime":1607646320751,"results":"44","hashOfConfig":"27"},{"size":182,"mtime":1607646320758,"results":"45","hashOfConfig":"27"},{"size":379,"mtime":1607669271030,"results":"46","hashOfConfig":"27"},{"size":3272,"mtime":1607720561438,"results":"47","hashOfConfig":"27"},{"size":1035,"mtime":1607720574353,"results":"48","hashOfConfig":"27"},{"size":276,"mtime":1607720776050,"results":"49","hashOfConfig":"27"},{"size":1723,"mtime":1607722137768,"results":"50","hashOfConfig":"27"},{"size":698,"mtime":1607753342629,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"167bfat",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"54"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"54"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"54"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"54"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"D:\\mystudy\\nuber_eats\\src\\index.tsx",[],["107","108"],"D:\\mystudy\\nuber_eats\\src\\reportWebVitals.ts",[],"D:\\mystudy\\nuber_eats\\src\\apollo.ts",[],"D:\\mystudy\\nuber_eats\\src\\App.tsx",[],"D:\\mystudy\\nuber_eats\\src\\gloabl.constant.tsx",[],"D:\\mystudy\\nuber_eats\\src\\Routers\\logged-in-router.tsx",[],"D:\\mystudy\\nuber_eats\\src\\Routers\\logged-out-router.tsx",[],"D:\\mystudy\\nuber_eats\\src\\codegen\\globalTypes.ts",[],"D:\\mystudy\\nuber_eats\\src\\hooks\\useMe.tsx",[],"D:\\mystudy\\nuber_eats\\src\\pages\\404.tsx",[],"D:\\mystudy\\nuber_eats\\src\\components\\header.tsx",[],"D:\\mystudy\\nuber_eats\\src\\pages\\logint.tsx",["109"],"import { gql, useMutation } from \"@apollo/client\";\r\nimport React from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { toast } from \"react-toastify\";\r\nimport {\r\n  LoginMutation,\r\n  LoginMutationVariables,\r\n} from \"../codegen/LoginMutation\";\r\nimport { EMAIL_REGEX } from \"../utils\";\r\n\r\nimport nuberLogo from \"../images/eats-logo.svg\";\r\nimport { FormButtonInactivable } from \"../components/form-button-inactivable\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Helmet } from \"react-helmet-async\";\r\nimport { authTokenVar, isLoggedInVar } from \"../apollo\";\r\nimport { TOKEN_NAME } from \"../gloabl.constant\";\r\nimport { HelmetOnlyTitle } from \"../components/helmet.onlytitle\";\r\n\r\nconst GQL_LOGIN = gql`\r\n  mutation LoginMutation($email: String!, $password: String!) {\r\n    login(email: $email, password: $password) {\r\n      ok\r\n      error\r\n      token\r\n    }\r\n  }\r\n`;\r\n\r\ntype LoginForm = {\r\n  email?: string;\r\n  password?: string;\r\n};\r\n\r\nexport const LoginPage = () => {\r\n  const { register, handleSubmit, errors, formState } = useForm<LoginForm>({\r\n    mode: \"onChange\",\r\n  });\r\n  const [login, { loading }] = useMutation<\r\n    LoginMutation,\r\n    LoginMutationVariables\r\n  >(GQL_LOGIN, {\r\n    onCompleted: ({ login: { ok, error, token } }) => {\r\n      if (ok && token) {\r\n        toast.success(\"Welcome to nuber-eats\");\r\n        authTokenVar(token);\r\n        localStorage.setItem(TOKEN_NAME, token);\r\n        isLoggedInVar(true);\r\n      } else {\r\n        toast.error(error);\r\n      }\r\n    },\r\n  });\r\n\r\n  const onSubmit = async ({ email, password }) => {\r\n    if (!loading) {\r\n      login({\r\n        variables: {\r\n          email,\r\n          password,\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"h-screen w-full min-w-scree-sm flex justify-center \">\r\n      <HelmetOnlyTitle title=\"Welcome to nuber eats\" />\r\n      <div className=\"h-auto w-full max-w-screen-sm flex flex-col items-center \">\r\n        <img src={nuberLogo} alt=\"logo\" className=\"w-60 mb-5 mt-10 lg:mt-32\" />\r\n        <div className=\"bg-white w-full max-h-half h-1/3 max-w-lg text-gray-800 px-10 py-10 rounded-lg text-center\">\r\n          <h3 className=\"text-3xl font-medium w-full text-left text-gray-800\">\r\n            Welcome back\r\n          </h3>\r\n          <form\r\n            className=\"flex flex-col mt-2\"\r\n            onSubmit={handleSubmit(onSubmit)}\r\n          >\r\n            <div className=\"flex flex-col\">\r\n              <input\r\n                placeholder=\"Email\"\r\n                name=\"email\"\r\n                type=\"email\"\r\n                className=\"auth__form_input\"\r\n                ref={register({\r\n                  required: {\r\n                    value: true,\r\n                    message: \"Email address required.\",\r\n                  },\r\n                  pattern: {\r\n                    value: EMAIL_REGEX,\r\n                    message: \"Please input email address.\",\r\n                  },\r\n                })}\r\n              />\r\n              {errors.email?.message ? (\r\n                <span className=\"auth__form_error\">{errors.email.message}</span>\r\n              ) : (\r\n                <span></span>\r\n              )}\r\n            </div>\r\n            <div className=\"flex flex-col\">\r\n              <input\r\n                placeholder=\"Password\"\r\n                name=\"password\"\r\n                type=\"password\"\r\n                className=\"auth__form_input\"\r\n                ref={register({\r\n                  required: {\r\n                    value: true,\r\n                    message: \"Password required\",\r\n                  },\r\n                })}\r\n              />\r\n              {errors.password?.message && (\r\n                <span className=\"auth__form_error\">\r\n                  {errors.password.message}\r\n                </span>\r\n              )}\r\n            </div>\r\n            <FormButtonInactivable\r\n              loading={loading}\r\n              isActivate={formState.isValid}\r\n            >\r\n              Log in\r\n            </FormButtonInactivable>\r\n          </form>\r\n          <p className=\"mt-4\">\r\n            New to Nuber?{\" \"}\r\n            <Link\r\n              to=\"/create-account\"\r\n              className=\"text-lime-600 hover:underline font-semibold\"\r\n            >\r\n              Create an account.\r\n            </Link>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","D:\\mystudy\\nuber_eats\\src\\pages\\create-account.tsx",["110"],"import { gql, useMutation } from \"@apollo/client\";\r\nimport React from \"react\";\r\nimport { Helmet } from \"react-helmet-async\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { toast } from \"react-toastify\";\r\nimport { CreateUserVariables, CreateUser } from \"../codegen/CreateUser\";\r\nimport { CreateUserInput, UserRole } from \"../codegen/globalTypes\";\r\nimport { FormButtonInactivable } from \"../components/form-button-inactivable\";\r\nimport { HelmetOnlyTitle } from \"../components/helmet.onlytitle\";\r\nimport nuberLogo from \"../images/eats-logo.svg\";\r\nimport { EMAIL_REGEX } from \"../utils\";\r\n\r\nconst GQL_CREATE_ACCOUNT = gql`\r\n  mutation CreateUser($input: CreateUserInput!) {\r\n    createUser(input: $input) {\r\n      ok\r\n      error\r\n    }\r\n  }\r\n`;\r\n\r\nexport const CreateAccountPage = () => {\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    errors,\r\n    formState,\r\n  } = useForm<CreateUserInput>({\r\n    mode: \"onBlur\",\r\n    defaultValues: {\r\n      role: UserRole.Client,\r\n    },\r\n  });\r\n  const history = useHistory();\r\n  const [createUser, { loading }] = useMutation<\r\n    CreateUser,\r\n    CreateUserVariables\r\n  >(GQL_CREATE_ACCOUNT, {\r\n    onCompleted: ({ createUser: { ok, error } }) => {\r\n      if (ok) {\r\n        toast.success(\"Your account is successfully made. Please login now.\");\r\n        history.push(\"/\");\r\n      } else {\r\n        toast.error(error);\r\n      }\r\n    },\r\n  });\r\n\r\n  const onSubmit = async (input: CreateUserInput) => {\r\n    if (!loading) {\r\n      createUser({\r\n        variables: {\r\n          input,\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"h-screen w-full flex justify-center \">\r\n      <HelmetOnlyTitle title=\"Creating your account\" />\r\n      <div className=\"h-auto w-full max-w-screen-sm flex flex-col items-center \">\r\n        <img src={nuberLogo} alt=\"logo\" className=\"w-60 mb-5 mt-10 lg:mt-32\" />\r\n        <div className=\"bg-white w-full max-h-half h-1/3 max-w-lg text-gray-800 px-10 py-10 rounded-lg text-center\">\r\n          <h3 className=\"text-3xl font-medium w-full text-left text-gray-800\">\r\n            Let's get started\r\n          </h3>\r\n          <form\r\n            className=\"flex flex-col mt-2\"\r\n            onSubmit={handleSubmit(onSubmit)}\r\n          >\r\n            <div className=\"flex flex-col\">\r\n              <input\r\n                placeholder=\"Email\"\r\n                name=\"email\"\r\n                type=\"email\"\r\n                className=\"auth__form_input\"\r\n                ref={register({\r\n                  required: {\r\n                    value: true,\r\n                    message: \"Email address required.\",\r\n                  },\r\n                  pattern: {\r\n                    value: EMAIL_REGEX,\r\n                    message: \"Please input email address.\",\r\n                  },\r\n                })}\r\n              />\r\n              {errors.email?.message && (\r\n                <span className=\"auth__form_error\">{errors.email.message}</span>\r\n              )}\r\n            </div>\r\n            <div className=\"flex flex-col\">\r\n              <input\r\n                placeholder=\"Password\"\r\n                name=\"password\"\r\n                type=\"password\"\r\n                className=\"auth__form_input\"\r\n                ref={register({\r\n                  required: {\r\n                    value: true,\r\n                    message: \"Password required\",\r\n                  },\r\n                  minLength: {\r\n                    value: 8,\r\n                    message: \"Password too short, must be over 8\",\r\n                  },\r\n                  maxLength: {\r\n                    value: 16,\r\n                    message: \"Too long password, must be under 16\",\r\n                  },\r\n                })}\r\n              />\r\n              {errors.password?.message && (\r\n                <span className=\"auth__form_error\">\r\n                  {errors.password.message}\r\n                </span>\r\n              )}\r\n            </div>\r\n            <div className=\"flex flex-col\">\r\n              <select\r\n                name=\"role\"\r\n                ref={register({ required: true })}\r\n                className=\"auth__form_input\"\r\n              >\r\n                {Object.keys(UserRole).map((role) => (\r\n                  <option>{role}</option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n            <FormButtonInactivable\r\n              loading={loading}\r\n              isActivate={formState.isValid}\r\n            >\r\n              Create Account\r\n            </FormButtonInactivable>\r\n          </form>\r\n          <p className=\"mt-4\">\r\n            You already have your account?\r\n            <Link\r\n              to=\"/\"\r\n              className=\"text-lime-600 hover:underline font-semibold\"\r\n            >\r\n              Sign in now.\r\n            </Link>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","D:\\mystudy\\nuber_eats\\src\\pages\\client\\restaurants.tsx",["111"],"D:\\mystudy\\nuber_eats\\src\\pages\\user\\verification.page.tsx",["112"],"import { gql, useApolloClient, useMutation } from \"@apollo/client\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nimport {\r\n  MutationVerifyCode,\r\n  MutationVerifyCodeVariables,\r\n} from \"../../codegen/MutationVerifyCode\";\r\nimport { HelmetOnlyTitle } from \"../../components/helmet.onlytitle\";\r\nimport { useMe } from \"../../hooks/useMe\";\r\nimport { useQueryParam } from \"../../hooks/useQueryParam\";\r\n\r\nconst GQL_VERIFICATION = gql`\r\n  mutation MutationVerifyCode($code: String!) {\r\n    verifyCode(code: $code) {\r\n      ok\r\n      error\r\n    }\r\n  }\r\n`;\r\n\r\n/* Todo:\r\n    add sendVerification mutation on backend.\r\n*/\r\n\r\nexport const VerificationPage = () => {\r\n  const history = useHistory();\r\n  const onVerifyCompleted = (data: MutationVerifyCode) => {\r\n    const {\r\n      verifyCode: { ok },\r\n    } = data;\r\n\r\n    if (ok && userData?.me?.id) {\r\n      client.writeFragment({\r\n        id: `User:${userData?.me?.id}`,\r\n        fragment: gql`\r\n          fragment VerifiedUser on User {\r\n            verified\r\n          }\r\n        `,\r\n        data: {\r\n          verified: true,\r\n        },\r\n      });\r\n      toast.success(\"Success to comfirm your verification.\");\r\n      setTimeout(() => history.push(\"/\"), 2000);\r\n    } else {\r\n      toast.error(\"Verification of your email address is not valid.\");\r\n    }\r\n  };\r\n  const [verifyCode, { loading, data, error }] = useMutation<\r\n    MutationVerifyCode,\r\n    MutationVerifyCodeVariables\r\n  >(GQL_VERIFICATION, { onCompleted: onVerifyCompleted });\r\n\r\n  const queryParam = useQueryParam();\r\n  const client = useApolloClient();\r\n  const { data: userData } = useMe();\r\n\r\n  useEffect(() => {\r\n    const code = queryParam.get(\"code\");\r\n\r\n    if (code) {\r\n      verifyCode({\r\n        variables: {\r\n          code,\r\n        },\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"mt-52 flex flex-col items-center justify-center\">\r\n      <HelmetOnlyTitle title=\"Verifying your email address\" />\r\n      {loading ? (\r\n        <h1 className=\"text-lg mb-2 font-medium\">\r\n          Confirming your verification.. Please wait..\r\n        </h1>\r\n      ) : !error && data?.verifyCode.ok ? (\r\n        <h1 className=\"text-lg mb-2 font-medium\">\r\n          Your verification is confirmed. Please log in.\r\n        </h1>\r\n      ) : (\r\n        <div>\r\n          <h1 className=\"text-lg mb-2 font-medium\">\r\n            Couldn't confirm your email verification.\r\n          </h1>\r\n          <p>Message: {data?.verifyCode.error} </p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","D:\\mystudy\\nuber_eats\\src\\pages\\user\\me.page.tsx",[],"D:\\mystudy\\nuber_eats\\src\\components\\uberlogo.tsx",[],"D:\\mystudy\\nuber_eats\\src\\hooks\\useQueryParam.tsx",[],"D:\\mystudy\\nuber_eats\\src\\utils.tsx",["113","114"],"export const EMAIL_REGEX = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n","D:\\mystudy\\nuber_eats\\src\\components\\form-button-inactivable.tsx",[],"D:\\mystudy\\nuber_eats\\src\\pages\\user\\password.page.tsx",[],"D:\\mystudy\\nuber_eats\\src\\pages\\user\\logout.tsx",[],"D:\\mystudy\\nuber_eats\\src\\components\\helmet.onlytitle.tsx",[],"D:\\mystudy\\nuber_eats\\src\\codegen\\QueryRestaurants.ts",[],"D:\\mystudy\\nuber_eats\\src\\components\\category.tsx",[],{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","severity":1,"message":"120","line":14,"column":10,"nodeType":"121","messageId":"122","endLine":14,"endColumn":16},{"ruleId":"119","severity":1,"message":"120","line":3,"column":10,"nodeType":"121","messageId":"122","endLine":3,"endColumn":16},{"ruleId":"119","severity":1,"message":"123","line":47,"column":26,"nodeType":"121","messageId":"122","endLine":47,"endColumn":31},{"ruleId":"124","severity":1,"message":"125","line":71,"column":6,"nodeType":"126","endLine":71,"endColumn":8,"suggestions":"127"},{"ruleId":"128","severity":1,"message":"129","line":1,"column":38,"nodeType":"130","messageId":"131","endLine":1,"endColumn":39,"suggestions":"132"},{"ruleId":"128","severity":1,"message":"129","line":1,"column":63,"nodeType":"130","messageId":"131","endLine":1,"endColumn":64,"suggestions":"133"},"no-native-reassign",["134"],"no-negated-in-lhs",["135"],"@typescript-eslint/no-unused-vars","'Helmet' is defined but never used.","Identifier","unusedVar","'error' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'queryParam' and 'verifyCode'. Either include them or remove the dependency array.","ArrayExpression",["136"],"no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["137","138"],["139","140"],"no-global-assign","no-unsafe-negation",{"desc":"141","fix":"142"},{"messageId":"143","fix":"144","desc":"145"},{"messageId":"146","fix":"147","desc":"148"},{"messageId":"143","fix":"149","desc":"145"},{"messageId":"146","fix":"150","desc":"148"},"Update the dependencies array to be: [queryParam, verifyCode]",{"range":"151","text":"152"},"removeEscape",{"range":"153","text":"154"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"155","text":"156"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"157","text":"154"},{"range":"158","text":"156"},[1870,1872],"[queryParam, verifyCode]",[37,38],"",[37,37],"\\",[62,63],[62,62]]